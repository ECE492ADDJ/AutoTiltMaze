
HardwareTest.elf:     file format elf32-littlenios2
HardwareTest.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001a0

Program Header:
    LOAD off    0x00001020 vaddr 0x01104020 paddr 0x00800000 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags r-x
    LOAD off    0x000021a0 vaddr 0x008001a0 paddr 0x008001a0 align 2**12
         filesz 0x0000ee18 memsz 0x0000ee18 flags r-x
    LOAD off    0x00010fb8 vaddr 0x0080efb8 paddr 0x00810ae0 align 2**12
         filesz 0x00001b28 memsz 0x00001b28 flags rw-
    LOAD off    0x00013608 vaddr 0x00812608 paddr 0x00812608 align 2**12
         filesz 0x00000000 memsz 0x0000556c flags rw-
    LOAD off    0x00013000 vaddr 0x01104000 paddr 0x01104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01104000  01104000  00013000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01104020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ec50  008001a0  008001a0  000021a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001c8  0080edf0  0080edf0  00010df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b28  0080efb8  00810ae0  00010fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000556c  00812608  00812608  00013608  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00013020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a98  00000000  00000000  00013048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001d2a  00000000  00000000  00013ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027fb5  00000000  00000000  0001580a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006ac8  00000000  00000000  0003d7bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014eea  00000000  00000000  00044287  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ed4  00000000  00000000  00059174  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001aa9  00000000  00000000  0005b048  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005521  00000000  00000000  0005caf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00062014  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000310  00000000  00000000  00062028  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00066540  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00066546  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00066552  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00066553  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00066554  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00066558  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006655c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00066560  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0006656b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00066576  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  00066581  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000046  00000000  00000000  0006658e  2**0
                  CONTENTS, READONLY
 29 .jdi          000051db  00000000  00000000  000665d4  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00065541  00000000  00000000  0006b7af  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01104000 l    d  .entry	00000000 .entry
01104020 l    d  .exceptions	00000000 .exceptions
008001a0 l    d  .text	00000000 .text
0080edf0 l    d  .rodata	00000000 .rodata
0080efb8 l    d  .rwdata	00000000 .rwdata
00812608 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001d8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 test.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0080efb8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00801c84 l     F .text	00000058 std
00801d90 l     F .text	00000008 __fp_lock
00801d98 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00802dc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00802e28 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00802f2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00803050 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00803130 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00803290 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
008034dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00810a54 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00803794 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00810a58 l     O .rwdata	00000004 lockid
0081262c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00810a5c l     O .rwdata	00000004 lockid
00812634 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
008051cc l     F .text	00000044 OS_InitMisc
00805210 l     F .text	0000006c OS_InitRdyList
00805374 l     F .text	000000e0 OS_InitTCBList
008050f0 l     F .text	000000dc OS_InitEventList
0080527c l     F .text	0000007c OS_InitTaskIdle
008052f8 l     F .text	0000007c OS_InitTaskStat
008055e8 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00807508 l     F .text	00000110 OS_FlagTaskRdy
00807260 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080f968 l     O .rwdata	0000106c jtag_uart_0
008109d4 l     O .rwdata	0000002c character_lcd_0
00810a00 l     O .rwdata	0000002c rs232_0
0080be74 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080c124 l     F .text	000002c8 altera_avalon_jtag_uart_irq
0080c3ec l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080cc04 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080d7ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080d9c4 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080dcd4 l     F .text	000000f8 alt_file_locked
0080df58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080ea80 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080ec34 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
0080ed80 l     F .text	00000040 alt_sim_halt
00810aaa g     O .rwdata	00000002 OSTaskNameSize
00802b30 g     F .text	00000070 _isatty_r
008032f0 g     F .text	000000c8 alt_main
0080034c g     F .text	000000a0 _puts_r
008178e4 g     O .bss	00000100 alt_irq
00802ba0 g     F .text	00000078 _lseek_r
00807dfc g     F .text	000000d4 OS_MemInit
00810ae0 g       *ABS*	00000000 __flash_rwdata_start
0080bd5c g     F .text	00000064 OSTimeSet
0080cd7c g     F .text	00000034 alt_up_character_lcd_send_cmd
00803d48 g     F .text	000006b4 OSEventPendMulti
00817b74 g       *ABS*	00000000 __alt_heap_start
0080e560 g     F .text	00000020 OSTaskCreateHook
008126c0 g     O .bss	00002000 task1_stk
00810a82 g     O .rwdata	00000002 OSMboxEn
00804450 g     F .text	0000007c OSIntEnter
0080276c g     F .text	00000068 __sseek
00801cec g     F .text	000000a4 __sinit
00810a92 g     O .rwdata	00000002 OSQEn
00801dec g     F .text	0000009c __sfmoreglue
00803a04 g     F .text	000000d0 __malloc_unlock
0080e5bc g     F .text	0000001c OSTaskStatHook
0080d464 g     F .text	00000090 alt_up_rs232_read_fd
0081263c g     O .bss	00000001 OSLockNesting
00810ad0 g     O .rwdata	00000002 OSDataSize
0081263d g     O .bss	00000001 OSRunning
008011d4 g     F .text	000000e0 memmove
0080e5f4 g     F .text	0000001c OSInitHookBegin
00810ac8 g     O .rwdata	00000002 OSTmrSize
00801ddc g     F .text	00000010 _cleanup
00812640 g     O .bss	00000004 OSIdleCtr
0080e22c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0080cd00 g     F .text	0000007c get_DDRAM_addr
0080591c g     F .text	000002e0 OS_TCBInit
01104000 g     F .entry	0000000c __reset
00810ace g     O .rwdata	00000002 OSTmrWheelTblSize
00800000 g       *ABS*	00000000 __flash_exceptions_start
00810a6e g     O .rwdata	00000002 OSEventSize
00812644 g     O .bss	00000001 OSPrioHighRdy
00802abc g     F .text	00000074 _fstat_r
0080e580 g     F .text	00000020 OSTaskDelHook
00812618 g     O .bss	00000004 errno
0080e20c g       .text	00000000 OSStartHighRdy
0080a514 g     F .text	00000200 OSTaskCreateExt
00806d7c g     F .text	00000068 OSFlagPendGetFlagsRdy
00810aae g     O .rwdata	00000002 OSTaskStatStkSize
00805d88 g     F .text	00000334 OSFlagAccept
00808538 g     F .text	000000c8 OSQFlush
00807ed0 g     F .text	00000154 OSQAccept
00812624 g     O .bss	00000004 alt_argv
00818a2c g       *ABS*	00000000 _gp
0080a340 g     F .text	000001d4 OSTaskCreate
00809dcc g     F .text	00000574 OSTaskChangePrio
00812638 g     O .bss	00000004 alt_heapsem
00805bfc g     F .text	0000018c OSDebugInit
0080a714 g     F .text	0000040c OSTaskDel
0080f7e8 g     O .rwdata	00000180 alt_fd_list
008146c0 g     O .bss	00000370 OSFlagTbl
00804ecc g     F .text	000000b8 OS_EventTaskRemove
0080d914 g     F .text	00000094 alt_find_dev
00801134 g     F .text	000000a0 memcpy
00810a98 g     O .rwdata	00000002 OSRdyTblSize
0080cf14 g     F .text	0000004c alt_up_character_lcd_write_fd
00801dd0 g     F .text	0000000c _cleanup_r
0080da9c g     F .text	00000078 alt_io_redirect
0080edf0 g       *ABS*	00000000 __DTOR_END__
0080d3f0 g     F .text	00000074 alt_up_rs232_read_data
008003ec g     F .text	00000014 puts
00803ad4 g     F .text	00000130 OSEventNameGet
00810a7c g     O .rwdata	00000002 OSFlagMax
008044cc g     F .text	00000100 OSIntExit
00810ab6 g     O .rwdata	00000002 OSTCBSize
00812645 g     O .bss	00000001 OSPrioCur
0080c668 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080ed70 g     F .text	00000008 __udivsi3
00802f8c g     F .text	000000c4 isatty
00810a9c g     O .rwdata	00000002 OSStkWidth
00810a90 g     O .rwdata	00000002 OSPtrSize
00810a70 g     O .rwdata	00000002 OSEventTblSize
0080e180 g       .text	00000000 OSCtxSw
0081260c g     O .bss	00000004 __malloc_top_pad
00812648 g     O .bss	00000004 OSTCBList
0081261c g     O .bss	00000004 alt_fd_list_lock
00800474 g     F .text	0000049c __sfvwrite_r
00814a30 g     O .bss	00000c30 OSMemTbl
0081264c g     O .bss	00000001 OSTickStepState
008018a8 g     F .text	00000070 _sbrk_r
00810a94 g     O .rwdata	00000002 OSQMax
00815660 g     O .bss	00000800 OSTaskStatStk
008079e4 g     F .text	0000010c OSMemNameGet
00810a74 g     O .rwdata	00000002 OSFlagEn
00802c18 g     F .text	00000078 _read_r
00810aba g     O .rwdata	00000002 OSTimeTickHookEn
00808a9c g     F .text	00000180 OSQPost
00807618 g     F .text	000000ac OS_FlagUnlink
00810a4c g     O .rwdata	00000004 alt_max_fd
0080d358 g     F .text	00000050 alt_up_rs232_check_parity
008054a8 g     F .text	0000006c OS_MemCopy
00805514 g     F .text	000000d4 OS_Sched
00802998 g     F .text	00000110 _fclose_r
008078e0 g     F .text	00000104 OSMemGet
0080ae48 g     F .text	000001c4 OSTaskNameSet
00801c50 g     F .text	00000034 fflush
00812610 g     O .bss	00000004 __malloc_max_sbrked_mem
00812650 g     O .bss	00000004 OSCtxSwCtr
0080e5d8 g     F .text	0000001c OSTimeTickHook
0080db14 g     F .text	000001c0 alt_irq_register
00810a7e g     O .rwdata	00000002 OSFlagNameSize
00804f84 g     F .text	00000104 OS_EventTaskRemoveMulti
00804d78 g     F .text	00000154 OS_EventTaskWaitMulti
00810a96 g     O .rwdata	00000002 OSQSize
0080319c g     F .text	000000f4 lseek
00809678 g     F .text	0000027c OSSemPend
00810a30 g     O .rwdata	00000004 _global_impure_ptr
008012b4 g     F .text	000005f4 _realloc_r
00810a80 g     O .rwdata	00000002 OSLowestPrio
00817b74 g       *ABS*	00000000 __bss_end
0080e648 g     F .text	00000020 OSTCBInitHook
00810ac6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0080e050 g     F .text	00000110 alt_tick
00810a68 g     O .rwdata	00000002 OSEventEn
00810ac2 g     O .rwdata	00000002 OSTmrCfgNameSize
00801db8 g     F .text	00000018 __fp_lock_all
00807424 g     F .text	000000e4 OS_FlagInit
0080dfb8 g     F .text	00000098 alt_alarm_stop
01108000 g       *ABS*	00000000 __alt_mem_descriptor_memory
00810aa4 g     O .rwdata	00000002 OSTaskIdleStkSize
0081268c g     O .bss	00000004 alt_irq_active
00809204 g     F .text	000000c0 OSSemAccept
00807c10 g     F .text	000000f0 OSMemPut
008076c4 g     F .text	0000021c OSMemCreate
00812654 g     O .bss	00000004 OSIdleCtrMax
011040ec g     F .exceptions	000000d4 alt_irq_handler
0080f7c0 g     O .rwdata	00000028 alt_dev_null
00810ab8 g     O .rwdata	00000002 OSTicksPerSec
0080d1fc g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0080e180 g       .text	00000000 OSIntCtxSw
0080d71c g     F .text	0000001c alt_dcache_flush_all
00812658 g     O .bss	00000004 OSTCBFreeList
00810ae0 g       *ABS*	00000000 __ram_rwdata_end
008098f4 g     F .text	0000017c OSSemPendAbort
00810a44 g     O .rwdata	00000008 alt_dev_list
00803670 g     F .text	00000124 write
00810abc g     O .rwdata	00000002 OSVersionNbr
0080efb8 g       *ABS*	00000000 __ram_rodata_end
00802e54 g     F .text	000000d8 fstat
0080d4f4 g     F .text	00000094 alt_up_rs232_write_fd
00810a64 g     O .rwdata	00000004 OSEndiannessTest
0080ed78 g     F .text	00000008 __umodsi3
00810a76 g     O .rwdata	00000002 OSFlagGrpSize
00817b74 g       *ABS*	00000000 end
0080bff4 g     F .text	00000130 altera_avalon_jtag_uart_init
0080578c g     F .text	000000c8 OS_TaskStat
0080edec g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080cc78 g     F .text	00000088 alt_avalon_timer_sc_init
0080c928 g     F .text	000002dc altera_avalon_jtag_uart_write
00801cdc g     F .text	00000004 __sfp_lock_acquire
00801050 g     F .text	000000e4 memchr
00805454 g     F .text	00000054 OS_MemClr
0080ce24 g     F .text	00000078 alt_up_character_lcd_write
0080e250 g     F .text	00000310 OSTaskStkInit
008001dc g     F .text	000000dc task1
008020a4 g     F .text	00000314 _free_r
00804ad4 g     F .text	00000194 OS_EventTaskRdy
0080ea84 g     F .text	000001b0 __call_exitprocs
0081265c g     O .bss	00000001 OSCPUUsage
00810a38 g     O .rwdata	00000004 __malloc_sbrk_base
008001a0 g     F .text	0000003c _start
00812608 g     O .bss	00000004 char_lcd
00812690 g     O .bss	00000004 _alt_tick_rate
00808600 g     F .text	00000320 OSQPend
0080b80c g     F .text	0000014c OSTimeDly
00812694 g     O .bss	00000004 _alt_nticks
008033b8 g     F .text	00000124 read
0080bdf4 g     F .text	00000080 alt_sys_init
0080d088 g     F .text	000000b0 alt_up_character_lcd_shift_display
0080e94c g     F .text	00000134 __register_exitproc
0081265d g     O .bss	00000001 OSTaskCtr
0080d318 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
0080b958 g     F .text	00000190 OSTimeDlyHMSM
0080d138 g     F .text	00000090 alt_up_character_lcd_erase_pos
0080c500 g     F .text	00000074 altera_avalon_jtag_uart_close
00802c90 g     F .text	00000038 __mulsi3
0080efb8 g       *ABS*	00000000 __ram_rwdata_start
0080edf0 g       *ABS*	00000000 __ram_rodata_start
00812698 g     O .bss	00000028 __malloc_current_mallinfo
00810a6a g     O .rwdata	00000002 OSEventMax
00809a70 g     F .text	00000128 OSSemPost
00804658 g     F .text	000000e4 OSSchedUnlock
0080beac g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080e788 g     F .text	00000104 alt_get_fd
00812660 g     O .bss	00000004 OSMemFreeList
008047ac g     F .text	000000ac OSStatInit
0080718c g     F .text	000000d4 OSFlagQuery
00810aa0 g     O .rwdata	00000002 OSTaskCreateExtEn
00802928 g     F .text	00000070 _close_r
0080e8d8 g     F .text	00000074 memcmp
00804ab8 g     F .text	0000001c OS_Dummy
0080bf5c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00817b74 g       *ABS*	00000000 __alt_stack_base
0080bfa4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00801918 g     F .text	0000013c __swsetup_r
00815e60 g     O .bss	000001e0 OSQTbl
00801e88 g     F .text	000000f0 __sfp
0080f3b8 g     O .rwdata	00000408 __malloc_av_
00801ce8 g     F .text	00000004 __sinit_lock_release
00812664 g     O .bss	00000004 OSTCBHighRdy
00802850 g     F .text	00000060 __sread
00812668 g     O .bss	00000004 OSQFreeList
0080d284 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0080e668 g     F .text	00000120 alt_find_file
0080d738 g     F .text	000000b4 alt_dev_llist_insert
008038fc g     F .text	00000108 __malloc_lock
008035b4 g     F .text	000000bc sbrk
00803c04 g     F .text	00000144 OSEventNameSet
00801a54 g     F .text	000001fc _fflush_r
0081266c g     O .bss	00000001 OSRdyGrp
00812608 g       *ABS*	00000000 __bss_start
008026cc g     F .text	00000098 memset
008002b8 g     F .text	00000094 main
00812628 g     O .bss	00000004 alt_envp
00812614 g     O .bss	00000004 __malloc_max_total_mem
0080bf04 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080ee58 g     O .rodata	00000100 OSUnMapTbl
00810a9a g     O .rwdata	00000002 OSSemEn
0080cfd8 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00806de4 g     F .text	000003a8 OSFlagPost
00802764 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802aa8 g     F .text	00000014 fclose
00804c68 g     F .text	00000110 OS_EventTaskWait
00805854 g     F .text	000000c8 OS_TaskStatStkChk
008179e4 g     O .bss	00000190 _atexit0
0080ab20 g     F .text	00000170 OSTaskDelReq
00800910 g     F .text	00000740 _malloc_r
00810a50 g     O .rwdata	00000004 alt_errno
0080473c g     F .text	00000070 OSStart
008038a0 g     F .text	0000005c __env_unlock
00802480 g     F .text	000000b8 _fwalk
0080b00c g     F .text	00000218 OSTaskResume
00807d00 g     F .text	000000fc OSMemQuery
00810aac g     O .rwdata	00000002 OSTaskStatEn
00810a86 g     O .rwdata	00000002 OSMemMax
00808c1c g     F .text	00000188 OSQPostFront
0080ecb0 g     F .text	00000060 __divsi3
0081266d g     O .bss	00000003 OSRdyTbl
00810a60 g     O .rwdata	00000002 OSDebugEn
0080cde4 g     F .text	00000040 alt_up_character_lcd_open_dev
00801f78 g     F .text	0000012c _malloc_trim_r
0080edf0 g       *ABS*	00000000 __CTOR_END__
00810a78 g     O .rwdata	00000002 OSFlagNodeSize
00810ac0 g     O .rwdata	00000002 OSTmrCfgMax
0080cdb0 g     F .text	00000034 alt_up_character_lcd_init
00808024 g     F .text	00000214 OSQCreate
0080ac90 g     F .text	000001b8 OSTaskNameGet
0080edf0 g       *ABS*	00000000 __flash_rodata_start
00808da4 g     F .text	00000234 OSQPostOpt
00804858 g     F .text	00000240 OSTimeTick
00810aa8 g     O .rwdata	00000002 OSTaskMax
0080edf0 g       *ABS*	00000000 __DTOR_LIST__
008092c4 g     F .text	00000114 OSSemCreate
00810acc g     O .rwdata	00000002 OSTmrWheelSize
0080d588 g     F .text	00000040 alt_up_rs232_open_dev
00810aa2 g     O .rwdata	00000002 OSTaskDelEn
01080000 g       *ABS*	00000000 __alt_mem_sram_0
00809b98 g     F .text	00000130 OSSemQuery
00808238 g     F .text	00000300 OSQDel
00808920 g     F .text	0000017c OSQPendAbort
0080bdc0 g     F .text	00000034 alt_irq_init
0080353c g     F .text	00000078 alt_release_fd
0080d1c8 g     F .text	00000034 alt_up_character_lcd_cursor_off
0080e88c g     F .text	00000014 atexit
008028b0 g     F .text	00000078 _write_r
008045cc g     F .text	0000008c OSSchedLock
008060bc g     F .text	0000013c OSFlagCreate
00810a2c g     O .rwdata	00000004 _impure_ptr
00812620 g     O .bss	00000004 alt_argc
0080d8b0 g     F .text	00000064 _do_dtors
00810a72 g     O .rwdata	00000002 OSEventMultiEn
008061f8 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00812670 g     O .bss	00000004 OSEventFreeList
01104020 g       .exceptions	00000000 alt_irq_entry
00806738 g     F .text	00000644 OSFlagPend
00810abe g     O .rwdata	00000002 OSTmrEn
00801da0 g     F .text	00000018 __fp_unlock_all
00810a3c g     O .rwdata	00000008 alt_fs_list
00805658 g     F .text	00000080 OS_StrCopy
0080d230 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0080d3a8 g     F .text	00000048 alt_up_rs232_write_data
00810a88 g     O .rwdata	00000002 OSMemNameSize
0080e610 g     F .text	0000001c OSInitHookEnd
01104020 g       *ABS*	00000000 __ram_exceptions_start
00810ab4 g     O .rwdata	00000002 OSTCBPrioTblMax
00810ab0 g     O .rwdata	00000002 OSTaskStatStkChkEn
00810a84 g     O .rwdata	00000002 OSMemEn
00810a8e g     O .rwdata	00000002 OSMutexEn
00810ae0 g       *ABS*	00000000 _edata
00817b74 g       *ABS*	00000000 _end
00812674 g     O .bss	00000001 OSIntNesting
011041c0 g       *ABS*	00000000 __ram_exceptions_end
0080c574 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080bae8 g     F .text	00000210 OSTimeDlyResume
008065e4 g     F .text	00000154 OSFlagNameSet
0080b224 g     F .text	000001fc OSTaskStkChk
00810a8a g     O .rwdata	00000002 OSMemSize
008027d4 g     F .text	0000007c __swrite
00810a34 g     O .rwdata	00000004 __malloc_trim_threshold
0080e160 g     F .text	00000020 altera_nios2_qsys_irq_init
00812678 g     O .bss	00000004 OSTCBCur
0080e8a0 g     F .text	00000038 exit
00810a8c g     O .rwdata	00000002 OSMemTblSize
008023b8 g     F .text	000000c8 _fwalk_reent
0080ed10 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01104020 g     F .exceptions	00000000 alt_exception
00801ce0 g     F .text	00000004 __sfp_lock_release
008043fc g     F .text	00000054 OSInit
0080b64c g     F .text	00000144 OSTaskQuery
0080ce9c g     F .text	00000078 alt_up_character_lcd_string
00809158 g     F .text	000000ac OS_QInit
008056d8 g     F .text	00000058 OS_StrLen
00807af0 g     F .text	00000120 OSMemNameSet
00810aa6 g     O .rwdata	00000002 OSTaskProfileEn
0081267c g     O .bss	00000004 OSTime
00816040 g     O .bss	00000800 OSTaskIdleStk
0080edc0 g     F .text	0000002c _exit
0080d5c8 g     F .text	00000154 alt_alarm_start
008064a0 g     F .text	00000144 OSFlagNameGet
0080bcf8 g     F .text	00000064 OSTimeGet
00802538 g     F .text	00000194 __smakebuf_r
00800400 g     F .text	00000074 strlen
0080e5a0 g     F .text	0000001c OSTaskSwHook
0080ddcc g     F .text	0000018c open
00816840 g     O .bss	00000b40 OSEventTbl
00817380 g     O .bss	00000510 OSTCBTbl
00809cc8 g     F .text	00000104 OSSemSet
0080d9a8 g     F .text	0000001c alt_icache_flush_all
0080cf60 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00810ad4 g     O .rwdata	00000004 alt_priority_mask
008093d8 g     F .text	000002a0 OSSemDel
00812680 g     O .bss	00000004 OSFlagFreeList
00810a6c g     O .rwdata	00000002 OSEventNameSize
00812684 g     O .bss	00000001 OSStatRdy
00817890 g     O .bss	00000054 OSTCBPrioTbl
008037f4 g     F .text	000000ac __env_lock
00810ab2 g     O .rwdata	00000002 OSTaskSwHookEn
00810ad8 g     O .rwdata	00000008 alt_alarm_list
00810a7a g     O .rwdata	00000002 OSFlagWidth
0080d84c g     F .text	00000064 _do_ctors
0080d2dc g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
00802cc8 g     F .text	00000100 close
00812630 g     O .bss	00000004 alt_envsem
00812688 g     O .bss	00000004 OSIdleCtrRun
00804a98 g     F .text	00000020 OSVersion
00810ac4 g     O .rwdata	00000002 OSTmrCfgWheelSize
008030b0 g     F .text	00000080 alt_load
0080b790 g     F .text	0000007c OS_TaskStkClr
00810a9e g     O .rwdata	00000002 OSTaskCreateEn
00805088 g     F .text	00000068 OS_EventWaitListInit
0080e62c g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00801ce4 g     F .text	00000004 __sinit_lock_acquire
0080b420 g     F .text	0000022c OSTaskSuspend
00805730 g     F .text	0000005c OS_TaskIdle
00810aca g     O .rwdata	00000002 OSTmrTblSize
00808fd8 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01104000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1104000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1104004:	08406814 	ori	at,at,416
    jmp r1
 1104008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 110402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 110403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 110404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 110405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 110406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 110407c:	10000326 	beq	r2,zero,110408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1104080:	20000226 	beq	r4,zero,110408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1104084:	11040ec0 	call	11040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1104088:	00000306 	br	1104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 110408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 110409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 11040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 11040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 11040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 11040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 11040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 11040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 11040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 11040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 11040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 11040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 11040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 11040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 11040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 11040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 11040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 11040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 11040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 11040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 11040e8:	ef80083a 	eret

011040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 11040ec:	defff904 	addi	sp,sp,-28
 11040f0:	dfc00615 	stw	ra,24(sp)
 11040f4:	df000515 	stw	fp,20(sp)
 11040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 11040fc:	08044500 	call	804450 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104100:	0005313a 	rdctl	r2,ipending
 1104104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1104108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 110410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1104110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1104114:	00800044 	movi	r2,1
 1104118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 110411c:	e0ffff17 	ldw	r3,-4(fp)
 1104120:	e0bffe17 	ldw	r2,-8(fp)
 1104124:	1884703a 	and	r2,r3,r2
 1104128:	1005003a 	cmpeq	r2,r2,zero
 110412c:	1000171e 	bne	r2,zero,110418c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1104130:	e0bffd17 	ldw	r2,-12(fp)
 1104134:	00c02074 	movhi	r3,129
 1104138:	18de3904 	addi	r3,r3,30948
 110413c:	100490fa 	slli	r2,r2,3
 1104140:	10c5883a 	add	r2,r2,r3
 1104144:	11800017 	ldw	r6,0(r2)
 1104148:	e0bffd17 	ldw	r2,-12(fp)
 110414c:	00c02074 	movhi	r3,129
 1104150:	18de3904 	addi	r3,r3,30948
 1104154:	100490fa 	slli	r2,r2,3
 1104158:	10c5883a 	add	r2,r2,r3
 110415c:	10800104 	addi	r2,r2,4
 1104160:	11000017 	ldw	r4,0(r2)
 1104164:	e17ffd17 	ldw	r5,-12(fp)
 1104168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110416c:	0005313a 	rdctl	r2,ipending
 1104170:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1104174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1104178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 110417c:	e0bfff17 	ldw	r2,-4(fp)
 1104180:	1004c03a 	cmpne	r2,r2,zero
 1104184:	103fe21e 	bne	r2,zero,1104110 <alt_irq_handler+0x24>
 1104188:	00000706 	br	11041a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 110418c:	e0bffe17 	ldw	r2,-8(fp)
 1104190:	1085883a 	add	r2,r2,r2
 1104194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1104198:	e0bffd17 	ldw	r2,-12(fp)
 110419c:	10800044 	addi	r2,r2,1
 11041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 11041a4:	003fdd06 	br	110411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 11041a8:	08044cc0 	call	8044cc <OSIntExit>
}
 11041ac:	e037883a 	mov	sp,fp
 11041b0:	dfc00117 	ldw	ra,4(sp)
 11041b4:	df000017 	ldw	fp,0(sp)
 11041b8:	dec00204 	addi	sp,sp,8
 11041bc:	f800283a 	ret

Disassembly of section .text:

008001a0 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001a0:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001a4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001a8:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001ac:	d6a28b14 	ori	gp,gp,35372
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001b0:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001b4:	10898214 	ori	r2,r2,9736

    movhi r3, %hi(__bss_end)
  8001b8:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001bc:	18dedd14 	ori	r3,r3,31604

    beq r2, r3, 1f
  8001c0:	10c00326 	beq	r2,r3,8001d0 <_start+0x30>

0:
    stw zero, (r2)
  8001c4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001c8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001cc:	10fffd36 	bltu	r2,r3,8001c4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001d0:	08030b00 	call	8030b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001d4:	08032f00 	call	8032f0 <alt_main>

008001d8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001d8:	003fff06 	br	8001d8 <alt_after_alt_main>

008001dc <task1>:

/* Definition of global variables */
alt_up_character_lcd_dev *char_lcd;

void task1(void* pdata)
{
  8001dc:	defffb04 	addi	sp,sp,-20
  8001e0:	dfc00415 	stw	ra,16(sp)
  8001e4:	df000315 	stw	fp,12(sp)
  8001e8:	df000304 	addi	fp,sp,12
  8001ec:	e13ffe15 	stw	r4,-8(fp)
	int count = 0;
  8001f0:	e03ffd15 	stw	zero,-12(fp)

	while (1)
	{
		alt_up_character_lcd_set_cursor_pos(char_lcd, 0, 0);
  8001f4:	d126f717 	ldw	r4,-25636(gp)
  8001f8:	000b883a 	mov	r5,zero
  8001fc:	000d883a 	mov	r6,zero
  800200:	080cf600 	call	80cf60 <alt_up_character_lcd_set_cursor_pos>
		alt_up_character_lcd_string(char_lcd, "                ");
  800204:	d126f717 	ldw	r4,-25636(gp)
  800208:	01402074 	movhi	r5,129
  80020c:	297b7c04 	addi	r5,r5,-4624
  800210:	080ce9c0 	call	80ce9c <alt_up_character_lcd_string>
		alt_up_character_lcd_set_cursor_pos(char_lcd, count, 0);
  800214:	d126f717 	ldw	r4,-25636(gp)
  800218:	e17ffd17 	ldw	r5,-12(fp)
  80021c:	000d883a 	mov	r6,zero
  800220:	080cf600 	call	80cf60 <alt_up_character_lcd_set_cursor_pos>
		alt_up_character_lcd_string(char_lcd, "$");
  800224:	d126f717 	ldw	r4,-25636(gp)
  800228:	01402074 	movhi	r5,129
  80022c:	297b8104 	addi	r5,r5,-4604
  800230:	080ce9c0 	call	80ce9c <alt_up_character_lcd_string>

		count = (count + 1) % 16;
  800234:	e0bffd17 	ldw	r2,-12(fp)
  800238:	10c00044 	addi	r3,r2,1
  80023c:	00a00034 	movhi	r2,32768
  800240:	108003c4 	addi	r2,r2,15
  800244:	1886703a 	and	r3,r3,r2
  800248:	e0ffff15 	stw	r3,-4(fp)
  80024c:	e0ffff17 	ldw	r3,-4(fp)
  800250:	1804403a 	cmpge	r2,r3,zero
  800254:	10000a1e 	bne	r2,zero,800280 <task1+0xa4>
  800258:	e0bfff17 	ldw	r2,-4(fp)
  80025c:	10bfffc4 	addi	r2,r2,-1
  800260:	e0bfff15 	stw	r2,-4(fp)
  800264:	00bffc04 	movi	r2,-16
  800268:	e0ffff17 	ldw	r3,-4(fp)
  80026c:	1886b03a 	or	r3,r3,r2
  800270:	e0ffff15 	stw	r3,-4(fp)
  800274:	e0bfff17 	ldw	r2,-4(fp)
  800278:	10800044 	addi	r2,r2,1
  80027c:	e0bfff15 	stw	r2,-4(fp)
  800280:	e0ffff17 	ldw	r3,-4(fp)
  800284:	e0fffd15 	stw	r3,-12(fp)

		IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, IORD_ALTERA_AVALON_PIO_DATA(ON_BOARD_SWITCHES_BASE));
  800288:	00804474 	movhi	r2,273
  80028c:	10a80804 	addi	r2,r2,-24544
  800290:	10c00037 	ldwio	r3,0(r2)
  800294:	00804474 	movhi	r2,273
  800298:	10a80c04 	addi	r2,r2,-24528
  80029c:	10c00035 	stwio	r3,0(r2)

		OSTimeDlyHMSM(0, 0, 0, 100);
  8002a0:	0009883a 	mov	r4,zero
  8002a4:	000b883a 	mov	r5,zero
  8002a8:	000d883a 	mov	r6,zero
  8002ac:	01c01904 	movi	r7,100
  8002b0:	080b9580 	call	80b958 <OSTimeDlyHMSM>
	}
  8002b4:	003fcf06 	br	8001f4 <task1+0x18>

008002b8 <main>:
}

/* The main function creates two task and starts multi-tasking */
int main(void)
{
  8002b8:	defff904 	addi	sp,sp,-28
  8002bc:	dfc00615 	stw	ra,24(sp)
  8002c0:	df000515 	stw	fp,20(sp)
  8002c4:	df000504 	addi	fp,sp,20
	printf("Hello world.\n");
  8002c8:	01002074 	movhi	r4,129
  8002cc:	213b8204 	addi	r4,r4,-4600
  8002d0:	08003ec0 	call	8003ec <puts>

	OSInit();
  8002d4:	08043fc0 	call	8043fc <OSInit>
	char_lcd = alt_up_character_lcd_open_dev(CHARACTER_LCD_0_NAME);
  8002d8:	01002074 	movhi	r4,129
  8002dc:	213b8604 	addi	r4,r4,-4584
  8002e0:	080cde40 	call	80cde4 <alt_up_character_lcd_open_dev>
  8002e4:	d0a6f715 	stw	r2,-25636(gp)
	alt_up_character_lcd_init(char_lcd);
  8002e8:	d126f717 	ldw	r4,-25636(gp)
  8002ec:	080cdb00 	call	80cdb0 <alt_up_character_lcd_init>

	OSTaskCreateExt(task1,
  8002f0:	01802074 	movhi	r6,129
  8002f4:	3191af04 	addi	r6,r6,18108
  8002f8:	00800044 	movi	r2,1
  8002fc:	d8800015 	stw	r2,0(sp)
  800300:	00802074 	movhi	r2,129
  800304:	1089b004 	addi	r2,r2,9920
  800308:	d8800115 	stw	r2,4(sp)
  80030c:	00820004 	movi	r2,2048
  800310:	d8800215 	stw	r2,8(sp)
  800314:	d8000315 	stw	zero,12(sp)
  800318:	d8000415 	stw	zero,16(sp)
  80031c:	01002034 	movhi	r4,128
  800320:	21007704 	addi	r4,r4,476
  800324:	000b883a 	mov	r5,zero
  800328:	01c00044 	movi	r7,1
  80032c:	080a5140 	call	80a514 <OSTaskCreateExt>
                	task1_stk,
                	TASK_STACKSIZE,
                	NULL,
                	0);

	OSStart();
  800330:	080473c0 	call	80473c <OSStart>
	return 0;
  800334:	0005883a 	mov	r2,zero
}
  800338:	e037883a 	mov	sp,fp
  80033c:	dfc00117 	ldw	ra,4(sp)
  800340:	df000017 	ldw	fp,0(sp)
  800344:	dec00204 	addi	sp,sp,8
  800348:	f800283a 	ret

0080034c <_puts_r>:
  80034c:	defff604 	addi	sp,sp,-40
  800350:	dc400715 	stw	r17,28(sp)
  800354:	2023883a 	mov	r17,r4
  800358:	2809883a 	mov	r4,r5
  80035c:	dfc00915 	stw	ra,36(sp)
  800360:	dcc00815 	stw	r19,32(sp)
  800364:	2827883a 	mov	r19,r5
  800368:	08004000 	call	800400 <strlen>
  80036c:	89400217 	ldw	r5,8(r17)
  800370:	00c02074 	movhi	r3,129
  800374:	18fb8c04 	addi	r3,r3,-4560
  800378:	01c00044 	movi	r7,1
  80037c:	12000044 	addi	r8,r2,1
  800380:	d8c00515 	stw	r3,20(sp)
  800384:	d9c00615 	stw	r7,24(sp)
  800388:	d8c00304 	addi	r3,sp,12
  80038c:	01c00084 	movi	r7,2
  800390:	8809883a 	mov	r4,r17
  800394:	d80d883a 	mov	r6,sp
  800398:	d8c00015 	stw	r3,0(sp)
  80039c:	dcc00315 	stw	r19,12(sp)
  8003a0:	da000215 	stw	r8,8(sp)
  8003a4:	d9c00115 	stw	r7,4(sp)
  8003a8:	d8800415 	stw	r2,16(sp)
  8003ac:	08004740 	call	800474 <__sfvwrite_r>
  8003b0:	00ffffc4 	movi	r3,-1
  8003b4:	10000626 	beq	r2,zero,8003d0 <_puts_r+0x84>
  8003b8:	1805883a 	mov	r2,r3
  8003bc:	dfc00917 	ldw	ra,36(sp)
  8003c0:	dcc00817 	ldw	r19,32(sp)
  8003c4:	dc400717 	ldw	r17,28(sp)
  8003c8:	dec00a04 	addi	sp,sp,40
  8003cc:	f800283a 	ret
  8003d0:	00c00284 	movi	r3,10
  8003d4:	1805883a 	mov	r2,r3
  8003d8:	dfc00917 	ldw	ra,36(sp)
  8003dc:	dcc00817 	ldw	r19,32(sp)
  8003e0:	dc400717 	ldw	r17,28(sp)
  8003e4:	dec00a04 	addi	sp,sp,40
  8003e8:	f800283a 	ret

008003ec <puts>:
  8003ec:	00802074 	movhi	r2,129
  8003f0:	10828b04 	addi	r2,r2,2604
  8003f4:	200b883a 	mov	r5,r4
  8003f8:	11000017 	ldw	r4,0(r2)
  8003fc:	080034c1 	jmpi	80034c <_puts_r>

00800400 <strlen>:
  800400:	208000cc 	andi	r2,r4,3
  800404:	2011883a 	mov	r8,r4
  800408:	1000161e 	bne	r2,zero,800464 <strlen+0x64>
  80040c:	20c00017 	ldw	r3,0(r4)
  800410:	017fbff4 	movhi	r5,65279
  800414:	297fbfc4 	addi	r5,r5,-257
  800418:	01e02074 	movhi	r7,32897
  80041c:	39e02004 	addi	r7,r7,-32640
  800420:	1945883a 	add	r2,r3,r5
  800424:	11c4703a 	and	r2,r2,r7
  800428:	00c6303a 	nor	r3,zero,r3
  80042c:	1886703a 	and	r3,r3,r2
  800430:	18000c1e 	bne	r3,zero,800464 <strlen+0x64>
  800434:	280d883a 	mov	r6,r5
  800438:	380b883a 	mov	r5,r7
  80043c:	21000104 	addi	r4,r4,4
  800440:	20800017 	ldw	r2,0(r4)
  800444:	1187883a 	add	r3,r2,r6
  800448:	1946703a 	and	r3,r3,r5
  80044c:	0084303a 	nor	r2,zero,r2
  800450:	10c4703a 	and	r2,r2,r3
  800454:	103ff926 	beq	r2,zero,80043c <strlen+0x3c>
  800458:	20800007 	ldb	r2,0(r4)
  80045c:	10000326 	beq	r2,zero,80046c <strlen+0x6c>
  800460:	21000044 	addi	r4,r4,1
  800464:	20800007 	ldb	r2,0(r4)
  800468:	103ffd1e 	bne	r2,zero,800460 <strlen+0x60>
  80046c:	2205c83a 	sub	r2,r4,r8
  800470:	f800283a 	ret

00800474 <__sfvwrite_r>:
  800474:	30800217 	ldw	r2,8(r6)
  800478:	defff504 	addi	sp,sp,-44
  80047c:	df000915 	stw	fp,36(sp)
  800480:	dd800715 	stw	r22,28(sp)
  800484:	dc800315 	stw	r18,12(sp)
  800488:	dfc00a15 	stw	ra,40(sp)
  80048c:	ddc00815 	stw	r23,32(sp)
  800490:	dd400615 	stw	r21,24(sp)
  800494:	dd000515 	stw	r20,20(sp)
  800498:	dcc00415 	stw	r19,16(sp)
  80049c:	dc400215 	stw	r17,8(sp)
  8004a0:	dc000115 	stw	r16,4(sp)
  8004a4:	302d883a 	mov	r22,r6
  8004a8:	2039883a 	mov	fp,r4
  8004ac:	2825883a 	mov	r18,r5
  8004b0:	10001c26 	beq	r2,zero,800524 <__sfvwrite_r+0xb0>
  8004b4:	29c0030b 	ldhu	r7,12(r5)
  8004b8:	3880020c 	andi	r2,r7,8
  8004bc:	10002726 	beq	r2,zero,80055c <__sfvwrite_r+0xe8>
  8004c0:	28800417 	ldw	r2,16(r5)
  8004c4:	10002526 	beq	r2,zero,80055c <__sfvwrite_r+0xe8>
  8004c8:	3880008c 	andi	r2,r7,2
  8004cc:	b5400017 	ldw	r21,0(r22)
  8004d0:	10002826 	beq	r2,zero,800574 <__sfvwrite_r+0x100>
  8004d4:	0021883a 	mov	r16,zero
  8004d8:	0023883a 	mov	r17,zero
  8004dc:	880d883a 	mov	r6,r17
  8004e0:	e009883a 	mov	r4,fp
  8004e4:	00810004 	movi	r2,1024
  8004e8:	80006e26 	beq	r16,zero,8006a4 <__sfvwrite_r+0x230>
  8004ec:	800f883a 	mov	r7,r16
  8004f0:	91400717 	ldw	r5,28(r18)
  8004f4:	1400012e 	bgeu	r2,r16,8004fc <__sfvwrite_r+0x88>
  8004f8:	100f883a 	mov	r7,r2
  8004fc:	90c00917 	ldw	r3,36(r18)
  800500:	183ee83a 	callr	r3
  800504:	1007883a 	mov	r3,r2
  800508:	80a1c83a 	sub	r16,r16,r2
  80050c:	88a3883a 	add	r17,r17,r2
  800510:	00806d0e 	bge	zero,r2,8006c8 <__sfvwrite_r+0x254>
  800514:	b0800217 	ldw	r2,8(r22)
  800518:	10c5c83a 	sub	r2,r2,r3
  80051c:	b0800215 	stw	r2,8(r22)
  800520:	103fee1e 	bne	r2,zero,8004dc <__sfvwrite_r+0x68>
  800524:	0009883a 	mov	r4,zero
  800528:	2005883a 	mov	r2,r4
  80052c:	dfc00a17 	ldw	ra,40(sp)
  800530:	df000917 	ldw	fp,36(sp)
  800534:	ddc00817 	ldw	r23,32(sp)
  800538:	dd800717 	ldw	r22,28(sp)
  80053c:	dd400617 	ldw	r21,24(sp)
  800540:	dd000517 	ldw	r20,20(sp)
  800544:	dcc00417 	ldw	r19,16(sp)
  800548:	dc800317 	ldw	r18,12(sp)
  80054c:	dc400217 	ldw	r17,8(sp)
  800550:	dc000117 	ldw	r16,4(sp)
  800554:	dec00b04 	addi	sp,sp,44
  800558:	f800283a 	ret
  80055c:	08019180 	call	801918 <__swsetup_r>
  800560:	1000e41e 	bne	r2,zero,8008f4 <__sfvwrite_r+0x480>
  800564:	91c0030b 	ldhu	r7,12(r18)
  800568:	b5400017 	ldw	r21,0(r22)
  80056c:	3880008c 	andi	r2,r7,2
  800570:	103fd81e 	bne	r2,zero,8004d4 <__sfvwrite_r+0x60>
  800574:	3880004c 	andi	r2,r7,1
  800578:	1005003a 	cmpeq	r2,r2,zero
  80057c:	10005726 	beq	r2,zero,8006dc <__sfvwrite_r+0x268>
  800580:	0029883a 	mov	r20,zero
  800584:	002f883a 	mov	r23,zero
  800588:	a0004226 	beq	r20,zero,800694 <__sfvwrite_r+0x220>
  80058c:	3880800c 	andi	r2,r7,512
  800590:	94000217 	ldw	r16,8(r18)
  800594:	10008b26 	beq	r2,zero,8007c4 <__sfvwrite_r+0x350>
  800598:	800d883a 	mov	r6,r16
  80059c:	a400a536 	bltu	r20,r16,800834 <__sfvwrite_r+0x3c0>
  8005a0:	3881200c 	andi	r2,r7,1152
  8005a4:	10002726 	beq	r2,zero,800644 <__sfvwrite_r+0x1d0>
  8005a8:	90800517 	ldw	r2,20(r18)
  8005ac:	92000417 	ldw	r8,16(r18)
  8005b0:	91400017 	ldw	r5,0(r18)
  8005b4:	1087883a 	add	r3,r2,r2
  8005b8:	1887883a 	add	r3,r3,r2
  8005bc:	1808d7fa 	srli	r4,r3,31
  8005c0:	2a21c83a 	sub	r16,r5,r8
  8005c4:	80800044 	addi	r2,r16,1
  8005c8:	20c9883a 	add	r4,r4,r3
  8005cc:	2027d07a 	srai	r19,r4,1
  8005d0:	a085883a 	add	r2,r20,r2
  8005d4:	980d883a 	mov	r6,r19
  8005d8:	9880022e 	bgeu	r19,r2,8005e4 <__sfvwrite_r+0x170>
  8005dc:	1027883a 	mov	r19,r2
  8005e0:	100d883a 	mov	r6,r2
  8005e4:	3881000c 	andi	r2,r7,1024
  8005e8:	1000b826 	beq	r2,zero,8008cc <__sfvwrite_r+0x458>
  8005ec:	300b883a 	mov	r5,r6
  8005f0:	e009883a 	mov	r4,fp
  8005f4:	08009100 	call	800910 <_malloc_r>
  8005f8:	10003126 	beq	r2,zero,8006c0 <__sfvwrite_r+0x24c>
  8005fc:	91400417 	ldw	r5,16(r18)
  800600:	1009883a 	mov	r4,r2
  800604:	800d883a 	mov	r6,r16
  800608:	1023883a 	mov	r17,r2
  80060c:	08011340 	call	801134 <memcpy>
  800610:	90c0030b 	ldhu	r3,12(r18)
  800614:	00beffc4 	movi	r2,-1025
  800618:	1886703a 	and	r3,r3,r2
  80061c:	18c02014 	ori	r3,r3,128
  800620:	90c0030d 	sth	r3,12(r18)
  800624:	9c07c83a 	sub	r3,r19,r16
  800628:	8c05883a 	add	r2,r17,r16
  80062c:	a00d883a 	mov	r6,r20
  800630:	a021883a 	mov	r16,r20
  800634:	90800015 	stw	r2,0(r18)
  800638:	90c00215 	stw	r3,8(r18)
  80063c:	94400415 	stw	r17,16(r18)
  800640:	94c00515 	stw	r19,20(r18)
  800644:	91000017 	ldw	r4,0(r18)
  800648:	b80b883a 	mov	r5,r23
  80064c:	a023883a 	mov	r17,r20
  800650:	08011d40 	call	8011d4 <memmove>
  800654:	90c00217 	ldw	r3,8(r18)
  800658:	90800017 	ldw	r2,0(r18)
  80065c:	a027883a 	mov	r19,r20
  800660:	1c07c83a 	sub	r3,r3,r16
  800664:	1405883a 	add	r2,r2,r16
  800668:	90c00215 	stw	r3,8(r18)
  80066c:	a021883a 	mov	r16,r20
  800670:	90800015 	stw	r2,0(r18)
  800674:	b0800217 	ldw	r2,8(r22)
  800678:	1405c83a 	sub	r2,r2,r16
  80067c:	b0800215 	stw	r2,8(r22)
  800680:	103fa826 	beq	r2,zero,800524 <__sfvwrite_r+0xb0>
  800684:	a469c83a 	sub	r20,r20,r17
  800688:	91c0030b 	ldhu	r7,12(r18)
  80068c:	bcef883a 	add	r23,r23,r19
  800690:	a03fbe1e 	bne	r20,zero,80058c <__sfvwrite_r+0x118>
  800694:	adc00017 	ldw	r23,0(r21)
  800698:	ad000117 	ldw	r20,4(r21)
  80069c:	ad400204 	addi	r21,r21,8
  8006a0:	003fb906 	br	800588 <__sfvwrite_r+0x114>
  8006a4:	ac400017 	ldw	r17,0(r21)
  8006a8:	ac000117 	ldw	r16,4(r21)
  8006ac:	ad400204 	addi	r21,r21,8
  8006b0:	003f8a06 	br	8004dc <__sfvwrite_r+0x68>
  8006b4:	91400417 	ldw	r5,16(r18)
  8006b8:	e009883a 	mov	r4,fp
  8006bc:	08020a40 	call	8020a4 <_free_r>
  8006c0:	00800304 	movi	r2,12
  8006c4:	e0800015 	stw	r2,0(fp)
  8006c8:	9080030b 	ldhu	r2,12(r18)
  8006cc:	013fffc4 	movi	r4,-1
  8006d0:	10801014 	ori	r2,r2,64
  8006d4:	9080030d 	sth	r2,12(r18)
  8006d8:	003f9306 	br	800528 <__sfvwrite_r+0xb4>
  8006dc:	0027883a 	mov	r19,zero
  8006e0:	002f883a 	mov	r23,zero
  8006e4:	d8000015 	stw	zero,0(sp)
  8006e8:	0029883a 	mov	r20,zero
  8006ec:	98001e26 	beq	r19,zero,800768 <__sfvwrite_r+0x2f4>
  8006f0:	d8c00017 	ldw	r3,0(sp)
  8006f4:	1804c03a 	cmpne	r2,r3,zero
  8006f8:	10005e26 	beq	r2,zero,800874 <__sfvwrite_r+0x400>
  8006fc:	9821883a 	mov	r16,r19
  800700:	a4c0012e 	bgeu	r20,r19,800708 <__sfvwrite_r+0x294>
  800704:	a021883a 	mov	r16,r20
  800708:	91000017 	ldw	r4,0(r18)
  80070c:	90800417 	ldw	r2,16(r18)
  800710:	91800217 	ldw	r6,8(r18)
  800714:	91c00517 	ldw	r7,20(r18)
  800718:	1100022e 	bgeu	r2,r4,800724 <__sfvwrite_r+0x2b0>
  80071c:	31e3883a 	add	r17,r6,r7
  800720:	8c001616 	blt	r17,r16,80077c <__sfvwrite_r+0x308>
  800724:	81c03816 	blt	r16,r7,800808 <__sfvwrite_r+0x394>
  800728:	90c00917 	ldw	r3,36(r18)
  80072c:	91400717 	ldw	r5,28(r18)
  800730:	e009883a 	mov	r4,fp
  800734:	b80d883a 	mov	r6,r23
  800738:	183ee83a 	callr	r3
  80073c:	1023883a 	mov	r17,r2
  800740:	00bfe10e 	bge	zero,r2,8006c8 <__sfvwrite_r+0x254>
  800744:	a469c83a 	sub	r20,r20,r17
  800748:	a0001826 	beq	r20,zero,8007ac <__sfvwrite_r+0x338>
  80074c:	b0800217 	ldw	r2,8(r22)
  800750:	1445c83a 	sub	r2,r2,r17
  800754:	b0800215 	stw	r2,8(r22)
  800758:	103f7226 	beq	r2,zero,800524 <__sfvwrite_r+0xb0>
  80075c:	9c67c83a 	sub	r19,r19,r17
  800760:	bc6f883a 	add	r23,r23,r17
  800764:	983fe21e 	bne	r19,zero,8006f0 <__sfvwrite_r+0x27c>
  800768:	adc00017 	ldw	r23,0(r21)
  80076c:	acc00117 	ldw	r19,4(r21)
  800770:	ad400204 	addi	r21,r21,8
  800774:	d8000015 	stw	zero,0(sp)
  800778:	003fdc06 	br	8006ec <__sfvwrite_r+0x278>
  80077c:	b80b883a 	mov	r5,r23
  800780:	880d883a 	mov	r6,r17
  800784:	08011d40 	call	8011d4 <memmove>
  800788:	90c00017 	ldw	r3,0(r18)
  80078c:	e009883a 	mov	r4,fp
  800790:	900b883a 	mov	r5,r18
  800794:	1c47883a 	add	r3,r3,r17
  800798:	90c00015 	stw	r3,0(r18)
  80079c:	0801a540 	call	801a54 <_fflush_r>
  8007a0:	103fc91e 	bne	r2,zero,8006c8 <__sfvwrite_r+0x254>
  8007a4:	a469c83a 	sub	r20,r20,r17
  8007a8:	a03fe81e 	bne	r20,zero,80074c <__sfvwrite_r+0x2d8>
  8007ac:	e009883a 	mov	r4,fp
  8007b0:	900b883a 	mov	r5,r18
  8007b4:	0801a540 	call	801a54 <_fflush_r>
  8007b8:	103fc31e 	bne	r2,zero,8006c8 <__sfvwrite_r+0x254>
  8007bc:	d8000015 	stw	zero,0(sp)
  8007c0:	003fe206 	br	80074c <__sfvwrite_r+0x2d8>
  8007c4:	91000017 	ldw	r4,0(r18)
  8007c8:	90800417 	ldw	r2,16(r18)
  8007cc:	1100022e 	bgeu	r2,r4,8007d8 <__sfvwrite_r+0x364>
  8007d0:	8023883a 	mov	r17,r16
  8007d4:	85003136 	bltu	r16,r20,80089c <__sfvwrite_r+0x428>
  8007d8:	91c00517 	ldw	r7,20(r18)
  8007dc:	a1c01836 	bltu	r20,r7,800840 <__sfvwrite_r+0x3cc>
  8007e0:	90c00917 	ldw	r3,36(r18)
  8007e4:	91400717 	ldw	r5,28(r18)
  8007e8:	e009883a 	mov	r4,fp
  8007ec:	b80d883a 	mov	r6,r23
  8007f0:	183ee83a 	callr	r3
  8007f4:	1021883a 	mov	r16,r2
  8007f8:	00bfb30e 	bge	zero,r2,8006c8 <__sfvwrite_r+0x254>
  8007fc:	1023883a 	mov	r17,r2
  800800:	1027883a 	mov	r19,r2
  800804:	003f9b06 	br	800674 <__sfvwrite_r+0x200>
  800808:	b80b883a 	mov	r5,r23
  80080c:	800d883a 	mov	r6,r16
  800810:	08011d40 	call	8011d4 <memmove>
  800814:	90c00217 	ldw	r3,8(r18)
  800818:	90800017 	ldw	r2,0(r18)
  80081c:	8023883a 	mov	r17,r16
  800820:	1c07c83a 	sub	r3,r3,r16
  800824:	1405883a 	add	r2,r2,r16
  800828:	90c00215 	stw	r3,8(r18)
  80082c:	90800015 	stw	r2,0(r18)
  800830:	003fc406 	br	800744 <__sfvwrite_r+0x2d0>
  800834:	a00d883a 	mov	r6,r20
  800838:	a021883a 	mov	r16,r20
  80083c:	003f8106 	br	800644 <__sfvwrite_r+0x1d0>
  800840:	b80b883a 	mov	r5,r23
  800844:	a00d883a 	mov	r6,r20
  800848:	08011d40 	call	8011d4 <memmove>
  80084c:	90c00217 	ldw	r3,8(r18)
  800850:	90800017 	ldw	r2,0(r18)
  800854:	a021883a 	mov	r16,r20
  800858:	1d07c83a 	sub	r3,r3,r20
  80085c:	1505883a 	add	r2,r2,r20
  800860:	a023883a 	mov	r17,r20
  800864:	a027883a 	mov	r19,r20
  800868:	90c00215 	stw	r3,8(r18)
  80086c:	90800015 	stw	r2,0(r18)
  800870:	003f8006 	br	800674 <__sfvwrite_r+0x200>
  800874:	b809883a 	mov	r4,r23
  800878:	01400284 	movi	r5,10
  80087c:	980d883a 	mov	r6,r19
  800880:	08010500 	call	801050 <memchr>
  800884:	10001726 	beq	r2,zero,8008e4 <__sfvwrite_r+0x470>
  800888:	15c5c83a 	sub	r2,r2,r23
  80088c:	15000044 	addi	r20,r2,1
  800890:	00800044 	movi	r2,1
  800894:	d8800015 	stw	r2,0(sp)
  800898:	003f9806 	br	8006fc <__sfvwrite_r+0x288>
  80089c:	b80b883a 	mov	r5,r23
  8008a0:	800d883a 	mov	r6,r16
  8008a4:	08011d40 	call	8011d4 <memmove>
  8008a8:	90c00017 	ldw	r3,0(r18)
  8008ac:	e009883a 	mov	r4,fp
  8008b0:	900b883a 	mov	r5,r18
  8008b4:	1c07883a 	add	r3,r3,r16
  8008b8:	90c00015 	stw	r3,0(r18)
  8008bc:	8027883a 	mov	r19,r16
  8008c0:	0801a540 	call	801a54 <_fflush_r>
  8008c4:	103f6b26 	beq	r2,zero,800674 <__sfvwrite_r+0x200>
  8008c8:	003f7f06 	br	8006c8 <__sfvwrite_r+0x254>
  8008cc:	400b883a 	mov	r5,r8
  8008d0:	e009883a 	mov	r4,fp
  8008d4:	08012b40 	call	8012b4 <_realloc_r>
  8008d8:	103f7626 	beq	r2,zero,8006b4 <__sfvwrite_r+0x240>
  8008dc:	1023883a 	mov	r17,r2
  8008e0:	003f5006 	br	800624 <__sfvwrite_r+0x1b0>
  8008e4:	00c00044 	movi	r3,1
  8008e8:	9d000044 	addi	r20,r19,1
  8008ec:	d8c00015 	stw	r3,0(sp)
  8008f0:	003f8206 	br	8006fc <__sfvwrite_r+0x288>
  8008f4:	9080030b 	ldhu	r2,12(r18)
  8008f8:	00c00244 	movi	r3,9
  8008fc:	013fffc4 	movi	r4,-1
  800900:	10801014 	ori	r2,r2,64
  800904:	9080030d 	sth	r2,12(r18)
  800908:	e0c00015 	stw	r3,0(fp)
  80090c:	003f0606 	br	800528 <__sfvwrite_r+0xb4>

00800910 <_malloc_r>:
  800910:	defff604 	addi	sp,sp,-40
  800914:	28c002c4 	addi	r3,r5,11
  800918:	00800584 	movi	r2,22
  80091c:	dc800215 	stw	r18,8(sp)
  800920:	dfc00915 	stw	ra,36(sp)
  800924:	df000815 	stw	fp,32(sp)
  800928:	ddc00715 	stw	r23,28(sp)
  80092c:	dd800615 	stw	r22,24(sp)
  800930:	dd400515 	stw	r21,20(sp)
  800934:	dd000415 	stw	r20,16(sp)
  800938:	dcc00315 	stw	r19,12(sp)
  80093c:	dc400115 	stw	r17,4(sp)
  800940:	dc000015 	stw	r16,0(sp)
  800944:	2025883a 	mov	r18,r4
  800948:	10c01236 	bltu	r2,r3,800994 <_malloc_r+0x84>
  80094c:	04400404 	movi	r17,16
  800950:	8940142e 	bgeu	r17,r5,8009a4 <_malloc_r+0x94>
  800954:	00800304 	movi	r2,12
  800958:	0007883a 	mov	r3,zero
  80095c:	90800015 	stw	r2,0(r18)
  800960:	1805883a 	mov	r2,r3
  800964:	dfc00917 	ldw	ra,36(sp)
  800968:	df000817 	ldw	fp,32(sp)
  80096c:	ddc00717 	ldw	r23,28(sp)
  800970:	dd800617 	ldw	r22,24(sp)
  800974:	dd400517 	ldw	r21,20(sp)
  800978:	dd000417 	ldw	r20,16(sp)
  80097c:	dcc00317 	ldw	r19,12(sp)
  800980:	dc800217 	ldw	r18,8(sp)
  800984:	dc400117 	ldw	r17,4(sp)
  800988:	dc000017 	ldw	r16,0(sp)
  80098c:	dec00a04 	addi	sp,sp,40
  800990:	f800283a 	ret
  800994:	00bffe04 	movi	r2,-8
  800998:	18a2703a 	and	r17,r3,r2
  80099c:	883fed16 	blt	r17,zero,800954 <_malloc_r+0x44>
  8009a0:	897fec36 	bltu	r17,r5,800954 <_malloc_r+0x44>
  8009a4:	9009883a 	mov	r4,r18
  8009a8:	08038fc0 	call	8038fc <__malloc_lock>
  8009ac:	00807dc4 	movi	r2,503
  8009b0:	14402b2e 	bgeu	r2,r17,800a60 <_malloc_r+0x150>
  8009b4:	8806d27a 	srli	r3,r17,9
  8009b8:	18003f1e 	bne	r3,zero,800ab8 <_malloc_r+0x1a8>
  8009bc:	880cd0fa 	srli	r6,r17,3
  8009c0:	300490fa 	slli	r2,r6,3
  8009c4:	02c02074 	movhi	r11,129
  8009c8:	5afcee04 	addi	r11,r11,-3144
  8009cc:	12cb883a 	add	r5,r2,r11
  8009d0:	2c000317 	ldw	r16,12(r5)
  8009d4:	580f883a 	mov	r7,r11
  8009d8:	2c00041e 	bne	r5,r16,8009ec <_malloc_r+0xdc>
  8009dc:	00000a06 	br	800a08 <_malloc_r+0xf8>
  8009e0:	1800860e 	bge	r3,zero,800bfc <_malloc_r+0x2ec>
  8009e4:	84000317 	ldw	r16,12(r16)
  8009e8:	2c000726 	beq	r5,r16,800a08 <_malloc_r+0xf8>
  8009ec:	80800117 	ldw	r2,4(r16)
  8009f0:	00ffff04 	movi	r3,-4
  8009f4:	10c8703a 	and	r4,r2,r3
  8009f8:	2447c83a 	sub	r3,r4,r17
  8009fc:	008003c4 	movi	r2,15
  800a00:	10fff70e 	bge	r2,r3,8009e0 <_malloc_r+0xd0>
  800a04:	31bfffc4 	addi	r6,r6,-1
  800a08:	32400044 	addi	r9,r6,1
  800a0c:	02802074 	movhi	r10,129
  800a10:	52bcf004 	addi	r10,r10,-3136
  800a14:	54000217 	ldw	r16,8(r10)
  800a18:	8280a026 	beq	r16,r10,800c9c <_malloc_r+0x38c>
  800a1c:	80800117 	ldw	r2,4(r16)
  800a20:	00ffff04 	movi	r3,-4
  800a24:	10ca703a 	and	r5,r2,r3
  800a28:	2c4dc83a 	sub	r6,r5,r17
  800a2c:	008003c4 	movi	r2,15
  800a30:	11808316 	blt	r2,r6,800c40 <_malloc_r+0x330>
  800a34:	52800315 	stw	r10,12(r10)
  800a38:	52800215 	stw	r10,8(r10)
  800a3c:	30002916 	blt	r6,zero,800ae4 <_malloc_r+0x1d4>
  800a40:	8147883a 	add	r3,r16,r5
  800a44:	18800117 	ldw	r2,4(r3)
  800a48:	9009883a 	mov	r4,r18
  800a4c:	10800054 	ori	r2,r2,1
  800a50:	18800115 	stw	r2,4(r3)
  800a54:	0803a040 	call	803a04 <__malloc_unlock>
  800a58:	80c00204 	addi	r3,r16,8
  800a5c:	003fc006 	br	800960 <_malloc_r+0x50>
  800a60:	02c02074 	movhi	r11,129
  800a64:	5afcee04 	addi	r11,r11,-3144
  800a68:	8ac5883a 	add	r2,r17,r11
  800a6c:	14000317 	ldw	r16,12(r2)
  800a70:	580f883a 	mov	r7,r11
  800a74:	8806d0fa 	srli	r3,r17,3
  800a78:	14006c26 	beq	r2,r16,800c2c <_malloc_r+0x31c>
  800a7c:	80c00117 	ldw	r3,4(r16)
  800a80:	00bfff04 	movi	r2,-4
  800a84:	81800317 	ldw	r6,12(r16)
  800a88:	1886703a 	and	r3,r3,r2
  800a8c:	80c7883a 	add	r3,r16,r3
  800a90:	18800117 	ldw	r2,4(r3)
  800a94:	81400217 	ldw	r5,8(r16)
  800a98:	9009883a 	mov	r4,r18
  800a9c:	10800054 	ori	r2,r2,1
  800aa0:	18800115 	stw	r2,4(r3)
  800aa4:	31400215 	stw	r5,8(r6)
  800aa8:	29800315 	stw	r6,12(r5)
  800aac:	0803a040 	call	803a04 <__malloc_unlock>
  800ab0:	80c00204 	addi	r3,r16,8
  800ab4:	003faa06 	br	800960 <_malloc_r+0x50>
  800ab8:	00800104 	movi	r2,4
  800abc:	10c0052e 	bgeu	r2,r3,800ad4 <_malloc_r+0x1c4>
  800ac0:	00800504 	movi	r2,20
  800ac4:	10c07836 	bltu	r2,r3,800ca8 <_malloc_r+0x398>
  800ac8:	198016c4 	addi	r6,r3,91
  800acc:	300490fa 	slli	r2,r6,3
  800ad0:	003fbc06 	br	8009c4 <_malloc_r+0xb4>
  800ad4:	8804d1ba 	srli	r2,r17,6
  800ad8:	11800e04 	addi	r6,r2,56
  800adc:	300490fa 	slli	r2,r6,3
  800ae0:	003fb806 	br	8009c4 <_malloc_r+0xb4>
  800ae4:	00807fc4 	movi	r2,511
  800ae8:	1140bb36 	bltu	r2,r5,800dd8 <_malloc_r+0x4c8>
  800aec:	2806d0fa 	srli	r3,r5,3
  800af0:	573ffe04 	addi	fp,r10,-8
  800af4:	00800044 	movi	r2,1
  800af8:	180890fa 	slli	r4,r3,3
  800afc:	1807d0ba 	srai	r3,r3,2
  800b00:	e1c00117 	ldw	r7,4(fp)
  800b04:	5909883a 	add	r4,r11,r4
  800b08:	21400217 	ldw	r5,8(r4)
  800b0c:	10c4983a 	sll	r2,r2,r3
  800b10:	81000315 	stw	r4,12(r16)
  800b14:	81400215 	stw	r5,8(r16)
  800b18:	388eb03a 	or	r7,r7,r2
  800b1c:	2c000315 	stw	r16,12(r5)
  800b20:	24000215 	stw	r16,8(r4)
  800b24:	e1c00115 	stw	r7,4(fp)
  800b28:	4807883a 	mov	r3,r9
  800b2c:	4800cd16 	blt	r9,zero,800e64 <_malloc_r+0x554>
  800b30:	1807d0ba 	srai	r3,r3,2
  800b34:	00800044 	movi	r2,1
  800b38:	10c8983a 	sll	r4,r2,r3
  800b3c:	39004436 	bltu	r7,r4,800c50 <_malloc_r+0x340>
  800b40:	21c4703a 	and	r2,r4,r7
  800b44:	10000a1e 	bne	r2,zero,800b70 <_malloc_r+0x260>
  800b48:	2109883a 	add	r4,r4,r4
  800b4c:	00bfff04 	movi	r2,-4
  800b50:	4884703a 	and	r2,r9,r2
  800b54:	3906703a 	and	r3,r7,r4
  800b58:	12400104 	addi	r9,r2,4
  800b5c:	1800041e 	bne	r3,zero,800b70 <_malloc_r+0x260>
  800b60:	2109883a 	add	r4,r4,r4
  800b64:	3904703a 	and	r2,r7,r4
  800b68:	4a400104 	addi	r9,r9,4
  800b6c:	103ffc26 	beq	r2,zero,800b60 <_malloc_r+0x250>
  800b70:	480490fa 	slli	r2,r9,3
  800b74:	4819883a 	mov	r12,r9
  800b78:	023fff04 	movi	r8,-4
  800b7c:	589b883a 	add	r13,r11,r2
  800b80:	6807883a 	mov	r3,r13
  800b84:	014003c4 	movi	r5,15
  800b88:	1c000317 	ldw	r16,12(r3)
  800b8c:	1c00041e 	bne	r3,r16,800ba0 <_malloc_r+0x290>
  800b90:	0000a706 	br	800e30 <_malloc_r+0x520>
  800b94:	3000ab0e 	bge	r6,zero,800e44 <_malloc_r+0x534>
  800b98:	84000317 	ldw	r16,12(r16)
  800b9c:	1c00a426 	beq	r3,r16,800e30 <_malloc_r+0x520>
  800ba0:	80800117 	ldw	r2,4(r16)
  800ba4:	1204703a 	and	r2,r2,r8
  800ba8:	144dc83a 	sub	r6,r2,r17
  800bac:	29bff90e 	bge	r5,r6,800b94 <_malloc_r+0x284>
  800bb0:	81000317 	ldw	r4,12(r16)
  800bb4:	80c00217 	ldw	r3,8(r16)
  800bb8:	89400054 	ori	r5,r17,1
  800bbc:	8445883a 	add	r2,r16,r17
  800bc0:	20c00215 	stw	r3,8(r4)
  800bc4:	19000315 	stw	r4,12(r3)
  800bc8:	81400115 	stw	r5,4(r16)
  800bcc:	1187883a 	add	r3,r2,r6
  800bd0:	31000054 	ori	r4,r6,1
  800bd4:	50800315 	stw	r2,12(r10)
  800bd8:	50800215 	stw	r2,8(r10)
  800bdc:	19800015 	stw	r6,0(r3)
  800be0:	11000115 	stw	r4,4(r2)
  800be4:	12800215 	stw	r10,8(r2)
  800be8:	12800315 	stw	r10,12(r2)
  800bec:	9009883a 	mov	r4,r18
  800bf0:	0803a040 	call	803a04 <__malloc_unlock>
  800bf4:	80c00204 	addi	r3,r16,8
  800bf8:	003f5906 	br	800960 <_malloc_r+0x50>
  800bfc:	8109883a 	add	r4,r16,r4
  800c00:	20800117 	ldw	r2,4(r4)
  800c04:	80c00217 	ldw	r3,8(r16)
  800c08:	81400317 	ldw	r5,12(r16)
  800c0c:	10800054 	ori	r2,r2,1
  800c10:	20800115 	stw	r2,4(r4)
  800c14:	28c00215 	stw	r3,8(r5)
  800c18:	19400315 	stw	r5,12(r3)
  800c1c:	9009883a 	mov	r4,r18
  800c20:	0803a040 	call	803a04 <__malloc_unlock>
  800c24:	80c00204 	addi	r3,r16,8
  800c28:	003f4d06 	br	800960 <_malloc_r+0x50>
  800c2c:	80800204 	addi	r2,r16,8
  800c30:	14000317 	ldw	r16,12(r2)
  800c34:	143f911e 	bne	r2,r16,800a7c <_malloc_r+0x16c>
  800c38:	1a400084 	addi	r9,r3,2
  800c3c:	003f7306 	br	800a0c <_malloc_r+0xfc>
  800c40:	88c00054 	ori	r3,r17,1
  800c44:	8445883a 	add	r2,r16,r17
  800c48:	80c00115 	stw	r3,4(r16)
  800c4c:	003fdf06 	br	800bcc <_malloc_r+0x2bc>
  800c50:	e4000217 	ldw	r16,8(fp)
  800c54:	00bfff04 	movi	r2,-4
  800c58:	80c00117 	ldw	r3,4(r16)
  800c5c:	802d883a 	mov	r22,r16
  800c60:	18aa703a 	and	r21,r3,r2
  800c64:	ac401636 	bltu	r21,r17,800cc0 <_malloc_r+0x3b0>
  800c68:	ac49c83a 	sub	r4,r21,r17
  800c6c:	008003c4 	movi	r2,15
  800c70:	1100130e 	bge	r2,r4,800cc0 <_malloc_r+0x3b0>
  800c74:	88800054 	ori	r2,r17,1
  800c78:	8447883a 	add	r3,r16,r17
  800c7c:	80800115 	stw	r2,4(r16)
  800c80:	20800054 	ori	r2,r4,1
  800c84:	18800115 	stw	r2,4(r3)
  800c88:	e0c00215 	stw	r3,8(fp)
  800c8c:	9009883a 	mov	r4,r18
  800c90:	0803a040 	call	803a04 <__malloc_unlock>
  800c94:	80c00204 	addi	r3,r16,8
  800c98:	003f3106 	br	800960 <_malloc_r+0x50>
  800c9c:	39c00117 	ldw	r7,4(r7)
  800ca0:	573ffe04 	addi	fp,r10,-8
  800ca4:	003fa006 	br	800b28 <_malloc_r+0x218>
  800ca8:	00801504 	movi	r2,84
  800cac:	10c06736 	bltu	r2,r3,800e4c <_malloc_r+0x53c>
  800cb0:	8804d33a 	srli	r2,r17,12
  800cb4:	11801b84 	addi	r6,r2,110
  800cb8:	300490fa 	slli	r2,r6,3
  800cbc:	003f4106 	br	8009c4 <_malloc_r+0xb4>
  800cc0:	d0a6f817 	ldw	r2,-25632(gp)
  800cc4:	d0e00317 	ldw	r3,-32756(gp)
  800cc8:	053fffc4 	movi	r20,-1
  800ccc:	10800404 	addi	r2,r2,16
  800cd0:	88a7883a 	add	r19,r17,r2
  800cd4:	1d000326 	beq	r3,r20,800ce4 <_malloc_r+0x3d4>
  800cd8:	98c3ffc4 	addi	r3,r19,4095
  800cdc:	00bc0004 	movi	r2,-4096
  800ce0:	18a6703a 	and	r19,r3,r2
  800ce4:	9009883a 	mov	r4,r18
  800ce8:	980b883a 	mov	r5,r19
  800cec:	08018a80 	call	8018a8 <_sbrk_r>
  800cf0:	1009883a 	mov	r4,r2
  800cf4:	15000426 	beq	r2,r20,800d08 <_malloc_r+0x3f8>
  800cf8:	854b883a 	add	r5,r16,r21
  800cfc:	1029883a 	mov	r20,r2
  800d00:	11405a2e 	bgeu	r2,r5,800e6c <_malloc_r+0x55c>
  800d04:	87000c26 	beq	r16,fp,800d38 <_malloc_r+0x428>
  800d08:	e4000217 	ldw	r16,8(fp)
  800d0c:	80c00117 	ldw	r3,4(r16)
  800d10:	00bfff04 	movi	r2,-4
  800d14:	1884703a 	and	r2,r3,r2
  800d18:	14400336 	bltu	r2,r17,800d28 <_malloc_r+0x418>
  800d1c:	1449c83a 	sub	r4,r2,r17
  800d20:	008003c4 	movi	r2,15
  800d24:	113fd316 	blt	r2,r4,800c74 <_malloc_r+0x364>
  800d28:	9009883a 	mov	r4,r18
  800d2c:	0803a040 	call	803a04 <__malloc_unlock>
  800d30:	0007883a 	mov	r3,zero
  800d34:	003f0a06 	br	800960 <_malloc_r+0x50>
  800d38:	05c02074 	movhi	r23,129
  800d3c:	bdc9a604 	addi	r23,r23,9880
  800d40:	b8800017 	ldw	r2,0(r23)
  800d44:	988d883a 	add	r6,r19,r2
  800d48:	b9800015 	stw	r6,0(r23)
  800d4c:	d0e00317 	ldw	r3,-32756(gp)
  800d50:	00bfffc4 	movi	r2,-1
  800d54:	18808e26 	beq	r3,r2,800f90 <_malloc_r+0x680>
  800d58:	2145c83a 	sub	r2,r4,r5
  800d5c:	3085883a 	add	r2,r6,r2
  800d60:	b8800015 	stw	r2,0(r23)
  800d64:	20c001cc 	andi	r3,r4,7
  800d68:	18005f1e 	bne	r3,zero,800ee8 <_malloc_r+0x5d8>
  800d6c:	000b883a 	mov	r5,zero
  800d70:	a4c5883a 	add	r2,r20,r19
  800d74:	1083ffcc 	andi	r2,r2,4095
  800d78:	00c40004 	movi	r3,4096
  800d7c:	1887c83a 	sub	r3,r3,r2
  800d80:	28e7883a 	add	r19,r5,r3
  800d84:	9009883a 	mov	r4,r18
  800d88:	980b883a 	mov	r5,r19
  800d8c:	08018a80 	call	8018a8 <_sbrk_r>
  800d90:	1007883a 	mov	r3,r2
  800d94:	00bfffc4 	movi	r2,-1
  800d98:	18807a26 	beq	r3,r2,800f84 <_malloc_r+0x674>
  800d9c:	1d05c83a 	sub	r2,r3,r20
  800da0:	9885883a 	add	r2,r19,r2
  800da4:	10c00054 	ori	r3,r2,1
  800da8:	b8800017 	ldw	r2,0(r23)
  800dac:	a021883a 	mov	r16,r20
  800db0:	a0c00115 	stw	r3,4(r20)
  800db4:	9885883a 	add	r2,r19,r2
  800db8:	b8800015 	stw	r2,0(r23)
  800dbc:	e5000215 	stw	r20,8(fp)
  800dc0:	b7003626 	beq	r22,fp,800e9c <_malloc_r+0x58c>
  800dc4:	018003c4 	movi	r6,15
  800dc8:	35404b36 	bltu	r6,r21,800ef8 <_malloc_r+0x5e8>
  800dcc:	00800044 	movi	r2,1
  800dd0:	a0800115 	stw	r2,4(r20)
  800dd4:	003fcd06 	br	800d0c <_malloc_r+0x3fc>
  800dd8:	2808d27a 	srli	r4,r5,9
  800ddc:	2000371e 	bne	r4,zero,800ebc <_malloc_r+0x5ac>
  800de0:	2808d0fa 	srli	r4,r5,3
  800de4:	200690fa 	slli	r3,r4,3
  800de8:	1ad1883a 	add	r8,r3,r11
  800dec:	41800217 	ldw	r6,8(r8)
  800df0:	41805b26 	beq	r8,r6,800f60 <_malloc_r+0x650>
  800df4:	30800117 	ldw	r2,4(r6)
  800df8:	00ffff04 	movi	r3,-4
  800dfc:	10c4703a 	and	r2,r2,r3
  800e00:	2880022e 	bgeu	r5,r2,800e0c <_malloc_r+0x4fc>
  800e04:	31800217 	ldw	r6,8(r6)
  800e08:	41bffa1e 	bne	r8,r6,800df4 <_malloc_r+0x4e4>
  800e0c:	32000317 	ldw	r8,12(r6)
  800e10:	39c00117 	ldw	r7,4(r7)
  800e14:	82000315 	stw	r8,12(r16)
  800e18:	81800215 	stw	r6,8(r16)
  800e1c:	07002074 	movhi	fp,129
  800e20:	e73cee04 	addi	fp,fp,-3144
  800e24:	34000315 	stw	r16,12(r6)
  800e28:	44000215 	stw	r16,8(r8)
  800e2c:	003f3e06 	br	800b28 <_malloc_r+0x218>
  800e30:	63000044 	addi	r12,r12,1
  800e34:	608000cc 	andi	r2,r12,3
  800e38:	10005d26 	beq	r2,zero,800fb0 <_malloc_r+0x6a0>
  800e3c:	18c00204 	addi	r3,r3,8
  800e40:	003f5106 	br	800b88 <_malloc_r+0x278>
  800e44:	8089883a 	add	r4,r16,r2
  800e48:	003f6d06 	br	800c00 <_malloc_r+0x2f0>
  800e4c:	00805504 	movi	r2,340
  800e50:	10c02036 	bltu	r2,r3,800ed4 <_malloc_r+0x5c4>
  800e54:	8804d3fa 	srli	r2,r17,15
  800e58:	11801dc4 	addi	r6,r2,119
  800e5c:	300490fa 	slli	r2,r6,3
  800e60:	003ed806 	br	8009c4 <_malloc_r+0xb4>
  800e64:	48c000c4 	addi	r3,r9,3
  800e68:	003f3106 	br	800b30 <_malloc_r+0x220>
  800e6c:	05c02074 	movhi	r23,129
  800e70:	bdc9a604 	addi	r23,r23,9880
  800e74:	b8800017 	ldw	r2,0(r23)
  800e78:	988d883a 	add	r6,r19,r2
  800e7c:	b9800015 	stw	r6,0(r23)
  800e80:	293fb21e 	bne	r5,r4,800d4c <_malloc_r+0x43c>
  800e84:	2083ffcc 	andi	r2,r4,4095
  800e88:	103fb01e 	bne	r2,zero,800d4c <_malloc_r+0x43c>
  800e8c:	e4000217 	ldw	r16,8(fp)
  800e90:	9d45883a 	add	r2,r19,r21
  800e94:	10800054 	ori	r2,r2,1
  800e98:	80800115 	stw	r2,4(r16)
  800e9c:	b8c00017 	ldw	r3,0(r23)
  800ea0:	d0a6f917 	ldw	r2,-25628(gp)
  800ea4:	10c0012e 	bgeu	r2,r3,800eac <_malloc_r+0x59c>
  800ea8:	d0e6f915 	stw	r3,-25628(gp)
  800eac:	d0a6fa17 	ldw	r2,-25624(gp)
  800eb0:	10ff962e 	bgeu	r2,r3,800d0c <_malloc_r+0x3fc>
  800eb4:	d0e6fa15 	stw	r3,-25624(gp)
  800eb8:	003f9406 	br	800d0c <_malloc_r+0x3fc>
  800ebc:	00800104 	movi	r2,4
  800ec0:	11001e36 	bltu	r2,r4,800f3c <_malloc_r+0x62c>
  800ec4:	2804d1ba 	srli	r2,r5,6
  800ec8:	11000e04 	addi	r4,r2,56
  800ecc:	200690fa 	slli	r3,r4,3
  800ed0:	003fc506 	br	800de8 <_malloc_r+0x4d8>
  800ed4:	00815504 	movi	r2,1364
  800ed8:	10c01d2e 	bgeu	r2,r3,800f50 <_malloc_r+0x640>
  800edc:	01801f84 	movi	r6,126
  800ee0:	0080fc04 	movi	r2,1008
  800ee4:	003eb706 	br	8009c4 <_malloc_r+0xb4>
  800ee8:	00800204 	movi	r2,8
  800eec:	10cbc83a 	sub	r5,r2,r3
  800ef0:	2169883a 	add	r20,r4,r5
  800ef4:	003f9e06 	br	800d70 <_malloc_r+0x460>
  800ef8:	00bffe04 	movi	r2,-8
  800efc:	a93ffd04 	addi	r4,r21,-12
  800f00:	2088703a 	and	r4,r4,r2
  800f04:	b10b883a 	add	r5,r22,r4
  800f08:	00c00144 	movi	r3,5
  800f0c:	28c00215 	stw	r3,8(r5)
  800f10:	28c00115 	stw	r3,4(r5)
  800f14:	b0800117 	ldw	r2,4(r22)
  800f18:	1080004c 	andi	r2,r2,1
  800f1c:	2084b03a 	or	r2,r4,r2
  800f20:	b0800115 	stw	r2,4(r22)
  800f24:	313fdd2e 	bgeu	r6,r4,800e9c <_malloc_r+0x58c>
  800f28:	b1400204 	addi	r5,r22,8
  800f2c:	9009883a 	mov	r4,r18
  800f30:	08020a40 	call	8020a4 <_free_r>
  800f34:	e4000217 	ldw	r16,8(fp)
  800f38:	003fd806 	br	800e9c <_malloc_r+0x58c>
  800f3c:	00800504 	movi	r2,20
  800f40:	11001536 	bltu	r2,r4,800f98 <_malloc_r+0x688>
  800f44:	210016c4 	addi	r4,r4,91
  800f48:	200690fa 	slli	r3,r4,3
  800f4c:	003fa606 	br	800de8 <_malloc_r+0x4d8>
  800f50:	8804d4ba 	srli	r2,r17,18
  800f54:	11801f04 	addi	r6,r2,124
  800f58:	300490fa 	slli	r2,r6,3
  800f5c:	003e9906 	br	8009c4 <_malloc_r+0xb4>
  800f60:	2009d0ba 	srai	r4,r4,2
  800f64:	01402074 	movhi	r5,129
  800f68:	297cee04 	addi	r5,r5,-3144
  800f6c:	00c00044 	movi	r3,1
  800f70:	28800117 	ldw	r2,4(r5)
  800f74:	1906983a 	sll	r3,r3,r4
  800f78:	10c4b03a 	or	r2,r2,r3
  800f7c:	28800115 	stw	r2,4(r5)
  800f80:	003fa306 	br	800e10 <_malloc_r+0x500>
  800f84:	0027883a 	mov	r19,zero
  800f88:	00c00044 	movi	r3,1
  800f8c:	003f8606 	br	800da8 <_malloc_r+0x498>
  800f90:	d1200315 	stw	r4,-32756(gp)
  800f94:	003f7306 	br	800d64 <_malloc_r+0x454>
  800f98:	00801504 	movi	r2,84
  800f9c:	11001936 	bltu	r2,r4,801004 <_malloc_r+0x6f4>
  800fa0:	2804d33a 	srli	r2,r5,12
  800fa4:	11001b84 	addi	r4,r2,110
  800fa8:	200690fa 	slli	r3,r4,3
  800fac:	003f8e06 	br	800de8 <_malloc_r+0x4d8>
  800fb0:	480b883a 	mov	r5,r9
  800fb4:	6807883a 	mov	r3,r13
  800fb8:	288000cc 	andi	r2,r5,3
  800fbc:	18fffe04 	addi	r3,r3,-8
  800fc0:	297fffc4 	addi	r5,r5,-1
  800fc4:	10001526 	beq	r2,zero,80101c <_malloc_r+0x70c>
  800fc8:	18800217 	ldw	r2,8(r3)
  800fcc:	10fffa26 	beq	r2,r3,800fb8 <_malloc_r+0x6a8>
  800fd0:	2109883a 	add	r4,r4,r4
  800fd4:	393f1e36 	bltu	r7,r4,800c50 <_malloc_r+0x340>
  800fd8:	203f1d26 	beq	r4,zero,800c50 <_malloc_r+0x340>
  800fdc:	21c4703a 	and	r2,r4,r7
  800fe0:	10000226 	beq	r2,zero,800fec <_malloc_r+0x6dc>
  800fe4:	6013883a 	mov	r9,r12
  800fe8:	003ee106 	br	800b70 <_malloc_r+0x260>
  800fec:	2109883a 	add	r4,r4,r4
  800ff0:	3904703a 	and	r2,r7,r4
  800ff4:	63000104 	addi	r12,r12,4
  800ff8:	103ffc26 	beq	r2,zero,800fec <_malloc_r+0x6dc>
  800ffc:	6013883a 	mov	r9,r12
  801000:	003edb06 	br	800b70 <_malloc_r+0x260>
  801004:	00805504 	movi	r2,340
  801008:	11000836 	bltu	r2,r4,80102c <_malloc_r+0x71c>
  80100c:	2804d3fa 	srli	r2,r5,15
  801010:	11001dc4 	addi	r4,r2,119
  801014:	200690fa 	slli	r3,r4,3
  801018:	003f7306 	br	800de8 <_malloc_r+0x4d8>
  80101c:	0104303a 	nor	r2,zero,r4
  801020:	388e703a 	and	r7,r7,r2
  801024:	e1c00115 	stw	r7,4(fp)
  801028:	003fe906 	br	800fd0 <_malloc_r+0x6c0>
  80102c:	00815504 	movi	r2,1364
  801030:	1100032e 	bgeu	r2,r4,801040 <_malloc_r+0x730>
  801034:	01001f84 	movi	r4,126
  801038:	00c0fc04 	movi	r3,1008
  80103c:	003f6a06 	br	800de8 <_malloc_r+0x4d8>
  801040:	2804d4ba 	srli	r2,r5,18
  801044:	11001f04 	addi	r4,r2,124
  801048:	200690fa 	slli	r3,r4,3
  80104c:	003f6606 	br	800de8 <_malloc_r+0x4d8>

00801050 <memchr>:
  801050:	008000c4 	movi	r2,3
  801054:	29403fcc 	andi	r5,r5,255
  801058:	2007883a 	mov	r3,r4
  80105c:	1180022e 	bgeu	r2,r6,801068 <memchr+0x18>
  801060:	2084703a 	and	r2,r4,r2
  801064:	10000b26 	beq	r2,zero,801094 <memchr+0x44>
  801068:	313fffc4 	addi	r4,r6,-1
  80106c:	3000051e 	bne	r6,zero,801084 <memchr+0x34>
  801070:	00002c06 	br	801124 <memchr+0xd4>
  801074:	213fffc4 	addi	r4,r4,-1
  801078:	00bfffc4 	movi	r2,-1
  80107c:	18c00044 	addi	r3,r3,1
  801080:	20802826 	beq	r4,r2,801124 <memchr+0xd4>
  801084:	18800003 	ldbu	r2,0(r3)
  801088:	28bffa1e 	bne	r5,r2,801074 <memchr+0x24>
  80108c:	1805883a 	mov	r2,r3
  801090:	f800283a 	ret
  801094:	0011883a 	mov	r8,zero
  801098:	0007883a 	mov	r3,zero
  80109c:	01c00104 	movi	r7,4
  8010a0:	4004923a 	slli	r2,r8,8
  8010a4:	18c00044 	addi	r3,r3,1
  8010a8:	1151883a 	add	r8,r2,r5
  8010ac:	19fffc1e 	bne	r3,r7,8010a0 <memchr+0x50>
  8010b0:	02bfbff4 	movhi	r10,65279
  8010b4:	52bfbfc4 	addi	r10,r10,-257
  8010b8:	02602074 	movhi	r9,32897
  8010bc:	4a602004 	addi	r9,r9,-32640
  8010c0:	02c000c4 	movi	r11,3
  8010c4:	20800017 	ldw	r2,0(r4)
  8010c8:	31bfff04 	addi	r6,r6,-4
  8010cc:	200f883a 	mov	r7,r4
  8010d0:	1204f03a 	xor	r2,r2,r8
  8010d4:	1287883a 	add	r3,r2,r10
  8010d8:	1a46703a 	and	r3,r3,r9
  8010dc:	0084303a 	nor	r2,zero,r2
  8010e0:	10c4703a 	and	r2,r2,r3
  8010e4:	10000b26 	beq	r2,zero,801114 <memchr+0xc4>
  8010e8:	20800003 	ldbu	r2,0(r4)
  8010ec:	28800f26 	beq	r5,r2,80112c <memchr+0xdc>
  8010f0:	20800043 	ldbu	r2,1(r4)
  8010f4:	21c00044 	addi	r7,r4,1
  8010f8:	28800c26 	beq	r5,r2,80112c <memchr+0xdc>
  8010fc:	20800083 	ldbu	r2,2(r4)
  801100:	21c00084 	addi	r7,r4,2
  801104:	28800926 	beq	r5,r2,80112c <memchr+0xdc>
  801108:	208000c3 	ldbu	r2,3(r4)
  80110c:	21c000c4 	addi	r7,r4,3
  801110:	28800626 	beq	r5,r2,80112c <memchr+0xdc>
  801114:	21000104 	addi	r4,r4,4
  801118:	59bfea36 	bltu	r11,r6,8010c4 <memchr+0x74>
  80111c:	2007883a 	mov	r3,r4
  801120:	003fd106 	br	801068 <memchr+0x18>
  801124:	0005883a 	mov	r2,zero
  801128:	f800283a 	ret
  80112c:	3805883a 	mov	r2,r7
  801130:	f800283a 	ret

00801134 <memcpy>:
  801134:	01c003c4 	movi	r7,15
  801138:	2007883a 	mov	r3,r4
  80113c:	3980032e 	bgeu	r7,r6,80114c <memcpy+0x18>
  801140:	2904b03a 	or	r2,r5,r4
  801144:	108000cc 	andi	r2,r2,3
  801148:	10000926 	beq	r2,zero,801170 <memcpy+0x3c>
  80114c:	30000626 	beq	r6,zero,801168 <memcpy+0x34>
  801150:	30cd883a 	add	r6,r6,r3
  801154:	28800003 	ldbu	r2,0(r5)
  801158:	29400044 	addi	r5,r5,1
  80115c:	18800005 	stb	r2,0(r3)
  801160:	18c00044 	addi	r3,r3,1
  801164:	30fffb1e 	bne	r6,r3,801154 <memcpy+0x20>
  801168:	2005883a 	mov	r2,r4
  80116c:	f800283a 	ret
  801170:	3811883a 	mov	r8,r7
  801174:	200f883a 	mov	r7,r4
  801178:	28c00017 	ldw	r3,0(r5)
  80117c:	31bffc04 	addi	r6,r6,-16
  801180:	38c00015 	stw	r3,0(r7)
  801184:	28800117 	ldw	r2,4(r5)
  801188:	38800115 	stw	r2,4(r7)
  80118c:	28c00217 	ldw	r3,8(r5)
  801190:	38c00215 	stw	r3,8(r7)
  801194:	28800317 	ldw	r2,12(r5)
  801198:	29400404 	addi	r5,r5,16
  80119c:	38800315 	stw	r2,12(r7)
  8011a0:	39c00404 	addi	r7,r7,16
  8011a4:	41bff436 	bltu	r8,r6,801178 <memcpy+0x44>
  8011a8:	008000c4 	movi	r2,3
  8011ac:	1180072e 	bgeu	r2,r6,8011cc <memcpy+0x98>
  8011b0:	1007883a 	mov	r3,r2
  8011b4:	28800017 	ldw	r2,0(r5)
  8011b8:	31bfff04 	addi	r6,r6,-4
  8011bc:	29400104 	addi	r5,r5,4
  8011c0:	38800015 	stw	r2,0(r7)
  8011c4:	39c00104 	addi	r7,r7,4
  8011c8:	19bffa36 	bltu	r3,r6,8011b4 <memcpy+0x80>
  8011cc:	3807883a 	mov	r3,r7
  8011d0:	003fde06 	br	80114c <memcpy+0x18>

008011d4 <memmove>:
  8011d4:	2807883a 	mov	r3,r5
  8011d8:	2011883a 	mov	r8,r4
  8011dc:	29000c2e 	bgeu	r5,r4,801210 <memmove+0x3c>
  8011e0:	298f883a 	add	r7,r5,r6
  8011e4:	21c00a2e 	bgeu	r4,r7,801210 <memmove+0x3c>
  8011e8:	30000726 	beq	r6,zero,801208 <memmove+0x34>
  8011ec:	2187883a 	add	r3,r4,r6
  8011f0:	198dc83a 	sub	r6,r3,r6
  8011f4:	39ffffc4 	addi	r7,r7,-1
  8011f8:	38800003 	ldbu	r2,0(r7)
  8011fc:	18ffffc4 	addi	r3,r3,-1
  801200:	18800005 	stb	r2,0(r3)
  801204:	19bffb1e 	bne	r3,r6,8011f4 <memmove+0x20>
  801208:	2005883a 	mov	r2,r4
  80120c:	f800283a 	ret
  801210:	01c003c4 	movi	r7,15
  801214:	39800a36 	bltu	r7,r6,801240 <memmove+0x6c>
  801218:	303ffb26 	beq	r6,zero,801208 <memmove+0x34>
  80121c:	400f883a 	mov	r7,r8
  801220:	320d883a 	add	r6,r6,r8
  801224:	28800003 	ldbu	r2,0(r5)
  801228:	29400044 	addi	r5,r5,1
  80122c:	38800005 	stb	r2,0(r7)
  801230:	39c00044 	addi	r7,r7,1
  801234:	39bffb1e 	bne	r7,r6,801224 <memmove+0x50>
  801238:	2005883a 	mov	r2,r4
  80123c:	f800283a 	ret
  801240:	1904b03a 	or	r2,r3,r4
  801244:	108000cc 	andi	r2,r2,3
  801248:	103ff31e 	bne	r2,zero,801218 <memmove+0x44>
  80124c:	3811883a 	mov	r8,r7
  801250:	180b883a 	mov	r5,r3
  801254:	200f883a 	mov	r7,r4
  801258:	28c00017 	ldw	r3,0(r5)
  80125c:	31bffc04 	addi	r6,r6,-16
  801260:	38c00015 	stw	r3,0(r7)
  801264:	28800117 	ldw	r2,4(r5)
  801268:	38800115 	stw	r2,4(r7)
  80126c:	28c00217 	ldw	r3,8(r5)
  801270:	38c00215 	stw	r3,8(r7)
  801274:	28800317 	ldw	r2,12(r5)
  801278:	29400404 	addi	r5,r5,16
  80127c:	38800315 	stw	r2,12(r7)
  801280:	39c00404 	addi	r7,r7,16
  801284:	41bff436 	bltu	r8,r6,801258 <memmove+0x84>
  801288:	008000c4 	movi	r2,3
  80128c:	1180072e 	bgeu	r2,r6,8012ac <memmove+0xd8>
  801290:	1007883a 	mov	r3,r2
  801294:	28800017 	ldw	r2,0(r5)
  801298:	31bfff04 	addi	r6,r6,-4
  80129c:	29400104 	addi	r5,r5,4
  8012a0:	38800015 	stw	r2,0(r7)
  8012a4:	39c00104 	addi	r7,r7,4
  8012a8:	19bffa36 	bltu	r3,r6,801294 <memmove+0xc0>
  8012ac:	3811883a 	mov	r8,r7
  8012b0:	003fd906 	br	801218 <memmove+0x44>

008012b4 <_realloc_r>:
  8012b4:	defff404 	addi	sp,sp,-48
  8012b8:	dd800815 	stw	r22,32(sp)
  8012bc:	dc800415 	stw	r18,16(sp)
  8012c0:	dc400315 	stw	r17,12(sp)
  8012c4:	dfc00b15 	stw	ra,44(sp)
  8012c8:	df000a15 	stw	fp,40(sp)
  8012cc:	ddc00915 	stw	r23,36(sp)
  8012d0:	dd400715 	stw	r21,28(sp)
  8012d4:	dd000615 	stw	r20,24(sp)
  8012d8:	dcc00515 	stw	r19,20(sp)
  8012dc:	dc000215 	stw	r16,8(sp)
  8012e0:	2825883a 	mov	r18,r5
  8012e4:	3023883a 	mov	r17,r6
  8012e8:	202d883a 	mov	r22,r4
  8012ec:	2800c926 	beq	r5,zero,801614 <_realloc_r+0x360>
  8012f0:	08038fc0 	call	8038fc <__malloc_lock>
  8012f4:	943ffe04 	addi	r16,r18,-8
  8012f8:	88c002c4 	addi	r3,r17,11
  8012fc:	00800584 	movi	r2,22
  801300:	82000117 	ldw	r8,4(r16)
  801304:	10c01b2e 	bgeu	r2,r3,801374 <_realloc_r+0xc0>
  801308:	00bffe04 	movi	r2,-8
  80130c:	188e703a 	and	r7,r3,r2
  801310:	3839883a 	mov	fp,r7
  801314:	38001a16 	blt	r7,zero,801380 <_realloc_r+0xcc>
  801318:	e4401936 	bltu	fp,r17,801380 <_realloc_r+0xcc>
  80131c:	013fff04 	movi	r4,-4
  801320:	4126703a 	and	r19,r8,r4
  801324:	99c02616 	blt	r19,r7,8013c0 <_realloc_r+0x10c>
  801328:	802b883a 	mov	r21,r16
  80132c:	9829883a 	mov	r20,r19
  801330:	84000204 	addi	r16,r16,8
  801334:	a80f883a 	mov	r7,r21
  801338:	a70dc83a 	sub	r6,r20,fp
  80133c:	008003c4 	movi	r2,15
  801340:	1180c136 	bltu	r2,r6,801648 <_realloc_r+0x394>
  801344:	38800117 	ldw	r2,4(r7)
  801348:	a549883a 	add	r4,r20,r21
  80134c:	1080004c 	andi	r2,r2,1
  801350:	a084b03a 	or	r2,r20,r2
  801354:	38800115 	stw	r2,4(r7)
  801358:	20c00117 	ldw	r3,4(r4)
  80135c:	18c00054 	ori	r3,r3,1
  801360:	20c00115 	stw	r3,4(r4)
  801364:	b009883a 	mov	r4,r22
  801368:	0803a040 	call	803a04 <__malloc_unlock>
  80136c:	8023883a 	mov	r17,r16
  801370:	00000606 	br	80138c <_realloc_r+0xd8>
  801374:	01c00404 	movi	r7,16
  801378:	3839883a 	mov	fp,r7
  80137c:	e47fe72e 	bgeu	fp,r17,80131c <_realloc_r+0x68>
  801380:	00800304 	movi	r2,12
  801384:	0023883a 	mov	r17,zero
  801388:	b0800015 	stw	r2,0(r22)
  80138c:	8805883a 	mov	r2,r17
  801390:	dfc00b17 	ldw	ra,44(sp)
  801394:	df000a17 	ldw	fp,40(sp)
  801398:	ddc00917 	ldw	r23,36(sp)
  80139c:	dd800817 	ldw	r22,32(sp)
  8013a0:	dd400717 	ldw	r21,28(sp)
  8013a4:	dd000617 	ldw	r20,24(sp)
  8013a8:	dcc00517 	ldw	r19,20(sp)
  8013ac:	dc800417 	ldw	r18,16(sp)
  8013b0:	dc400317 	ldw	r17,12(sp)
  8013b4:	dc000217 	ldw	r16,8(sp)
  8013b8:	dec00c04 	addi	sp,sp,48
  8013bc:	f800283a 	ret
  8013c0:	00802074 	movhi	r2,129
  8013c4:	10bcee04 	addi	r2,r2,-3144
  8013c8:	12400217 	ldw	r9,8(r2)
  8013cc:	84cd883a 	add	r6,r16,r19
  8013d0:	802b883a 	mov	r21,r16
  8013d4:	3240b926 	beq	r6,r9,8016bc <_realloc_r+0x408>
  8013d8:	31400117 	ldw	r5,4(r6)
  8013dc:	00bfff84 	movi	r2,-2
  8013e0:	2884703a 	and	r2,r5,r2
  8013e4:	1185883a 	add	r2,r2,r6
  8013e8:	10c00117 	ldw	r3,4(r2)
  8013ec:	18c0004c 	andi	r3,r3,1
  8013f0:	1807003a 	cmpeq	r3,r3,zero
  8013f4:	1800a326 	beq	r3,zero,801684 <_realloc_r+0x3d0>
  8013f8:	2908703a 	and	r4,r5,r4
  8013fc:	9929883a 	add	r20,r19,r4
  801400:	a1c0a30e 	bge	r20,r7,801690 <_realloc_r+0x3dc>
  801404:	4080004c 	andi	r2,r8,1
  801408:	1000551e 	bne	r2,zero,801560 <_realloc_r+0x2ac>
  80140c:	80800017 	ldw	r2,0(r16)
  801410:	80afc83a 	sub	r23,r16,r2
  801414:	b8c00117 	ldw	r3,4(r23)
  801418:	00bfff04 	movi	r2,-4
  80141c:	1884703a 	and	r2,r3,r2
  801420:	30002e26 	beq	r6,zero,8014dc <_realloc_r+0x228>
  801424:	3240b926 	beq	r6,r9,80170c <_realloc_r+0x458>
  801428:	98a9883a 	add	r20,r19,r2
  80142c:	2509883a 	add	r4,r4,r20
  801430:	d9000015 	stw	r4,0(sp)
  801434:	21c02a16 	blt	r4,r7,8014e0 <_realloc_r+0x22c>
  801438:	30800317 	ldw	r2,12(r6)
  80143c:	30c00217 	ldw	r3,8(r6)
  801440:	01400904 	movi	r5,36
  801444:	99bfff04 	addi	r6,r19,-4
  801448:	18800315 	stw	r2,12(r3)
  80144c:	10c00215 	stw	r3,8(r2)
  801450:	b9000317 	ldw	r4,12(r23)
  801454:	b8800217 	ldw	r2,8(r23)
  801458:	b82b883a 	mov	r21,r23
  80145c:	bc000204 	addi	r16,r23,8
  801460:	20800215 	stw	r2,8(r4)
  801464:	11000315 	stw	r4,12(r2)
  801468:	2980e436 	bltu	r5,r6,8017fc <_realloc_r+0x548>
  80146c:	008004c4 	movi	r2,19
  801470:	9009883a 	mov	r4,r18
  801474:	8011883a 	mov	r8,r16
  801478:	11800f2e 	bgeu	r2,r6,8014b8 <_realloc_r+0x204>
  80147c:	90800017 	ldw	r2,0(r18)
  801480:	ba000404 	addi	r8,r23,16
  801484:	91000204 	addi	r4,r18,8
  801488:	b8800215 	stw	r2,8(r23)
  80148c:	90c00117 	ldw	r3,4(r18)
  801490:	008006c4 	movi	r2,27
  801494:	b8c00315 	stw	r3,12(r23)
  801498:	1180072e 	bgeu	r2,r6,8014b8 <_realloc_r+0x204>
  80149c:	90c00217 	ldw	r3,8(r18)
  8014a0:	ba000604 	addi	r8,r23,24
  8014a4:	91000404 	addi	r4,r18,16
  8014a8:	b8c00415 	stw	r3,16(r23)
  8014ac:	90800317 	ldw	r2,12(r18)
  8014b0:	b8800515 	stw	r2,20(r23)
  8014b4:	3140e726 	beq	r6,r5,801854 <_realloc_r+0x5a0>
  8014b8:	20800017 	ldw	r2,0(r4)
  8014bc:	dd000017 	ldw	r20,0(sp)
  8014c0:	b80f883a 	mov	r7,r23
  8014c4:	40800015 	stw	r2,0(r8)
  8014c8:	20c00117 	ldw	r3,4(r4)
  8014cc:	40c00115 	stw	r3,4(r8)
  8014d0:	20800217 	ldw	r2,8(r4)
  8014d4:	40800215 	stw	r2,8(r8)
  8014d8:	003f9706 	br	801338 <_realloc_r+0x84>
  8014dc:	98a9883a 	add	r20,r19,r2
  8014e0:	a1c01f16 	blt	r20,r7,801560 <_realloc_r+0x2ac>
  8014e4:	b8c00317 	ldw	r3,12(r23)
  8014e8:	b8800217 	ldw	r2,8(r23)
  8014ec:	99bfff04 	addi	r6,r19,-4
  8014f0:	01400904 	movi	r5,36
  8014f4:	b82b883a 	mov	r21,r23
  8014f8:	18800215 	stw	r2,8(r3)
  8014fc:	10c00315 	stw	r3,12(r2)
  801500:	bc000204 	addi	r16,r23,8
  801504:	2980c336 	bltu	r5,r6,801814 <_realloc_r+0x560>
  801508:	008004c4 	movi	r2,19
  80150c:	9009883a 	mov	r4,r18
  801510:	8011883a 	mov	r8,r16
  801514:	11800f2e 	bgeu	r2,r6,801554 <_realloc_r+0x2a0>
  801518:	90800017 	ldw	r2,0(r18)
  80151c:	ba000404 	addi	r8,r23,16
  801520:	91000204 	addi	r4,r18,8
  801524:	b8800215 	stw	r2,8(r23)
  801528:	90c00117 	ldw	r3,4(r18)
  80152c:	008006c4 	movi	r2,27
  801530:	b8c00315 	stw	r3,12(r23)
  801534:	1180072e 	bgeu	r2,r6,801554 <_realloc_r+0x2a0>
  801538:	90c00217 	ldw	r3,8(r18)
  80153c:	ba000604 	addi	r8,r23,24
  801540:	91000404 	addi	r4,r18,16
  801544:	b8c00415 	stw	r3,16(r23)
  801548:	90800317 	ldw	r2,12(r18)
  80154c:	b8800515 	stw	r2,20(r23)
  801550:	3140c726 	beq	r6,r5,801870 <_realloc_r+0x5bc>
  801554:	20800017 	ldw	r2,0(r4)
  801558:	b80f883a 	mov	r7,r23
  80155c:	003fd906 	br	8014c4 <_realloc_r+0x210>
  801560:	880b883a 	mov	r5,r17
  801564:	b009883a 	mov	r4,r22
  801568:	08009100 	call	800910 <_malloc_r>
  80156c:	1023883a 	mov	r17,r2
  801570:	10002526 	beq	r2,zero,801608 <_realloc_r+0x354>
  801574:	80800117 	ldw	r2,4(r16)
  801578:	00ffff84 	movi	r3,-2
  80157c:	893ffe04 	addi	r4,r17,-8
  801580:	10c4703a 	and	r2,r2,r3
  801584:	8085883a 	add	r2,r16,r2
  801588:	20809526 	beq	r4,r2,8017e0 <_realloc_r+0x52c>
  80158c:	99bfff04 	addi	r6,r19,-4
  801590:	01c00904 	movi	r7,36
  801594:	39804536 	bltu	r7,r6,8016ac <_realloc_r+0x3f8>
  801598:	008004c4 	movi	r2,19
  80159c:	9009883a 	mov	r4,r18
  8015a0:	880b883a 	mov	r5,r17
  8015a4:	11800f2e 	bgeu	r2,r6,8015e4 <_realloc_r+0x330>
  8015a8:	90800017 	ldw	r2,0(r18)
  8015ac:	89400204 	addi	r5,r17,8
  8015b0:	91000204 	addi	r4,r18,8
  8015b4:	88800015 	stw	r2,0(r17)
  8015b8:	90c00117 	ldw	r3,4(r18)
  8015bc:	008006c4 	movi	r2,27
  8015c0:	88c00115 	stw	r3,4(r17)
  8015c4:	1180072e 	bgeu	r2,r6,8015e4 <_realloc_r+0x330>
  8015c8:	90c00217 	ldw	r3,8(r18)
  8015cc:	89400404 	addi	r5,r17,16
  8015d0:	91000404 	addi	r4,r18,16
  8015d4:	88c00215 	stw	r3,8(r17)
  8015d8:	90800317 	ldw	r2,12(r18)
  8015dc:	88800315 	stw	r2,12(r17)
  8015e0:	31c09126 	beq	r6,r7,801828 <_realloc_r+0x574>
  8015e4:	20800017 	ldw	r2,0(r4)
  8015e8:	28800015 	stw	r2,0(r5)
  8015ec:	20c00117 	ldw	r3,4(r4)
  8015f0:	28c00115 	stw	r3,4(r5)
  8015f4:	20800217 	ldw	r2,8(r4)
  8015f8:	28800215 	stw	r2,8(r5)
  8015fc:	900b883a 	mov	r5,r18
  801600:	b009883a 	mov	r4,r22
  801604:	08020a40 	call	8020a4 <_free_r>
  801608:	b009883a 	mov	r4,r22
  80160c:	0803a040 	call	803a04 <__malloc_unlock>
  801610:	003f5e06 	br	80138c <_realloc_r+0xd8>
  801614:	300b883a 	mov	r5,r6
  801618:	dfc00b17 	ldw	ra,44(sp)
  80161c:	df000a17 	ldw	fp,40(sp)
  801620:	ddc00917 	ldw	r23,36(sp)
  801624:	dd800817 	ldw	r22,32(sp)
  801628:	dd400717 	ldw	r21,28(sp)
  80162c:	dd000617 	ldw	r20,24(sp)
  801630:	dcc00517 	ldw	r19,20(sp)
  801634:	dc800417 	ldw	r18,16(sp)
  801638:	dc400317 	ldw	r17,12(sp)
  80163c:	dc000217 	ldw	r16,8(sp)
  801640:	dec00c04 	addi	sp,sp,48
  801644:	08009101 	jmpi	800910 <_malloc_r>
  801648:	38800117 	ldw	r2,4(r7)
  80164c:	e54b883a 	add	r5,fp,r21
  801650:	31000054 	ori	r4,r6,1
  801654:	1080004c 	andi	r2,r2,1
  801658:	1704b03a 	or	r2,r2,fp
  80165c:	38800115 	stw	r2,4(r7)
  801660:	29000115 	stw	r4,4(r5)
  801664:	2987883a 	add	r3,r5,r6
  801668:	18800117 	ldw	r2,4(r3)
  80166c:	29400204 	addi	r5,r5,8
  801670:	b009883a 	mov	r4,r22
  801674:	10800054 	ori	r2,r2,1
  801678:	18800115 	stw	r2,4(r3)
  80167c:	08020a40 	call	8020a4 <_free_r>
  801680:	003f3806 	br	801364 <_realloc_r+0xb0>
  801684:	000d883a 	mov	r6,zero
  801688:	0009883a 	mov	r4,zero
  80168c:	003f5d06 	br	801404 <_realloc_r+0x150>
  801690:	30c00217 	ldw	r3,8(r6)
  801694:	30800317 	ldw	r2,12(r6)
  801698:	800f883a 	mov	r7,r16
  80169c:	84000204 	addi	r16,r16,8
  8016a0:	10c00215 	stw	r3,8(r2)
  8016a4:	18800315 	stw	r2,12(r3)
  8016a8:	003f2306 	br	801338 <_realloc_r+0x84>
  8016ac:	8809883a 	mov	r4,r17
  8016b0:	900b883a 	mov	r5,r18
  8016b4:	08011d40 	call	8011d4 <memmove>
  8016b8:	003fd006 	br	8015fc <_realloc_r+0x348>
  8016bc:	30800117 	ldw	r2,4(r6)
  8016c0:	e0c00404 	addi	r3,fp,16
  8016c4:	1108703a 	and	r4,r2,r4
  8016c8:	9905883a 	add	r2,r19,r4
  8016cc:	10ff4d16 	blt	r2,r3,801404 <_realloc_r+0x150>
  8016d0:	1705c83a 	sub	r2,r2,fp
  8016d4:	870b883a 	add	r5,r16,fp
  8016d8:	10800054 	ori	r2,r2,1
  8016dc:	28800115 	stw	r2,4(r5)
  8016e0:	80c00117 	ldw	r3,4(r16)
  8016e4:	00802074 	movhi	r2,129
  8016e8:	10bcee04 	addi	r2,r2,-3144
  8016ec:	b009883a 	mov	r4,r22
  8016f0:	18c0004c 	andi	r3,r3,1
  8016f4:	e0c6b03a 	or	r3,fp,r3
  8016f8:	11400215 	stw	r5,8(r2)
  8016fc:	80c00115 	stw	r3,4(r16)
  801700:	0803a040 	call	803a04 <__malloc_unlock>
  801704:	84400204 	addi	r17,r16,8
  801708:	003f2006 	br	80138c <_realloc_r+0xd8>
  80170c:	98a9883a 	add	r20,r19,r2
  801710:	2509883a 	add	r4,r4,r20
  801714:	e0800404 	addi	r2,fp,16
  801718:	d9000115 	stw	r4,4(sp)
  80171c:	20bf7016 	blt	r4,r2,8014e0 <_realloc_r+0x22c>
  801720:	b8c00317 	ldw	r3,12(r23)
  801724:	b8800217 	ldw	r2,8(r23)
  801728:	99bfff04 	addi	r6,r19,-4
  80172c:	01400904 	movi	r5,36
  801730:	18800215 	stw	r2,8(r3)
  801734:	10c00315 	stw	r3,12(r2)
  801738:	bc400204 	addi	r17,r23,8
  80173c:	29804136 	bltu	r5,r6,801844 <_realloc_r+0x590>
  801740:	008004c4 	movi	r2,19
  801744:	9009883a 	mov	r4,r18
  801748:	880f883a 	mov	r7,r17
  80174c:	11800f2e 	bgeu	r2,r6,80178c <_realloc_r+0x4d8>
  801750:	90800017 	ldw	r2,0(r18)
  801754:	b9c00404 	addi	r7,r23,16
  801758:	91000204 	addi	r4,r18,8
  80175c:	b8800215 	stw	r2,8(r23)
  801760:	90c00117 	ldw	r3,4(r18)
  801764:	008006c4 	movi	r2,27
  801768:	b8c00315 	stw	r3,12(r23)
  80176c:	1180072e 	bgeu	r2,r6,80178c <_realloc_r+0x4d8>
  801770:	90c00217 	ldw	r3,8(r18)
  801774:	b9c00604 	addi	r7,r23,24
  801778:	91000404 	addi	r4,r18,16
  80177c:	b8c00415 	stw	r3,16(r23)
  801780:	90800317 	ldw	r2,12(r18)
  801784:	b8800515 	stw	r2,20(r23)
  801788:	31404026 	beq	r6,r5,80188c <_realloc_r+0x5d8>
  80178c:	20800017 	ldw	r2,0(r4)
  801790:	38800015 	stw	r2,0(r7)
  801794:	20c00117 	ldw	r3,4(r4)
  801798:	38c00115 	stw	r3,4(r7)
  80179c:	20800217 	ldw	r2,8(r4)
  8017a0:	38800215 	stw	r2,8(r7)
  8017a4:	d8c00117 	ldw	r3,4(sp)
  8017a8:	bf0b883a 	add	r5,r23,fp
  8017ac:	b009883a 	mov	r4,r22
  8017b0:	1f05c83a 	sub	r2,r3,fp
  8017b4:	10800054 	ori	r2,r2,1
  8017b8:	28800115 	stw	r2,4(r5)
  8017bc:	b8c00117 	ldw	r3,4(r23)
  8017c0:	00802074 	movhi	r2,129
  8017c4:	10bcee04 	addi	r2,r2,-3144
  8017c8:	11400215 	stw	r5,8(r2)
  8017cc:	18c0004c 	andi	r3,r3,1
  8017d0:	e0c6b03a 	or	r3,fp,r3
  8017d4:	b8c00115 	stw	r3,4(r23)
  8017d8:	0803a040 	call	803a04 <__malloc_unlock>
  8017dc:	003eeb06 	br	80138c <_realloc_r+0xd8>
  8017e0:	20800117 	ldw	r2,4(r4)
  8017e4:	00ffff04 	movi	r3,-4
  8017e8:	800f883a 	mov	r7,r16
  8017ec:	10c4703a 	and	r2,r2,r3
  8017f0:	98a9883a 	add	r20,r19,r2
  8017f4:	84000204 	addi	r16,r16,8
  8017f8:	003ecf06 	br	801338 <_realloc_r+0x84>
  8017fc:	900b883a 	mov	r5,r18
  801800:	8009883a 	mov	r4,r16
  801804:	08011d40 	call	8011d4 <memmove>
  801808:	dd000017 	ldw	r20,0(sp)
  80180c:	b80f883a 	mov	r7,r23
  801810:	003ec906 	br	801338 <_realloc_r+0x84>
  801814:	900b883a 	mov	r5,r18
  801818:	8009883a 	mov	r4,r16
  80181c:	08011d40 	call	8011d4 <memmove>
  801820:	b80f883a 	mov	r7,r23
  801824:	003ec406 	br	801338 <_realloc_r+0x84>
  801828:	90c00417 	ldw	r3,16(r18)
  80182c:	89400604 	addi	r5,r17,24
  801830:	91000604 	addi	r4,r18,24
  801834:	88c00415 	stw	r3,16(r17)
  801838:	90800517 	ldw	r2,20(r18)
  80183c:	88800515 	stw	r2,20(r17)
  801840:	003f6806 	br	8015e4 <_realloc_r+0x330>
  801844:	900b883a 	mov	r5,r18
  801848:	8809883a 	mov	r4,r17
  80184c:	08011d40 	call	8011d4 <memmove>
  801850:	003fd406 	br	8017a4 <_realloc_r+0x4f0>
  801854:	90c00417 	ldw	r3,16(r18)
  801858:	91000604 	addi	r4,r18,24
  80185c:	ba000804 	addi	r8,r23,32
  801860:	b8c00615 	stw	r3,24(r23)
  801864:	90800517 	ldw	r2,20(r18)
  801868:	b8800715 	stw	r2,28(r23)
  80186c:	003f1206 	br	8014b8 <_realloc_r+0x204>
  801870:	90c00417 	ldw	r3,16(r18)
  801874:	91000604 	addi	r4,r18,24
  801878:	ba000804 	addi	r8,r23,32
  80187c:	b8c00615 	stw	r3,24(r23)
  801880:	90800517 	ldw	r2,20(r18)
  801884:	b8800715 	stw	r2,28(r23)
  801888:	003f3206 	br	801554 <_realloc_r+0x2a0>
  80188c:	90c00417 	ldw	r3,16(r18)
  801890:	91000604 	addi	r4,r18,24
  801894:	b9c00804 	addi	r7,r23,32
  801898:	b8c00615 	stw	r3,24(r23)
  80189c:	90800517 	ldw	r2,20(r18)
  8018a0:	b8800715 	stw	r2,28(r23)
  8018a4:	003fb906 	br	80178c <_realloc_r+0x4d8>

008018a8 <_sbrk_r>:
  8018a8:	defffd04 	addi	sp,sp,-12
  8018ac:	dc000015 	stw	r16,0(sp)
  8018b0:	04002074 	movhi	r16,129
  8018b4:	84098604 	addi	r16,r16,9752
  8018b8:	dc400115 	stw	r17,4(sp)
  8018bc:	80000015 	stw	zero,0(r16)
  8018c0:	2023883a 	mov	r17,r4
  8018c4:	2809883a 	mov	r4,r5
  8018c8:	dfc00215 	stw	ra,8(sp)
  8018cc:	08035b40 	call	8035b4 <sbrk>
  8018d0:	1007883a 	mov	r3,r2
  8018d4:	00bfffc4 	movi	r2,-1
  8018d8:	18800626 	beq	r3,r2,8018f4 <_sbrk_r+0x4c>
  8018dc:	1805883a 	mov	r2,r3
  8018e0:	dfc00217 	ldw	ra,8(sp)
  8018e4:	dc400117 	ldw	r17,4(sp)
  8018e8:	dc000017 	ldw	r16,0(sp)
  8018ec:	dec00304 	addi	sp,sp,12
  8018f0:	f800283a 	ret
  8018f4:	80800017 	ldw	r2,0(r16)
  8018f8:	103ff826 	beq	r2,zero,8018dc <_sbrk_r+0x34>
  8018fc:	88800015 	stw	r2,0(r17)
  801900:	1805883a 	mov	r2,r3
  801904:	dfc00217 	ldw	ra,8(sp)
  801908:	dc400117 	ldw	r17,4(sp)
  80190c:	dc000017 	ldw	r16,0(sp)
  801910:	dec00304 	addi	sp,sp,12
  801914:	f800283a 	ret

00801918 <__swsetup_r>:
  801918:	00802074 	movhi	r2,129
  80191c:	10828b04 	addi	r2,r2,2604
  801920:	10c00017 	ldw	r3,0(r2)
  801924:	defffd04 	addi	sp,sp,-12
  801928:	dc400115 	stw	r17,4(sp)
  80192c:	dc000015 	stw	r16,0(sp)
  801930:	dfc00215 	stw	ra,8(sp)
  801934:	2023883a 	mov	r17,r4
  801938:	2821883a 	mov	r16,r5
  80193c:	18000226 	beq	r3,zero,801948 <__swsetup_r+0x30>
  801940:	18800e17 	ldw	r2,56(r3)
  801944:	10001f26 	beq	r2,zero,8019c4 <__swsetup_r+0xac>
  801948:	8100030b 	ldhu	r4,12(r16)
  80194c:	2080020c 	andi	r2,r4,8
  801950:	10002826 	beq	r2,zero,8019f4 <__swsetup_r+0xdc>
  801954:	81400417 	ldw	r5,16(r16)
  801958:	28001d26 	beq	r5,zero,8019d0 <__swsetup_r+0xb8>
  80195c:	2080004c 	andi	r2,r4,1
  801960:	1005003a 	cmpeq	r2,r2,zero
  801964:	10000b26 	beq	r2,zero,801994 <__swsetup_r+0x7c>
  801968:	2080008c 	andi	r2,r4,2
  80196c:	10001226 	beq	r2,zero,8019b8 <__swsetup_r+0xa0>
  801970:	0005883a 	mov	r2,zero
  801974:	80800215 	stw	r2,8(r16)
  801978:	28000b26 	beq	r5,zero,8019a8 <__swsetup_r+0x90>
  80197c:	0005883a 	mov	r2,zero
  801980:	dfc00217 	ldw	ra,8(sp)
  801984:	dc400117 	ldw	r17,4(sp)
  801988:	dc000017 	ldw	r16,0(sp)
  80198c:	dec00304 	addi	sp,sp,12
  801990:	f800283a 	ret
  801994:	80800517 	ldw	r2,20(r16)
  801998:	80000215 	stw	zero,8(r16)
  80199c:	0085c83a 	sub	r2,zero,r2
  8019a0:	80800615 	stw	r2,24(r16)
  8019a4:	283ff51e 	bne	r5,zero,80197c <__swsetup_r+0x64>
  8019a8:	2080200c 	andi	r2,r4,128
  8019ac:	103ff326 	beq	r2,zero,80197c <__swsetup_r+0x64>
  8019b0:	00bfffc4 	movi	r2,-1
  8019b4:	003ff206 	br	801980 <__swsetup_r+0x68>
  8019b8:	80800517 	ldw	r2,20(r16)
  8019bc:	80800215 	stw	r2,8(r16)
  8019c0:	003fed06 	br	801978 <__swsetup_r+0x60>
  8019c4:	1809883a 	mov	r4,r3
  8019c8:	0801cec0 	call	801cec <__sinit>
  8019cc:	003fde06 	br	801948 <__swsetup_r+0x30>
  8019d0:	20c0a00c 	andi	r3,r4,640
  8019d4:	00808004 	movi	r2,512
  8019d8:	18bfe026 	beq	r3,r2,80195c <__swsetup_r+0x44>
  8019dc:	8809883a 	mov	r4,r17
  8019e0:	800b883a 	mov	r5,r16
  8019e4:	08025380 	call	802538 <__smakebuf_r>
  8019e8:	8100030b 	ldhu	r4,12(r16)
  8019ec:	81400417 	ldw	r5,16(r16)
  8019f0:	003fda06 	br	80195c <__swsetup_r+0x44>
  8019f4:	2080040c 	andi	r2,r4,16
  8019f8:	103fed26 	beq	r2,zero,8019b0 <__swsetup_r+0x98>
  8019fc:	2080010c 	andi	r2,r4,4
  801a00:	10001226 	beq	r2,zero,801a4c <__swsetup_r+0x134>
  801a04:	81400c17 	ldw	r5,48(r16)
  801a08:	28000526 	beq	r5,zero,801a20 <__swsetup_r+0x108>
  801a0c:	80801004 	addi	r2,r16,64
  801a10:	28800226 	beq	r5,r2,801a1c <__swsetup_r+0x104>
  801a14:	8809883a 	mov	r4,r17
  801a18:	08020a40 	call	8020a4 <_free_r>
  801a1c:	80000c15 	stw	zero,48(r16)
  801a20:	8080030b 	ldhu	r2,12(r16)
  801a24:	81400417 	ldw	r5,16(r16)
  801a28:	80000115 	stw	zero,4(r16)
  801a2c:	10bff6cc 	andi	r2,r2,65499
  801a30:	8080030d 	sth	r2,12(r16)
  801a34:	81400015 	stw	r5,0(r16)
  801a38:	8080030b 	ldhu	r2,12(r16)
  801a3c:	10800214 	ori	r2,r2,8
  801a40:	113fffcc 	andi	r4,r2,65535
  801a44:	8080030d 	sth	r2,12(r16)
  801a48:	003fc306 	br	801958 <__swsetup_r+0x40>
  801a4c:	81400417 	ldw	r5,16(r16)
  801a50:	003ff906 	br	801a38 <__swsetup_r+0x120>

00801a54 <_fflush_r>:
  801a54:	defffb04 	addi	sp,sp,-20
  801a58:	dcc00315 	stw	r19,12(sp)
  801a5c:	dc800215 	stw	r18,8(sp)
  801a60:	dfc00415 	stw	ra,16(sp)
  801a64:	dc400115 	stw	r17,4(sp)
  801a68:	dc000015 	stw	r16,0(sp)
  801a6c:	2027883a 	mov	r19,r4
  801a70:	2825883a 	mov	r18,r5
  801a74:	20000226 	beq	r4,zero,801a80 <_fflush_r+0x2c>
  801a78:	20800e17 	ldw	r2,56(r4)
  801a7c:	10005626 	beq	r2,zero,801bd8 <_fflush_r+0x184>
  801a80:	9100030b 	ldhu	r4,12(r18)
  801a84:	20ffffcc 	andi	r3,r4,65535
  801a88:	18e0001c 	xori	r3,r3,32768
  801a8c:	18e00004 	addi	r3,r3,-32768
  801a90:	1880020c 	andi	r2,r3,8
  801a94:	1000261e 	bne	r2,zero,801b30 <_fflush_r+0xdc>
  801a98:	90c00117 	ldw	r3,4(r18)
  801a9c:	20820014 	ori	r2,r4,2048
  801aa0:	9080030d 	sth	r2,12(r18)
  801aa4:	1009883a 	mov	r4,r2
  801aa8:	00c0400e 	bge	zero,r3,801bac <_fflush_r+0x158>
  801aac:	92000a17 	ldw	r8,40(r18)
  801ab0:	40004026 	beq	r8,zero,801bb4 <_fflush_r+0x160>
  801ab4:	2084000c 	andi	r2,r4,4096
  801ab8:	10005326 	beq	r2,zero,801c08 <_fflush_r+0x1b4>
  801abc:	94001417 	ldw	r16,80(r18)
  801ac0:	9080030b 	ldhu	r2,12(r18)
  801ac4:	1080010c 	andi	r2,r2,4
  801ac8:	1000481e 	bne	r2,zero,801bec <_fflush_r+0x198>
  801acc:	91400717 	ldw	r5,28(r18)
  801ad0:	9809883a 	mov	r4,r19
  801ad4:	800d883a 	mov	r6,r16
  801ad8:	000f883a 	mov	r7,zero
  801adc:	403ee83a 	callr	r8
  801ae0:	8080261e 	bne	r16,r2,801b7c <_fflush_r+0x128>
  801ae4:	9080030b 	ldhu	r2,12(r18)
  801ae8:	91000417 	ldw	r4,16(r18)
  801aec:	90000115 	stw	zero,4(r18)
  801af0:	10bdffcc 	andi	r2,r2,63487
  801af4:	10ffffcc 	andi	r3,r2,65535
  801af8:	18c4000c 	andi	r3,r3,4096
  801afc:	9080030d 	sth	r2,12(r18)
  801b00:	91000015 	stw	r4,0(r18)
  801b04:	18002b26 	beq	r3,zero,801bb4 <_fflush_r+0x160>
  801b08:	0007883a 	mov	r3,zero
  801b0c:	1805883a 	mov	r2,r3
  801b10:	94001415 	stw	r16,80(r18)
  801b14:	dfc00417 	ldw	ra,16(sp)
  801b18:	dcc00317 	ldw	r19,12(sp)
  801b1c:	dc800217 	ldw	r18,8(sp)
  801b20:	dc400117 	ldw	r17,4(sp)
  801b24:	dc000017 	ldw	r16,0(sp)
  801b28:	dec00504 	addi	sp,sp,20
  801b2c:	f800283a 	ret
  801b30:	94400417 	ldw	r17,16(r18)
  801b34:	88001f26 	beq	r17,zero,801bb4 <_fflush_r+0x160>
  801b38:	90800017 	ldw	r2,0(r18)
  801b3c:	18c000cc 	andi	r3,r3,3
  801b40:	94400015 	stw	r17,0(r18)
  801b44:	1461c83a 	sub	r16,r2,r17
  801b48:	18002526 	beq	r3,zero,801be0 <_fflush_r+0x18c>
  801b4c:	0005883a 	mov	r2,zero
  801b50:	90800215 	stw	r2,8(r18)
  801b54:	0400170e 	bge	zero,r16,801bb4 <_fflush_r+0x160>
  801b58:	90c00917 	ldw	r3,36(r18)
  801b5c:	91400717 	ldw	r5,28(r18)
  801b60:	880d883a 	mov	r6,r17
  801b64:	800f883a 	mov	r7,r16
  801b68:	9809883a 	mov	r4,r19
  801b6c:	183ee83a 	callr	r3
  801b70:	88a3883a 	add	r17,r17,r2
  801b74:	80a1c83a 	sub	r16,r16,r2
  801b78:	00bff616 	blt	zero,r2,801b54 <_fflush_r+0x100>
  801b7c:	9080030b 	ldhu	r2,12(r18)
  801b80:	00ffffc4 	movi	r3,-1
  801b84:	10801014 	ori	r2,r2,64
  801b88:	9080030d 	sth	r2,12(r18)
  801b8c:	1805883a 	mov	r2,r3
  801b90:	dfc00417 	ldw	ra,16(sp)
  801b94:	dcc00317 	ldw	r19,12(sp)
  801b98:	dc800217 	ldw	r18,8(sp)
  801b9c:	dc400117 	ldw	r17,4(sp)
  801ba0:	dc000017 	ldw	r16,0(sp)
  801ba4:	dec00504 	addi	sp,sp,20
  801ba8:	f800283a 	ret
  801bac:	90800f17 	ldw	r2,60(r18)
  801bb0:	00bfbe16 	blt	zero,r2,801aac <_fflush_r+0x58>
  801bb4:	0007883a 	mov	r3,zero
  801bb8:	1805883a 	mov	r2,r3
  801bbc:	dfc00417 	ldw	ra,16(sp)
  801bc0:	dcc00317 	ldw	r19,12(sp)
  801bc4:	dc800217 	ldw	r18,8(sp)
  801bc8:	dc400117 	ldw	r17,4(sp)
  801bcc:	dc000017 	ldw	r16,0(sp)
  801bd0:	dec00504 	addi	sp,sp,20
  801bd4:	f800283a 	ret
  801bd8:	0801cec0 	call	801cec <__sinit>
  801bdc:	003fa806 	br	801a80 <_fflush_r+0x2c>
  801be0:	90800517 	ldw	r2,20(r18)
  801be4:	90800215 	stw	r2,8(r18)
  801be8:	003fda06 	br	801b54 <_fflush_r+0x100>
  801bec:	90800117 	ldw	r2,4(r18)
  801bf0:	90c00c17 	ldw	r3,48(r18)
  801bf4:	80a1c83a 	sub	r16,r16,r2
  801bf8:	183fb426 	beq	r3,zero,801acc <_fflush_r+0x78>
  801bfc:	90800f17 	ldw	r2,60(r18)
  801c00:	80a1c83a 	sub	r16,r16,r2
  801c04:	003fb106 	br	801acc <_fflush_r+0x78>
  801c08:	91400717 	ldw	r5,28(r18)
  801c0c:	9809883a 	mov	r4,r19
  801c10:	000d883a 	mov	r6,zero
  801c14:	01c00044 	movi	r7,1
  801c18:	403ee83a 	callr	r8
  801c1c:	1021883a 	mov	r16,r2
  801c20:	00bfffc4 	movi	r2,-1
  801c24:	80800226 	beq	r16,r2,801c30 <_fflush_r+0x1dc>
  801c28:	92000a17 	ldw	r8,40(r18)
  801c2c:	003fa406 	br	801ac0 <_fflush_r+0x6c>
  801c30:	98c00017 	ldw	r3,0(r19)
  801c34:	00800744 	movi	r2,29
  801c38:	18bfde26 	beq	r3,r2,801bb4 <_fflush_r+0x160>
  801c3c:	9080030b 	ldhu	r2,12(r18)
  801c40:	8007883a 	mov	r3,r16
  801c44:	10801014 	ori	r2,r2,64
  801c48:	9080030d 	sth	r2,12(r18)
  801c4c:	003fcf06 	br	801b8c <_fflush_r+0x138>

00801c50 <fflush>:
  801c50:	01402034 	movhi	r5,128
  801c54:	29469504 	addi	r5,r5,6740
  801c58:	2007883a 	mov	r3,r4
  801c5c:	20000526 	beq	r4,zero,801c74 <fflush+0x24>
  801c60:	00802074 	movhi	r2,129
  801c64:	10828b04 	addi	r2,r2,2604
  801c68:	11000017 	ldw	r4,0(r2)
  801c6c:	180b883a 	mov	r5,r3
  801c70:	0801a541 	jmpi	801a54 <_fflush_r>
  801c74:	00802074 	movhi	r2,129
  801c78:	10828c04 	addi	r2,r2,2608
  801c7c:	11000017 	ldw	r4,0(r2)
  801c80:	08023b81 	jmpi	8023b8 <_fwalk_reent>

00801c84 <std>:
  801c84:	00802034 	movhi	r2,128
  801c88:	1089d904 	addi	r2,r2,10084
  801c8c:	20800b15 	stw	r2,44(r4)
  801c90:	00802034 	movhi	r2,128
  801c94:	108a1404 	addi	r2,r2,10320
  801c98:	20800815 	stw	r2,32(r4)
  801c9c:	00c02034 	movhi	r3,128
  801ca0:	18c9f504 	addi	r3,r3,10196
  801ca4:	00802034 	movhi	r2,128
  801ca8:	1089db04 	addi	r2,r2,10092
  801cac:	2140030d 	sth	r5,12(r4)
  801cb0:	2180038d 	sth	r6,14(r4)
  801cb4:	20c00915 	stw	r3,36(r4)
  801cb8:	20800a15 	stw	r2,40(r4)
  801cbc:	20000015 	stw	zero,0(r4)
  801cc0:	20000115 	stw	zero,4(r4)
  801cc4:	20000215 	stw	zero,8(r4)
  801cc8:	20000415 	stw	zero,16(r4)
  801ccc:	20000515 	stw	zero,20(r4)
  801cd0:	20000615 	stw	zero,24(r4)
  801cd4:	21000715 	stw	r4,28(r4)
  801cd8:	f800283a 	ret

00801cdc <__sfp_lock_acquire>:
  801cdc:	f800283a 	ret

00801ce0 <__sfp_lock_release>:
  801ce0:	f800283a 	ret

00801ce4 <__sinit_lock_acquire>:
  801ce4:	f800283a 	ret

00801ce8 <__sinit_lock_release>:
  801ce8:	f800283a 	ret

00801cec <__sinit>:
  801cec:	20800e17 	ldw	r2,56(r4)
  801cf0:	defffd04 	addi	sp,sp,-12
  801cf4:	dc400115 	stw	r17,4(sp)
  801cf8:	dc000015 	stw	r16,0(sp)
  801cfc:	dfc00215 	stw	ra,8(sp)
  801d00:	04400044 	movi	r17,1
  801d04:	01400104 	movi	r5,4
  801d08:	000d883a 	mov	r6,zero
  801d0c:	2021883a 	mov	r16,r4
  801d10:	2200bb04 	addi	r8,r4,748
  801d14:	200f883a 	mov	r7,r4
  801d18:	10000526 	beq	r2,zero,801d30 <__sinit+0x44>
  801d1c:	dfc00217 	ldw	ra,8(sp)
  801d20:	dc400117 	ldw	r17,4(sp)
  801d24:	dc000017 	ldw	r16,0(sp)
  801d28:	dec00304 	addi	sp,sp,12
  801d2c:	f800283a 	ret
  801d30:	21000117 	ldw	r4,4(r4)
  801d34:	00802034 	movhi	r2,128
  801d38:	10877404 	addi	r2,r2,7632
  801d3c:	00c000c4 	movi	r3,3
  801d40:	80800f15 	stw	r2,60(r16)
  801d44:	80c0b915 	stw	r3,740(r16)
  801d48:	8200ba15 	stw	r8,744(r16)
  801d4c:	84400e15 	stw	r17,56(r16)
  801d50:	8000b815 	stw	zero,736(r16)
  801d54:	0801c840 	call	801c84 <std>
  801d58:	81000217 	ldw	r4,8(r16)
  801d5c:	880d883a 	mov	r6,r17
  801d60:	800f883a 	mov	r7,r16
  801d64:	01400284 	movi	r5,10
  801d68:	0801c840 	call	801c84 <std>
  801d6c:	81000317 	ldw	r4,12(r16)
  801d70:	800f883a 	mov	r7,r16
  801d74:	01400484 	movi	r5,18
  801d78:	01800084 	movi	r6,2
  801d7c:	dfc00217 	ldw	ra,8(sp)
  801d80:	dc400117 	ldw	r17,4(sp)
  801d84:	dc000017 	ldw	r16,0(sp)
  801d88:	dec00304 	addi	sp,sp,12
  801d8c:	0801c841 	jmpi	801c84 <std>

00801d90 <__fp_lock>:
  801d90:	0005883a 	mov	r2,zero
  801d94:	f800283a 	ret

00801d98 <__fp_unlock>:
  801d98:	0005883a 	mov	r2,zero
  801d9c:	f800283a 	ret

00801da0 <__fp_unlock_all>:
  801da0:	00802074 	movhi	r2,129
  801da4:	10828b04 	addi	r2,r2,2604
  801da8:	11000017 	ldw	r4,0(r2)
  801dac:	01402034 	movhi	r5,128
  801db0:	29476604 	addi	r5,r5,7576
  801db4:	08024801 	jmpi	802480 <_fwalk>

00801db8 <__fp_lock_all>:
  801db8:	00802074 	movhi	r2,129
  801dbc:	10828b04 	addi	r2,r2,2604
  801dc0:	11000017 	ldw	r4,0(r2)
  801dc4:	01402034 	movhi	r5,128
  801dc8:	29476404 	addi	r5,r5,7568
  801dcc:	08024801 	jmpi	802480 <_fwalk>

00801dd0 <_cleanup_r>:
  801dd0:	01402034 	movhi	r5,128
  801dd4:	294aaa04 	addi	r5,r5,10920
  801dd8:	08024801 	jmpi	802480 <_fwalk>

00801ddc <_cleanup>:
  801ddc:	00802074 	movhi	r2,129
  801de0:	10828c04 	addi	r2,r2,2608
  801de4:	11000017 	ldw	r4,0(r2)
  801de8:	0801dd01 	jmpi	801dd0 <_cleanup_r>

00801dec <__sfmoreglue>:
  801dec:	defffc04 	addi	sp,sp,-16
  801df0:	dc000015 	stw	r16,0(sp)
  801df4:	2821883a 	mov	r16,r5
  801df8:	dc400115 	stw	r17,4(sp)
  801dfc:	01401704 	movi	r5,92
  801e00:	2023883a 	mov	r17,r4
  801e04:	8009883a 	mov	r4,r16
  801e08:	dfc00315 	stw	ra,12(sp)
  801e0c:	dcc00215 	stw	r19,8(sp)
  801e10:	0802c900 	call	802c90 <__mulsi3>
  801e14:	11400304 	addi	r5,r2,12
  801e18:	8809883a 	mov	r4,r17
  801e1c:	1027883a 	mov	r19,r2
  801e20:	08009100 	call	800910 <_malloc_r>
  801e24:	10c00304 	addi	r3,r2,12
  801e28:	1023883a 	mov	r17,r2
  801e2c:	1809883a 	mov	r4,r3
  801e30:	980d883a 	mov	r6,r19
  801e34:	000b883a 	mov	r5,zero
  801e38:	10000b26 	beq	r2,zero,801e68 <__sfmoreglue+0x7c>
  801e3c:	14000115 	stw	r16,4(r2)
  801e40:	10c00215 	stw	r3,8(r2)
  801e44:	10000015 	stw	zero,0(r2)
  801e48:	08026cc0 	call	8026cc <memset>
  801e4c:	8805883a 	mov	r2,r17
  801e50:	dfc00317 	ldw	ra,12(sp)
  801e54:	dcc00217 	ldw	r19,8(sp)
  801e58:	dc400117 	ldw	r17,4(sp)
  801e5c:	dc000017 	ldw	r16,0(sp)
  801e60:	dec00404 	addi	sp,sp,16
  801e64:	f800283a 	ret
  801e68:	0023883a 	mov	r17,zero
  801e6c:	8805883a 	mov	r2,r17
  801e70:	dfc00317 	ldw	ra,12(sp)
  801e74:	dcc00217 	ldw	r19,8(sp)
  801e78:	dc400117 	ldw	r17,4(sp)
  801e7c:	dc000017 	ldw	r16,0(sp)
  801e80:	dec00404 	addi	sp,sp,16
  801e84:	f800283a 	ret

00801e88 <__sfp>:
  801e88:	defffd04 	addi	sp,sp,-12
  801e8c:	00802074 	movhi	r2,129
  801e90:	10828c04 	addi	r2,r2,2608
  801e94:	dc000015 	stw	r16,0(sp)
  801e98:	14000017 	ldw	r16,0(r2)
  801e9c:	dc400115 	stw	r17,4(sp)
  801ea0:	dfc00215 	stw	ra,8(sp)
  801ea4:	80800e17 	ldw	r2,56(r16)
  801ea8:	2023883a 	mov	r17,r4
  801eac:	10002626 	beq	r2,zero,801f48 <__sfp+0xc0>
  801eb0:	8400b804 	addi	r16,r16,736
  801eb4:	80800117 	ldw	r2,4(r16)
  801eb8:	81000217 	ldw	r4,8(r16)
  801ebc:	10ffffc4 	addi	r3,r2,-1
  801ec0:	18000916 	blt	r3,zero,801ee8 <__sfp+0x60>
  801ec4:	2080030f 	ldh	r2,12(r4)
  801ec8:	10000b26 	beq	r2,zero,801ef8 <__sfp+0x70>
  801ecc:	017fffc4 	movi	r5,-1
  801ed0:	00000206 	br	801edc <__sfp+0x54>
  801ed4:	2080030f 	ldh	r2,12(r4)
  801ed8:	10000726 	beq	r2,zero,801ef8 <__sfp+0x70>
  801edc:	18ffffc4 	addi	r3,r3,-1
  801ee0:	21001704 	addi	r4,r4,92
  801ee4:	197ffb1e 	bne	r3,r5,801ed4 <__sfp+0x4c>
  801ee8:	80800017 	ldw	r2,0(r16)
  801eec:	10001926 	beq	r2,zero,801f54 <__sfp+0xcc>
  801ef0:	1021883a 	mov	r16,r2
  801ef4:	003fef06 	br	801eb4 <__sfp+0x2c>
  801ef8:	00bfffc4 	movi	r2,-1
  801efc:	00c00044 	movi	r3,1
  801f00:	2080038d 	sth	r2,14(r4)
  801f04:	20c0030d 	sth	r3,12(r4)
  801f08:	20000015 	stw	zero,0(r4)
  801f0c:	20000215 	stw	zero,8(r4)
  801f10:	20000115 	stw	zero,4(r4)
  801f14:	20000415 	stw	zero,16(r4)
  801f18:	20000515 	stw	zero,20(r4)
  801f1c:	20000615 	stw	zero,24(r4)
  801f20:	20000c15 	stw	zero,48(r4)
  801f24:	20000d15 	stw	zero,52(r4)
  801f28:	20001115 	stw	zero,68(r4)
  801f2c:	20001215 	stw	zero,72(r4)
  801f30:	2005883a 	mov	r2,r4
  801f34:	dfc00217 	ldw	ra,8(sp)
  801f38:	dc400117 	ldw	r17,4(sp)
  801f3c:	dc000017 	ldw	r16,0(sp)
  801f40:	dec00304 	addi	sp,sp,12
  801f44:	f800283a 	ret
  801f48:	8009883a 	mov	r4,r16
  801f4c:	0801cec0 	call	801cec <__sinit>
  801f50:	003fd706 	br	801eb0 <__sfp+0x28>
  801f54:	8809883a 	mov	r4,r17
  801f58:	01400104 	movi	r5,4
  801f5c:	0801dec0 	call	801dec <__sfmoreglue>
  801f60:	80800015 	stw	r2,0(r16)
  801f64:	103fe21e 	bne	r2,zero,801ef0 <__sfp+0x68>
  801f68:	00800304 	movi	r2,12
  801f6c:	0009883a 	mov	r4,zero
  801f70:	88800015 	stw	r2,0(r17)
  801f74:	003fee06 	br	801f30 <__sfp+0xa8>

00801f78 <_malloc_trim_r>:
  801f78:	defffb04 	addi	sp,sp,-20
  801f7c:	dcc00315 	stw	r19,12(sp)
  801f80:	04c02074 	movhi	r19,129
  801f84:	9cfcee04 	addi	r19,r19,-3144
  801f88:	dc800215 	stw	r18,8(sp)
  801f8c:	dc400115 	stw	r17,4(sp)
  801f90:	dc000015 	stw	r16,0(sp)
  801f94:	2823883a 	mov	r17,r5
  801f98:	2025883a 	mov	r18,r4
  801f9c:	dfc00415 	stw	ra,16(sp)
  801fa0:	08038fc0 	call	8038fc <__malloc_lock>
  801fa4:	98800217 	ldw	r2,8(r19)
  801fa8:	9009883a 	mov	r4,r18
  801fac:	000b883a 	mov	r5,zero
  801fb0:	10c00117 	ldw	r3,4(r2)
  801fb4:	00bfff04 	movi	r2,-4
  801fb8:	18a0703a 	and	r16,r3,r2
  801fbc:	8463c83a 	sub	r17,r16,r17
  801fc0:	8c43fbc4 	addi	r17,r17,4079
  801fc4:	8822d33a 	srli	r17,r17,12
  801fc8:	0083ffc4 	movi	r2,4095
  801fcc:	8c7fffc4 	addi	r17,r17,-1
  801fd0:	8822933a 	slli	r17,r17,12
  801fd4:	1440060e 	bge	r2,r17,801ff0 <_malloc_trim_r+0x78>
  801fd8:	08018a80 	call	8018a8 <_sbrk_r>
  801fdc:	98c00217 	ldw	r3,8(r19)
  801fe0:	9009883a 	mov	r4,r18
  801fe4:	044bc83a 	sub	r5,zero,r17
  801fe8:	80c7883a 	add	r3,r16,r3
  801fec:	10c00926 	beq	r2,r3,802014 <_malloc_trim_r+0x9c>
  801ff0:	0803a040 	call	803a04 <__malloc_unlock>
  801ff4:	0005883a 	mov	r2,zero
  801ff8:	dfc00417 	ldw	ra,16(sp)
  801ffc:	dcc00317 	ldw	r19,12(sp)
  802000:	dc800217 	ldw	r18,8(sp)
  802004:	dc400117 	ldw	r17,4(sp)
  802008:	dc000017 	ldw	r16,0(sp)
  80200c:	dec00504 	addi	sp,sp,20
  802010:	f800283a 	ret
  802014:	9009883a 	mov	r4,r18
  802018:	08018a80 	call	8018a8 <_sbrk_r>
  80201c:	844dc83a 	sub	r6,r16,r17
  802020:	00ffffc4 	movi	r3,-1
  802024:	9009883a 	mov	r4,r18
  802028:	000b883a 	mov	r5,zero
  80202c:	01c02074 	movhi	r7,129
  802030:	39c9a604 	addi	r7,r7,9880
  802034:	31800054 	ori	r6,r6,1
  802038:	10c00926 	beq	r2,r3,802060 <_malloc_trim_r+0xe8>
  80203c:	38800017 	ldw	r2,0(r7)
  802040:	98c00217 	ldw	r3,8(r19)
  802044:	9009883a 	mov	r4,r18
  802048:	1445c83a 	sub	r2,r2,r17
  80204c:	38800015 	stw	r2,0(r7)
  802050:	19800115 	stw	r6,4(r3)
  802054:	0803a040 	call	803a04 <__malloc_unlock>
  802058:	00800044 	movi	r2,1
  80205c:	003fe606 	br	801ff8 <_malloc_trim_r+0x80>
  802060:	08018a80 	call	8018a8 <_sbrk_r>
  802064:	99800217 	ldw	r6,8(r19)
  802068:	100f883a 	mov	r7,r2
  80206c:	9009883a 	mov	r4,r18
  802070:	1187c83a 	sub	r3,r2,r6
  802074:	008003c4 	movi	r2,15
  802078:	19400054 	ori	r5,r3,1
  80207c:	10ffdc0e 	bge	r2,r3,801ff0 <_malloc_trim_r+0x78>
  802080:	00802074 	movhi	r2,129
  802084:	10828e04 	addi	r2,r2,2616
  802088:	10c00017 	ldw	r3,0(r2)
  80208c:	00802074 	movhi	r2,129
  802090:	1089a604 	addi	r2,r2,9880
  802094:	31400115 	stw	r5,4(r6)
  802098:	38c7c83a 	sub	r3,r7,r3
  80209c:	10c00015 	stw	r3,0(r2)
  8020a0:	003fd306 	br	801ff0 <_malloc_trim_r+0x78>

008020a4 <_free_r>:
  8020a4:	defffd04 	addi	sp,sp,-12
  8020a8:	dc400115 	stw	r17,4(sp)
  8020ac:	dc000015 	stw	r16,0(sp)
  8020b0:	dfc00215 	stw	ra,8(sp)
  8020b4:	2821883a 	mov	r16,r5
  8020b8:	2023883a 	mov	r17,r4
  8020bc:	28005a26 	beq	r5,zero,802228 <_free_r+0x184>
  8020c0:	08038fc0 	call	8038fc <__malloc_lock>
  8020c4:	823ffe04 	addi	r8,r16,-8
  8020c8:	41400117 	ldw	r5,4(r8)
  8020cc:	00bfff84 	movi	r2,-2
  8020d0:	02802074 	movhi	r10,129
  8020d4:	52bcee04 	addi	r10,r10,-3144
  8020d8:	288e703a 	and	r7,r5,r2
  8020dc:	41cd883a 	add	r6,r8,r7
  8020e0:	30c00117 	ldw	r3,4(r6)
  8020e4:	51000217 	ldw	r4,8(r10)
  8020e8:	00bfff04 	movi	r2,-4
  8020ec:	1892703a 	and	r9,r3,r2
  8020f0:	5017883a 	mov	r11,r10
  8020f4:	31006726 	beq	r6,r4,802294 <_free_r+0x1f0>
  8020f8:	2880004c 	andi	r2,r5,1
  8020fc:	1005003a 	cmpeq	r2,r2,zero
  802100:	32400115 	stw	r9,4(r6)
  802104:	10001a1e 	bne	r2,zero,802170 <_free_r+0xcc>
  802108:	000b883a 	mov	r5,zero
  80210c:	3247883a 	add	r3,r6,r9
  802110:	18800117 	ldw	r2,4(r3)
  802114:	1080004c 	andi	r2,r2,1
  802118:	1000231e 	bne	r2,zero,8021a8 <_free_r+0x104>
  80211c:	280ac03a 	cmpne	r5,r5,zero
  802120:	3a4f883a 	add	r7,r7,r9
  802124:	2800451e 	bne	r5,zero,80223c <_free_r+0x198>
  802128:	31000217 	ldw	r4,8(r6)
  80212c:	00802074 	movhi	r2,129
  802130:	10bcf004 	addi	r2,r2,-3136
  802134:	20807b26 	beq	r4,r2,802324 <_free_r+0x280>
  802138:	30800317 	ldw	r2,12(r6)
  80213c:	3a07883a 	add	r3,r7,r8
  802140:	19c00015 	stw	r7,0(r3)
  802144:	11000215 	stw	r4,8(r2)
  802148:	20800315 	stw	r2,12(r4)
  80214c:	38800054 	ori	r2,r7,1
  802150:	40800115 	stw	r2,4(r8)
  802154:	28001a26 	beq	r5,zero,8021c0 <_free_r+0x11c>
  802158:	8809883a 	mov	r4,r17
  80215c:	dfc00217 	ldw	ra,8(sp)
  802160:	dc400117 	ldw	r17,4(sp)
  802164:	dc000017 	ldw	r16,0(sp)
  802168:	dec00304 	addi	sp,sp,12
  80216c:	0803a041 	jmpi	803a04 <__malloc_unlock>
  802170:	80bffe17 	ldw	r2,-8(r16)
  802174:	50c00204 	addi	r3,r10,8
  802178:	4091c83a 	sub	r8,r8,r2
  80217c:	41000217 	ldw	r4,8(r8)
  802180:	388f883a 	add	r7,r7,r2
  802184:	20c06126 	beq	r4,r3,80230c <_free_r+0x268>
  802188:	40800317 	ldw	r2,12(r8)
  80218c:	3247883a 	add	r3,r6,r9
  802190:	000b883a 	mov	r5,zero
  802194:	11000215 	stw	r4,8(r2)
  802198:	20800315 	stw	r2,12(r4)
  80219c:	18800117 	ldw	r2,4(r3)
  8021a0:	1080004c 	andi	r2,r2,1
  8021a4:	103fdd26 	beq	r2,zero,80211c <_free_r+0x78>
  8021a8:	38800054 	ori	r2,r7,1
  8021ac:	3a07883a 	add	r3,r7,r8
  8021b0:	280ac03a 	cmpne	r5,r5,zero
  8021b4:	40800115 	stw	r2,4(r8)
  8021b8:	19c00015 	stw	r7,0(r3)
  8021bc:	283fe61e 	bne	r5,zero,802158 <_free_r+0xb4>
  8021c0:	00807fc4 	movi	r2,511
  8021c4:	11c01f2e 	bgeu	r2,r7,802244 <_free_r+0x1a0>
  8021c8:	3806d27a 	srli	r3,r7,9
  8021cc:	1800481e 	bne	r3,zero,8022f0 <_free_r+0x24c>
  8021d0:	3804d0fa 	srli	r2,r7,3
  8021d4:	100690fa 	slli	r3,r2,3
  8021d8:	1acd883a 	add	r6,r3,r11
  8021dc:	31400217 	ldw	r5,8(r6)
  8021e0:	31405926 	beq	r6,r5,802348 <_free_r+0x2a4>
  8021e4:	28800117 	ldw	r2,4(r5)
  8021e8:	00ffff04 	movi	r3,-4
  8021ec:	10c4703a 	and	r2,r2,r3
  8021f0:	3880022e 	bgeu	r7,r2,8021fc <_free_r+0x158>
  8021f4:	29400217 	ldw	r5,8(r5)
  8021f8:	317ffa1e 	bne	r6,r5,8021e4 <_free_r+0x140>
  8021fc:	29800317 	ldw	r6,12(r5)
  802200:	41800315 	stw	r6,12(r8)
  802204:	41400215 	stw	r5,8(r8)
  802208:	8809883a 	mov	r4,r17
  80220c:	2a000315 	stw	r8,12(r5)
  802210:	32000215 	stw	r8,8(r6)
  802214:	dfc00217 	ldw	ra,8(sp)
  802218:	dc400117 	ldw	r17,4(sp)
  80221c:	dc000017 	ldw	r16,0(sp)
  802220:	dec00304 	addi	sp,sp,12
  802224:	0803a041 	jmpi	803a04 <__malloc_unlock>
  802228:	dfc00217 	ldw	ra,8(sp)
  80222c:	dc400117 	ldw	r17,4(sp)
  802230:	dc000017 	ldw	r16,0(sp)
  802234:	dec00304 	addi	sp,sp,12
  802238:	f800283a 	ret
  80223c:	31000217 	ldw	r4,8(r6)
  802240:	003fbd06 	br	802138 <_free_r+0x94>
  802244:	3806d0fa 	srli	r3,r7,3
  802248:	00800044 	movi	r2,1
  80224c:	51400117 	ldw	r5,4(r10)
  802250:	180890fa 	slli	r4,r3,3
  802254:	1807d0ba 	srai	r3,r3,2
  802258:	22c9883a 	add	r4,r4,r11
  80225c:	21800217 	ldw	r6,8(r4)
  802260:	10c4983a 	sll	r2,r2,r3
  802264:	41000315 	stw	r4,12(r8)
  802268:	41800215 	stw	r6,8(r8)
  80226c:	288ab03a 	or	r5,r5,r2
  802270:	22000215 	stw	r8,8(r4)
  802274:	8809883a 	mov	r4,r17
  802278:	51400115 	stw	r5,4(r10)
  80227c:	32000315 	stw	r8,12(r6)
  802280:	dfc00217 	ldw	ra,8(sp)
  802284:	dc400117 	ldw	r17,4(sp)
  802288:	dc000017 	ldw	r16,0(sp)
  80228c:	dec00304 	addi	sp,sp,12
  802290:	0803a041 	jmpi	803a04 <__malloc_unlock>
  802294:	2880004c 	andi	r2,r5,1
  802298:	3a4d883a 	add	r6,r7,r9
  80229c:	1000071e 	bne	r2,zero,8022bc <_free_r+0x218>
  8022a0:	80bffe17 	ldw	r2,-8(r16)
  8022a4:	4091c83a 	sub	r8,r8,r2
  8022a8:	41000317 	ldw	r4,12(r8)
  8022ac:	40c00217 	ldw	r3,8(r8)
  8022b0:	308d883a 	add	r6,r6,r2
  8022b4:	20c00215 	stw	r3,8(r4)
  8022b8:	19000315 	stw	r4,12(r3)
  8022bc:	00802074 	movhi	r2,129
  8022c0:	10828d04 	addi	r2,r2,2612
  8022c4:	11000017 	ldw	r4,0(r2)
  8022c8:	30c00054 	ori	r3,r6,1
  8022cc:	52000215 	stw	r8,8(r10)
  8022d0:	40c00115 	stw	r3,4(r8)
  8022d4:	313fa036 	bltu	r6,r4,802158 <_free_r+0xb4>
  8022d8:	00802074 	movhi	r2,129
  8022dc:	10898304 	addi	r2,r2,9740
  8022e0:	11400017 	ldw	r5,0(r2)
  8022e4:	8809883a 	mov	r4,r17
  8022e8:	0801f780 	call	801f78 <_malloc_trim_r>
  8022ec:	003f9a06 	br	802158 <_free_r+0xb4>
  8022f0:	00800104 	movi	r2,4
  8022f4:	10c0072e 	bgeu	r2,r3,802314 <_free_r+0x270>
  8022f8:	00800504 	movi	r2,20
  8022fc:	10c01936 	bltu	r2,r3,802364 <_free_r+0x2c0>
  802300:	188016c4 	addi	r2,r3,91
  802304:	100690fa 	slli	r3,r2,3
  802308:	003fb306 	br	8021d8 <_free_r+0x134>
  80230c:	01400044 	movi	r5,1
  802310:	003f7e06 	br	80210c <_free_r+0x68>
  802314:	3804d1ba 	srli	r2,r7,6
  802318:	10800e04 	addi	r2,r2,56
  80231c:	100690fa 	slli	r3,r2,3
  802320:	003fad06 	br	8021d8 <_free_r+0x134>
  802324:	22000315 	stw	r8,12(r4)
  802328:	22000215 	stw	r8,8(r4)
  80232c:	3a05883a 	add	r2,r7,r8
  802330:	38c00054 	ori	r3,r7,1
  802334:	11c00015 	stw	r7,0(r2)
  802338:	41000215 	stw	r4,8(r8)
  80233c:	40c00115 	stw	r3,4(r8)
  802340:	41000315 	stw	r4,12(r8)
  802344:	003f8406 	br	802158 <_free_r+0xb4>
  802348:	1005d0ba 	srai	r2,r2,2
  80234c:	00c00044 	movi	r3,1
  802350:	51000117 	ldw	r4,4(r10)
  802354:	1886983a 	sll	r3,r3,r2
  802358:	20c8b03a 	or	r4,r4,r3
  80235c:	51000115 	stw	r4,4(r10)
  802360:	003fa706 	br	802200 <_free_r+0x15c>
  802364:	00801504 	movi	r2,84
  802368:	10c00436 	bltu	r2,r3,80237c <_free_r+0x2d8>
  80236c:	3804d33a 	srli	r2,r7,12
  802370:	10801b84 	addi	r2,r2,110
  802374:	100690fa 	slli	r3,r2,3
  802378:	003f9706 	br	8021d8 <_free_r+0x134>
  80237c:	00805504 	movi	r2,340
  802380:	10c00436 	bltu	r2,r3,802394 <_free_r+0x2f0>
  802384:	3804d3fa 	srli	r2,r7,15
  802388:	10801dc4 	addi	r2,r2,119
  80238c:	100690fa 	slli	r3,r2,3
  802390:	003f9106 	br	8021d8 <_free_r+0x134>
  802394:	00815504 	movi	r2,1364
  802398:	10c0032e 	bgeu	r2,r3,8023a8 <_free_r+0x304>
  80239c:	00801f84 	movi	r2,126
  8023a0:	00c0fc04 	movi	r3,1008
  8023a4:	003f8c06 	br	8021d8 <_free_r+0x134>
  8023a8:	3804d4ba 	srli	r2,r7,18
  8023ac:	10801f04 	addi	r2,r2,124
  8023b0:	100690fa 	slli	r3,r2,3
  8023b4:	003f8806 	br	8021d8 <_free_r+0x134>

008023b8 <_fwalk_reent>:
  8023b8:	defff704 	addi	sp,sp,-36
  8023bc:	dcc00315 	stw	r19,12(sp)
  8023c0:	24c0b804 	addi	r19,r4,736
  8023c4:	dd800615 	stw	r22,24(sp)
  8023c8:	dd400515 	stw	r21,20(sp)
  8023cc:	dfc00815 	stw	ra,32(sp)
  8023d0:	ddc00715 	stw	r23,28(sp)
  8023d4:	dd000415 	stw	r20,16(sp)
  8023d8:	dc800215 	stw	r18,8(sp)
  8023dc:	dc400115 	stw	r17,4(sp)
  8023e0:	dc000015 	stw	r16,0(sp)
  8023e4:	202b883a 	mov	r21,r4
  8023e8:	282d883a 	mov	r22,r5
  8023ec:	0801cdc0 	call	801cdc <__sfp_lock_acquire>
  8023f0:	98002126 	beq	r19,zero,802478 <_fwalk_reent+0xc0>
  8023f4:	002f883a 	mov	r23,zero
  8023f8:	9c800117 	ldw	r18,4(r19)
  8023fc:	9c000217 	ldw	r16,8(r19)
  802400:	90bfffc4 	addi	r2,r18,-1
  802404:	10000d16 	blt	r2,zero,80243c <_fwalk_reent+0x84>
  802408:	0023883a 	mov	r17,zero
  80240c:	053fffc4 	movi	r20,-1
  802410:	8080030f 	ldh	r2,12(r16)
  802414:	8c400044 	addi	r17,r17,1
  802418:	10000626 	beq	r2,zero,802434 <_fwalk_reent+0x7c>
  80241c:	8080038f 	ldh	r2,14(r16)
  802420:	800b883a 	mov	r5,r16
  802424:	a809883a 	mov	r4,r21
  802428:	15000226 	beq	r2,r20,802434 <_fwalk_reent+0x7c>
  80242c:	b03ee83a 	callr	r22
  802430:	b8aeb03a 	or	r23,r23,r2
  802434:	84001704 	addi	r16,r16,92
  802438:	947ff51e 	bne	r18,r17,802410 <_fwalk_reent+0x58>
  80243c:	9cc00017 	ldw	r19,0(r19)
  802440:	983fed1e 	bne	r19,zero,8023f8 <_fwalk_reent+0x40>
  802444:	0801ce00 	call	801ce0 <__sfp_lock_release>
  802448:	b805883a 	mov	r2,r23
  80244c:	dfc00817 	ldw	ra,32(sp)
  802450:	ddc00717 	ldw	r23,28(sp)
  802454:	dd800617 	ldw	r22,24(sp)
  802458:	dd400517 	ldw	r21,20(sp)
  80245c:	dd000417 	ldw	r20,16(sp)
  802460:	dcc00317 	ldw	r19,12(sp)
  802464:	dc800217 	ldw	r18,8(sp)
  802468:	dc400117 	ldw	r17,4(sp)
  80246c:	dc000017 	ldw	r16,0(sp)
  802470:	dec00904 	addi	sp,sp,36
  802474:	f800283a 	ret
  802478:	002f883a 	mov	r23,zero
  80247c:	003ff106 	br	802444 <_fwalk_reent+0x8c>

00802480 <_fwalk>:
  802480:	defff804 	addi	sp,sp,-32
  802484:	dcc00315 	stw	r19,12(sp)
  802488:	24c0b804 	addi	r19,r4,736
  80248c:	dd400515 	stw	r21,20(sp)
  802490:	dfc00715 	stw	ra,28(sp)
  802494:	dd800615 	stw	r22,24(sp)
  802498:	dd000415 	stw	r20,16(sp)
  80249c:	dc800215 	stw	r18,8(sp)
  8024a0:	dc400115 	stw	r17,4(sp)
  8024a4:	dc000015 	stw	r16,0(sp)
  8024a8:	282b883a 	mov	r21,r5
  8024ac:	0801cdc0 	call	801cdc <__sfp_lock_acquire>
  8024b0:	98001f26 	beq	r19,zero,802530 <_fwalk+0xb0>
  8024b4:	002d883a 	mov	r22,zero
  8024b8:	9c800117 	ldw	r18,4(r19)
  8024bc:	9c000217 	ldw	r16,8(r19)
  8024c0:	90bfffc4 	addi	r2,r18,-1
  8024c4:	10000c16 	blt	r2,zero,8024f8 <_fwalk+0x78>
  8024c8:	0023883a 	mov	r17,zero
  8024cc:	053fffc4 	movi	r20,-1
  8024d0:	8080030f 	ldh	r2,12(r16)
  8024d4:	8c400044 	addi	r17,r17,1
  8024d8:	10000526 	beq	r2,zero,8024f0 <_fwalk+0x70>
  8024dc:	8080038f 	ldh	r2,14(r16)
  8024e0:	8009883a 	mov	r4,r16
  8024e4:	15000226 	beq	r2,r20,8024f0 <_fwalk+0x70>
  8024e8:	a83ee83a 	callr	r21
  8024ec:	b0acb03a 	or	r22,r22,r2
  8024f0:	84001704 	addi	r16,r16,92
  8024f4:	947ff61e 	bne	r18,r17,8024d0 <_fwalk+0x50>
  8024f8:	9cc00017 	ldw	r19,0(r19)
  8024fc:	983fee1e 	bne	r19,zero,8024b8 <_fwalk+0x38>
  802500:	0801ce00 	call	801ce0 <__sfp_lock_release>
  802504:	b005883a 	mov	r2,r22
  802508:	dfc00717 	ldw	ra,28(sp)
  80250c:	dd800617 	ldw	r22,24(sp)
  802510:	dd400517 	ldw	r21,20(sp)
  802514:	dd000417 	ldw	r20,16(sp)
  802518:	dcc00317 	ldw	r19,12(sp)
  80251c:	dc800217 	ldw	r18,8(sp)
  802520:	dc400117 	ldw	r17,4(sp)
  802524:	dc000017 	ldw	r16,0(sp)
  802528:	dec00804 	addi	sp,sp,32
  80252c:	f800283a 	ret
  802530:	002d883a 	mov	r22,zero
  802534:	003ff206 	br	802500 <_fwalk+0x80>

00802538 <__smakebuf_r>:
  802538:	2880030b 	ldhu	r2,12(r5)
  80253c:	deffed04 	addi	sp,sp,-76
  802540:	dc401015 	stw	r17,64(sp)
  802544:	1080008c 	andi	r2,r2,2
  802548:	dc000f15 	stw	r16,60(sp)
  80254c:	dfc01215 	stw	ra,72(sp)
  802550:	dc801115 	stw	r18,68(sp)
  802554:	2821883a 	mov	r16,r5
  802558:	2023883a 	mov	r17,r4
  80255c:	10000b26 	beq	r2,zero,80258c <__smakebuf_r+0x54>
  802560:	28c010c4 	addi	r3,r5,67
  802564:	00800044 	movi	r2,1
  802568:	28800515 	stw	r2,20(r5)
  80256c:	28c00415 	stw	r3,16(r5)
  802570:	28c00015 	stw	r3,0(r5)
  802574:	dfc01217 	ldw	ra,72(sp)
  802578:	dc801117 	ldw	r18,68(sp)
  80257c:	dc401017 	ldw	r17,64(sp)
  802580:	dc000f17 	ldw	r16,60(sp)
  802584:	dec01304 	addi	sp,sp,76
  802588:	f800283a 	ret
  80258c:	2940038f 	ldh	r5,14(r5)
  802590:	28002116 	blt	r5,zero,802618 <__smakebuf_r+0xe0>
  802594:	d80d883a 	mov	r6,sp
  802598:	0802abc0 	call	802abc <_fstat_r>
  80259c:	10001e16 	blt	r2,zero,802618 <__smakebuf_r+0xe0>
  8025a0:	d8800117 	ldw	r2,4(sp)
  8025a4:	00e00014 	movui	r3,32768
  8025a8:	113c000c 	andi	r4,r2,61440
  8025ac:	20c03126 	beq	r4,r3,802674 <__smakebuf_r+0x13c>
  8025b0:	8080030b 	ldhu	r2,12(r16)
  8025b4:	00c80004 	movi	r3,8192
  8025b8:	10820014 	ori	r2,r2,2048
  8025bc:	8080030d 	sth	r2,12(r16)
  8025c0:	20c01e26 	beq	r4,r3,80263c <__smakebuf_r+0x104>
  8025c4:	04810004 	movi	r18,1024
  8025c8:	8809883a 	mov	r4,r17
  8025cc:	900b883a 	mov	r5,r18
  8025d0:	08009100 	call	800910 <_malloc_r>
  8025d4:	1009883a 	mov	r4,r2
  8025d8:	10003126 	beq	r2,zero,8026a0 <__smakebuf_r+0x168>
  8025dc:	80c0030b 	ldhu	r3,12(r16)
  8025e0:	00802034 	movhi	r2,128
  8025e4:	10877404 	addi	r2,r2,7632
  8025e8:	88800f15 	stw	r2,60(r17)
  8025ec:	18c02014 	ori	r3,r3,128
  8025f0:	84800515 	stw	r18,20(r16)
  8025f4:	80c0030d 	sth	r3,12(r16)
  8025f8:	81000415 	stw	r4,16(r16)
  8025fc:	81000015 	stw	r4,0(r16)
  802600:	dfc01217 	ldw	ra,72(sp)
  802604:	dc801117 	ldw	r18,68(sp)
  802608:	dc401017 	ldw	r17,64(sp)
  80260c:	dc000f17 	ldw	r16,60(sp)
  802610:	dec01304 	addi	sp,sp,76
  802614:	f800283a 	ret
  802618:	80c0030b 	ldhu	r3,12(r16)
  80261c:	1880200c 	andi	r2,r3,128
  802620:	10000426 	beq	r2,zero,802634 <__smakebuf_r+0xfc>
  802624:	04801004 	movi	r18,64
  802628:	18820014 	ori	r2,r3,2048
  80262c:	8080030d 	sth	r2,12(r16)
  802630:	003fe506 	br	8025c8 <__smakebuf_r+0x90>
  802634:	04810004 	movi	r18,1024
  802638:	003ffb06 	br	802628 <__smakebuf_r+0xf0>
  80263c:	8140038f 	ldh	r5,14(r16)
  802640:	8809883a 	mov	r4,r17
  802644:	0802b300 	call	802b30 <_isatty_r>
  802648:	103fde26 	beq	r2,zero,8025c4 <__smakebuf_r+0x8c>
  80264c:	8080030b 	ldhu	r2,12(r16)
  802650:	80c010c4 	addi	r3,r16,67
  802654:	04810004 	movi	r18,1024
  802658:	10800054 	ori	r2,r2,1
  80265c:	8080030d 	sth	r2,12(r16)
  802660:	00800044 	movi	r2,1
  802664:	80c00415 	stw	r3,16(r16)
  802668:	80800515 	stw	r2,20(r16)
  80266c:	80c00015 	stw	r3,0(r16)
  802670:	003fd506 	br	8025c8 <__smakebuf_r+0x90>
  802674:	80c00a17 	ldw	r3,40(r16)
  802678:	00802034 	movhi	r2,128
  80267c:	1089db04 	addi	r2,r2,10092
  802680:	18bfcb1e 	bne	r3,r2,8025b0 <__smakebuf_r+0x78>
  802684:	8080030b 	ldhu	r2,12(r16)
  802688:	00c10004 	movi	r3,1024
  80268c:	1825883a 	mov	r18,r3
  802690:	10c4b03a 	or	r2,r2,r3
  802694:	8080030d 	sth	r2,12(r16)
  802698:	80c01315 	stw	r3,76(r16)
  80269c:	003fca06 	br	8025c8 <__smakebuf_r+0x90>
  8026a0:	8100030b 	ldhu	r4,12(r16)
  8026a4:	2080800c 	andi	r2,r4,512
  8026a8:	103fb21e 	bne	r2,zero,802574 <__smakebuf_r+0x3c>
  8026ac:	80c010c4 	addi	r3,r16,67
  8026b0:	21000094 	ori	r4,r4,2
  8026b4:	00800044 	movi	r2,1
  8026b8:	80800515 	stw	r2,20(r16)
  8026bc:	8100030d 	sth	r4,12(r16)
  8026c0:	80c00415 	stw	r3,16(r16)
  8026c4:	80c00015 	stw	r3,0(r16)
  8026c8:	003faa06 	br	802574 <__smakebuf_r+0x3c>

008026cc <memset>:
  8026cc:	008000c4 	movi	r2,3
  8026d0:	29403fcc 	andi	r5,r5,255
  8026d4:	2007883a 	mov	r3,r4
  8026d8:	1180022e 	bgeu	r2,r6,8026e4 <memset+0x18>
  8026dc:	2084703a 	and	r2,r4,r2
  8026e0:	10000826 	beq	r2,zero,802704 <memset+0x38>
  8026e4:	30000526 	beq	r6,zero,8026fc <memset+0x30>
  8026e8:	2805883a 	mov	r2,r5
  8026ec:	30cd883a 	add	r6,r6,r3
  8026f0:	18800005 	stb	r2,0(r3)
  8026f4:	18c00044 	addi	r3,r3,1
  8026f8:	19bffd1e 	bne	r3,r6,8026f0 <memset+0x24>
  8026fc:	2005883a 	mov	r2,r4
  802700:	f800283a 	ret
  802704:	2804923a 	slli	r2,r5,8
  802708:	020003c4 	movi	r8,15
  80270c:	200f883a 	mov	r7,r4
  802710:	2884b03a 	or	r2,r5,r2
  802714:	1006943a 	slli	r3,r2,16
  802718:	10c6b03a 	or	r3,r2,r3
  80271c:	41800a2e 	bgeu	r8,r6,802748 <memset+0x7c>
  802720:	4005883a 	mov	r2,r8
  802724:	31bffc04 	addi	r6,r6,-16
  802728:	38c00015 	stw	r3,0(r7)
  80272c:	38c00115 	stw	r3,4(r7)
  802730:	38c00215 	stw	r3,8(r7)
  802734:	38c00315 	stw	r3,12(r7)
  802738:	39c00404 	addi	r7,r7,16
  80273c:	11bff936 	bltu	r2,r6,802724 <memset+0x58>
  802740:	008000c4 	movi	r2,3
  802744:	1180052e 	bgeu	r2,r6,80275c <memset+0x90>
  802748:	31bfff04 	addi	r6,r6,-4
  80274c:	008000c4 	movi	r2,3
  802750:	38c00015 	stw	r3,0(r7)
  802754:	39c00104 	addi	r7,r7,4
  802758:	11bffb36 	bltu	r2,r6,802748 <memset+0x7c>
  80275c:	3807883a 	mov	r3,r7
  802760:	003fe006 	br	8026e4 <memset+0x18>

00802764 <__sclose>:
  802764:	2940038f 	ldh	r5,14(r5)
  802768:	08029281 	jmpi	802928 <_close_r>

0080276c <__sseek>:
  80276c:	defffe04 	addi	sp,sp,-8
  802770:	dc000015 	stw	r16,0(sp)
  802774:	2821883a 	mov	r16,r5
  802778:	2940038f 	ldh	r5,14(r5)
  80277c:	dfc00115 	stw	ra,4(sp)
  802780:	0802ba00 	call	802ba0 <_lseek_r>
  802784:	1007883a 	mov	r3,r2
  802788:	00bfffc4 	movi	r2,-1
  80278c:	18800926 	beq	r3,r2,8027b4 <__sseek+0x48>
  802790:	8080030b 	ldhu	r2,12(r16)
  802794:	80c01415 	stw	r3,80(r16)
  802798:	10840014 	ori	r2,r2,4096
  80279c:	8080030d 	sth	r2,12(r16)
  8027a0:	1805883a 	mov	r2,r3
  8027a4:	dfc00117 	ldw	ra,4(sp)
  8027a8:	dc000017 	ldw	r16,0(sp)
  8027ac:	dec00204 	addi	sp,sp,8
  8027b0:	f800283a 	ret
  8027b4:	8080030b 	ldhu	r2,12(r16)
  8027b8:	10bbffcc 	andi	r2,r2,61439
  8027bc:	8080030d 	sth	r2,12(r16)
  8027c0:	1805883a 	mov	r2,r3
  8027c4:	dfc00117 	ldw	ra,4(sp)
  8027c8:	dc000017 	ldw	r16,0(sp)
  8027cc:	dec00204 	addi	sp,sp,8
  8027d0:	f800283a 	ret

008027d4 <__swrite>:
  8027d4:	2880030b 	ldhu	r2,12(r5)
  8027d8:	defffb04 	addi	sp,sp,-20
  8027dc:	dcc00315 	stw	r19,12(sp)
  8027e0:	1080400c 	andi	r2,r2,256
  8027e4:	dc800215 	stw	r18,8(sp)
  8027e8:	dc400115 	stw	r17,4(sp)
  8027ec:	dc000015 	stw	r16,0(sp)
  8027f0:	3027883a 	mov	r19,r6
  8027f4:	3825883a 	mov	r18,r7
  8027f8:	dfc00415 	stw	ra,16(sp)
  8027fc:	2821883a 	mov	r16,r5
  802800:	000d883a 	mov	r6,zero
  802804:	01c00084 	movi	r7,2
  802808:	2023883a 	mov	r17,r4
  80280c:	10000226 	beq	r2,zero,802818 <__swrite+0x44>
  802810:	2940038f 	ldh	r5,14(r5)
  802814:	0802ba00 	call	802ba0 <_lseek_r>
  802818:	8080030b 	ldhu	r2,12(r16)
  80281c:	8140038f 	ldh	r5,14(r16)
  802820:	8809883a 	mov	r4,r17
  802824:	10bbffcc 	andi	r2,r2,61439
  802828:	980d883a 	mov	r6,r19
  80282c:	900f883a 	mov	r7,r18
  802830:	8080030d 	sth	r2,12(r16)
  802834:	dfc00417 	ldw	ra,16(sp)
  802838:	dcc00317 	ldw	r19,12(sp)
  80283c:	dc800217 	ldw	r18,8(sp)
  802840:	dc400117 	ldw	r17,4(sp)
  802844:	dc000017 	ldw	r16,0(sp)
  802848:	dec00504 	addi	sp,sp,20
  80284c:	08028b01 	jmpi	8028b0 <_write_r>

00802850 <__sread>:
  802850:	defffe04 	addi	sp,sp,-8
  802854:	dc000015 	stw	r16,0(sp)
  802858:	2821883a 	mov	r16,r5
  80285c:	2940038f 	ldh	r5,14(r5)
  802860:	dfc00115 	stw	ra,4(sp)
  802864:	0802c180 	call	802c18 <_read_r>
  802868:	1007883a 	mov	r3,r2
  80286c:	10000816 	blt	r2,zero,802890 <__sread+0x40>
  802870:	80801417 	ldw	r2,80(r16)
  802874:	10c5883a 	add	r2,r2,r3
  802878:	80801415 	stw	r2,80(r16)
  80287c:	1805883a 	mov	r2,r3
  802880:	dfc00117 	ldw	ra,4(sp)
  802884:	dc000017 	ldw	r16,0(sp)
  802888:	dec00204 	addi	sp,sp,8
  80288c:	f800283a 	ret
  802890:	8080030b 	ldhu	r2,12(r16)
  802894:	10bbffcc 	andi	r2,r2,61439
  802898:	8080030d 	sth	r2,12(r16)
  80289c:	1805883a 	mov	r2,r3
  8028a0:	dfc00117 	ldw	ra,4(sp)
  8028a4:	dc000017 	ldw	r16,0(sp)
  8028a8:	dec00204 	addi	sp,sp,8
  8028ac:	f800283a 	ret

008028b0 <_write_r>:
  8028b0:	defffd04 	addi	sp,sp,-12
  8028b4:	dc000015 	stw	r16,0(sp)
  8028b8:	04002074 	movhi	r16,129
  8028bc:	84098604 	addi	r16,r16,9752
  8028c0:	dc400115 	stw	r17,4(sp)
  8028c4:	80000015 	stw	zero,0(r16)
  8028c8:	2023883a 	mov	r17,r4
  8028cc:	2809883a 	mov	r4,r5
  8028d0:	300b883a 	mov	r5,r6
  8028d4:	380d883a 	mov	r6,r7
  8028d8:	dfc00215 	stw	ra,8(sp)
  8028dc:	08036700 	call	803670 <write>
  8028e0:	1007883a 	mov	r3,r2
  8028e4:	00bfffc4 	movi	r2,-1
  8028e8:	18800626 	beq	r3,r2,802904 <_write_r+0x54>
  8028ec:	1805883a 	mov	r2,r3
  8028f0:	dfc00217 	ldw	ra,8(sp)
  8028f4:	dc400117 	ldw	r17,4(sp)
  8028f8:	dc000017 	ldw	r16,0(sp)
  8028fc:	dec00304 	addi	sp,sp,12
  802900:	f800283a 	ret
  802904:	80800017 	ldw	r2,0(r16)
  802908:	103ff826 	beq	r2,zero,8028ec <_write_r+0x3c>
  80290c:	88800015 	stw	r2,0(r17)
  802910:	1805883a 	mov	r2,r3
  802914:	dfc00217 	ldw	ra,8(sp)
  802918:	dc400117 	ldw	r17,4(sp)
  80291c:	dc000017 	ldw	r16,0(sp)
  802920:	dec00304 	addi	sp,sp,12
  802924:	f800283a 	ret

00802928 <_close_r>:
  802928:	defffd04 	addi	sp,sp,-12
  80292c:	dc000015 	stw	r16,0(sp)
  802930:	04002074 	movhi	r16,129
  802934:	84098604 	addi	r16,r16,9752
  802938:	dc400115 	stw	r17,4(sp)
  80293c:	80000015 	stw	zero,0(r16)
  802940:	2023883a 	mov	r17,r4
  802944:	2809883a 	mov	r4,r5
  802948:	dfc00215 	stw	ra,8(sp)
  80294c:	0802cc80 	call	802cc8 <close>
  802950:	1007883a 	mov	r3,r2
  802954:	00bfffc4 	movi	r2,-1
  802958:	18800626 	beq	r3,r2,802974 <_close_r+0x4c>
  80295c:	1805883a 	mov	r2,r3
  802960:	dfc00217 	ldw	ra,8(sp)
  802964:	dc400117 	ldw	r17,4(sp)
  802968:	dc000017 	ldw	r16,0(sp)
  80296c:	dec00304 	addi	sp,sp,12
  802970:	f800283a 	ret
  802974:	80800017 	ldw	r2,0(r16)
  802978:	103ff826 	beq	r2,zero,80295c <_close_r+0x34>
  80297c:	88800015 	stw	r2,0(r17)
  802980:	1805883a 	mov	r2,r3
  802984:	dfc00217 	ldw	ra,8(sp)
  802988:	dc400117 	ldw	r17,4(sp)
  80298c:	dc000017 	ldw	r16,0(sp)
  802990:	dec00304 	addi	sp,sp,12
  802994:	f800283a 	ret

00802998 <_fclose_r>:
  802998:	defffc04 	addi	sp,sp,-16
  80299c:	dc400115 	stw	r17,4(sp)
  8029a0:	dc000015 	stw	r16,0(sp)
  8029a4:	dfc00315 	stw	ra,12(sp)
  8029a8:	dc800215 	stw	r18,8(sp)
  8029ac:	2821883a 	mov	r16,r5
  8029b0:	2023883a 	mov	r17,r4
  8029b4:	28002926 	beq	r5,zero,802a5c <_fclose_r+0xc4>
  8029b8:	0801cdc0 	call	801cdc <__sfp_lock_acquire>
  8029bc:	88000226 	beq	r17,zero,8029c8 <_fclose_r+0x30>
  8029c0:	88800e17 	ldw	r2,56(r17)
  8029c4:	10002d26 	beq	r2,zero,802a7c <_fclose_r+0xe4>
  8029c8:	8080030f 	ldh	r2,12(r16)
  8029cc:	10002226 	beq	r2,zero,802a58 <_fclose_r+0xc0>
  8029d0:	8809883a 	mov	r4,r17
  8029d4:	800b883a 	mov	r5,r16
  8029d8:	0801a540 	call	801a54 <_fflush_r>
  8029dc:	1025883a 	mov	r18,r2
  8029e0:	80800b17 	ldw	r2,44(r16)
  8029e4:	10000426 	beq	r2,zero,8029f8 <_fclose_r+0x60>
  8029e8:	81400717 	ldw	r5,28(r16)
  8029ec:	8809883a 	mov	r4,r17
  8029f0:	103ee83a 	callr	r2
  8029f4:	10002a16 	blt	r2,zero,802aa0 <_fclose_r+0x108>
  8029f8:	8080030b 	ldhu	r2,12(r16)
  8029fc:	1080200c 	andi	r2,r2,128
  802a00:	1000231e 	bne	r2,zero,802a90 <_fclose_r+0xf8>
  802a04:	81400c17 	ldw	r5,48(r16)
  802a08:	28000526 	beq	r5,zero,802a20 <_fclose_r+0x88>
  802a0c:	80801004 	addi	r2,r16,64
  802a10:	28800226 	beq	r5,r2,802a1c <_fclose_r+0x84>
  802a14:	8809883a 	mov	r4,r17
  802a18:	08020a40 	call	8020a4 <_free_r>
  802a1c:	80000c15 	stw	zero,48(r16)
  802a20:	81401117 	ldw	r5,68(r16)
  802a24:	28000326 	beq	r5,zero,802a34 <_fclose_r+0x9c>
  802a28:	8809883a 	mov	r4,r17
  802a2c:	08020a40 	call	8020a4 <_free_r>
  802a30:	80001115 	stw	zero,68(r16)
  802a34:	8000030d 	sth	zero,12(r16)
  802a38:	0801ce00 	call	801ce0 <__sfp_lock_release>
  802a3c:	9005883a 	mov	r2,r18
  802a40:	dfc00317 	ldw	ra,12(sp)
  802a44:	dc800217 	ldw	r18,8(sp)
  802a48:	dc400117 	ldw	r17,4(sp)
  802a4c:	dc000017 	ldw	r16,0(sp)
  802a50:	dec00404 	addi	sp,sp,16
  802a54:	f800283a 	ret
  802a58:	0801ce00 	call	801ce0 <__sfp_lock_release>
  802a5c:	0025883a 	mov	r18,zero
  802a60:	9005883a 	mov	r2,r18
  802a64:	dfc00317 	ldw	ra,12(sp)
  802a68:	dc800217 	ldw	r18,8(sp)
  802a6c:	dc400117 	ldw	r17,4(sp)
  802a70:	dc000017 	ldw	r16,0(sp)
  802a74:	dec00404 	addi	sp,sp,16
  802a78:	f800283a 	ret
  802a7c:	8809883a 	mov	r4,r17
  802a80:	0801cec0 	call	801cec <__sinit>
  802a84:	8080030f 	ldh	r2,12(r16)
  802a88:	103fd11e 	bne	r2,zero,8029d0 <_fclose_r+0x38>
  802a8c:	003ff206 	br	802a58 <_fclose_r+0xc0>
  802a90:	81400417 	ldw	r5,16(r16)
  802a94:	8809883a 	mov	r4,r17
  802a98:	08020a40 	call	8020a4 <_free_r>
  802a9c:	003fd906 	br	802a04 <_fclose_r+0x6c>
  802aa0:	04bfffc4 	movi	r18,-1
  802aa4:	003fd406 	br	8029f8 <_fclose_r+0x60>

00802aa8 <fclose>:
  802aa8:	00802074 	movhi	r2,129
  802aac:	10828b04 	addi	r2,r2,2604
  802ab0:	200b883a 	mov	r5,r4
  802ab4:	11000017 	ldw	r4,0(r2)
  802ab8:	08029981 	jmpi	802998 <_fclose_r>

00802abc <_fstat_r>:
  802abc:	defffd04 	addi	sp,sp,-12
  802ac0:	dc000015 	stw	r16,0(sp)
  802ac4:	04002074 	movhi	r16,129
  802ac8:	84098604 	addi	r16,r16,9752
  802acc:	dc400115 	stw	r17,4(sp)
  802ad0:	80000015 	stw	zero,0(r16)
  802ad4:	2023883a 	mov	r17,r4
  802ad8:	2809883a 	mov	r4,r5
  802adc:	300b883a 	mov	r5,r6
  802ae0:	dfc00215 	stw	ra,8(sp)
  802ae4:	0802e540 	call	802e54 <fstat>
  802ae8:	1007883a 	mov	r3,r2
  802aec:	00bfffc4 	movi	r2,-1
  802af0:	18800626 	beq	r3,r2,802b0c <_fstat_r+0x50>
  802af4:	1805883a 	mov	r2,r3
  802af8:	dfc00217 	ldw	ra,8(sp)
  802afc:	dc400117 	ldw	r17,4(sp)
  802b00:	dc000017 	ldw	r16,0(sp)
  802b04:	dec00304 	addi	sp,sp,12
  802b08:	f800283a 	ret
  802b0c:	80800017 	ldw	r2,0(r16)
  802b10:	103ff826 	beq	r2,zero,802af4 <_fstat_r+0x38>
  802b14:	88800015 	stw	r2,0(r17)
  802b18:	1805883a 	mov	r2,r3
  802b1c:	dfc00217 	ldw	ra,8(sp)
  802b20:	dc400117 	ldw	r17,4(sp)
  802b24:	dc000017 	ldw	r16,0(sp)
  802b28:	dec00304 	addi	sp,sp,12
  802b2c:	f800283a 	ret

00802b30 <_isatty_r>:
  802b30:	defffd04 	addi	sp,sp,-12
  802b34:	dc000015 	stw	r16,0(sp)
  802b38:	04002074 	movhi	r16,129
  802b3c:	84098604 	addi	r16,r16,9752
  802b40:	dc400115 	stw	r17,4(sp)
  802b44:	80000015 	stw	zero,0(r16)
  802b48:	2023883a 	mov	r17,r4
  802b4c:	2809883a 	mov	r4,r5
  802b50:	dfc00215 	stw	ra,8(sp)
  802b54:	0802f8c0 	call	802f8c <isatty>
  802b58:	1007883a 	mov	r3,r2
  802b5c:	00bfffc4 	movi	r2,-1
  802b60:	18800626 	beq	r3,r2,802b7c <_isatty_r+0x4c>
  802b64:	1805883a 	mov	r2,r3
  802b68:	dfc00217 	ldw	ra,8(sp)
  802b6c:	dc400117 	ldw	r17,4(sp)
  802b70:	dc000017 	ldw	r16,0(sp)
  802b74:	dec00304 	addi	sp,sp,12
  802b78:	f800283a 	ret
  802b7c:	80800017 	ldw	r2,0(r16)
  802b80:	103ff826 	beq	r2,zero,802b64 <_isatty_r+0x34>
  802b84:	88800015 	stw	r2,0(r17)
  802b88:	1805883a 	mov	r2,r3
  802b8c:	dfc00217 	ldw	ra,8(sp)
  802b90:	dc400117 	ldw	r17,4(sp)
  802b94:	dc000017 	ldw	r16,0(sp)
  802b98:	dec00304 	addi	sp,sp,12
  802b9c:	f800283a 	ret

00802ba0 <_lseek_r>:
  802ba0:	defffd04 	addi	sp,sp,-12
  802ba4:	dc000015 	stw	r16,0(sp)
  802ba8:	04002074 	movhi	r16,129
  802bac:	84098604 	addi	r16,r16,9752
  802bb0:	dc400115 	stw	r17,4(sp)
  802bb4:	80000015 	stw	zero,0(r16)
  802bb8:	2023883a 	mov	r17,r4
  802bbc:	2809883a 	mov	r4,r5
  802bc0:	300b883a 	mov	r5,r6
  802bc4:	380d883a 	mov	r6,r7
  802bc8:	dfc00215 	stw	ra,8(sp)
  802bcc:	080319c0 	call	80319c <lseek>
  802bd0:	1007883a 	mov	r3,r2
  802bd4:	00bfffc4 	movi	r2,-1
  802bd8:	18800626 	beq	r3,r2,802bf4 <_lseek_r+0x54>
  802bdc:	1805883a 	mov	r2,r3
  802be0:	dfc00217 	ldw	ra,8(sp)
  802be4:	dc400117 	ldw	r17,4(sp)
  802be8:	dc000017 	ldw	r16,0(sp)
  802bec:	dec00304 	addi	sp,sp,12
  802bf0:	f800283a 	ret
  802bf4:	80800017 	ldw	r2,0(r16)
  802bf8:	103ff826 	beq	r2,zero,802bdc <_lseek_r+0x3c>
  802bfc:	88800015 	stw	r2,0(r17)
  802c00:	1805883a 	mov	r2,r3
  802c04:	dfc00217 	ldw	ra,8(sp)
  802c08:	dc400117 	ldw	r17,4(sp)
  802c0c:	dc000017 	ldw	r16,0(sp)
  802c10:	dec00304 	addi	sp,sp,12
  802c14:	f800283a 	ret

00802c18 <_read_r>:
  802c18:	defffd04 	addi	sp,sp,-12
  802c1c:	dc000015 	stw	r16,0(sp)
  802c20:	04002074 	movhi	r16,129
  802c24:	84098604 	addi	r16,r16,9752
  802c28:	dc400115 	stw	r17,4(sp)
  802c2c:	80000015 	stw	zero,0(r16)
  802c30:	2023883a 	mov	r17,r4
  802c34:	2809883a 	mov	r4,r5
  802c38:	300b883a 	mov	r5,r6
  802c3c:	380d883a 	mov	r6,r7
  802c40:	dfc00215 	stw	ra,8(sp)
  802c44:	08033b80 	call	8033b8 <read>
  802c48:	1007883a 	mov	r3,r2
  802c4c:	00bfffc4 	movi	r2,-1
  802c50:	18800626 	beq	r3,r2,802c6c <_read_r+0x54>
  802c54:	1805883a 	mov	r2,r3
  802c58:	dfc00217 	ldw	ra,8(sp)
  802c5c:	dc400117 	ldw	r17,4(sp)
  802c60:	dc000017 	ldw	r16,0(sp)
  802c64:	dec00304 	addi	sp,sp,12
  802c68:	f800283a 	ret
  802c6c:	80800017 	ldw	r2,0(r16)
  802c70:	103ff826 	beq	r2,zero,802c54 <_read_r+0x3c>
  802c74:	88800015 	stw	r2,0(r17)
  802c78:	1805883a 	mov	r2,r3
  802c7c:	dfc00217 	ldw	ra,8(sp)
  802c80:	dc400117 	ldw	r17,4(sp)
  802c84:	dc000017 	ldw	r16,0(sp)
  802c88:	dec00304 	addi	sp,sp,12
  802c8c:	f800283a 	ret

00802c90 <__mulsi3>:
  802c90:	20000a26 	beq	r4,zero,802cbc <__mulsi3+0x2c>
  802c94:	0007883a 	mov	r3,zero
  802c98:	2080004c 	andi	r2,r4,1
  802c9c:	1005003a 	cmpeq	r2,r2,zero
  802ca0:	2008d07a 	srli	r4,r4,1
  802ca4:	1000011e 	bne	r2,zero,802cac <__mulsi3+0x1c>
  802ca8:	1947883a 	add	r3,r3,r5
  802cac:	294b883a 	add	r5,r5,r5
  802cb0:	203ff91e 	bne	r4,zero,802c98 <__mulsi3+0x8>
  802cb4:	1805883a 	mov	r2,r3
  802cb8:	f800283a 	ret
  802cbc:	0007883a 	mov	r3,zero
  802cc0:	1805883a 	mov	r2,r3
  802cc4:	f800283a 	ret

00802cc8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  802cc8:	defff804 	addi	sp,sp,-32
  802ccc:	dfc00715 	stw	ra,28(sp)
  802cd0:	df000615 	stw	fp,24(sp)
  802cd4:	df000604 	addi	fp,sp,24
  802cd8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  802cdc:	e0bffc17 	ldw	r2,-16(fp)
  802ce0:	1004803a 	cmplt	r2,r2,zero
  802ce4:	1000091e 	bne	r2,zero,802d0c <close+0x44>
  802ce8:	e13ffc17 	ldw	r4,-16(fp)
  802cec:	01400304 	movi	r5,12
  802cf0:	0802c900 	call	802c90 <__mulsi3>
  802cf4:	1007883a 	mov	r3,r2
  802cf8:	00802074 	movhi	r2,129
  802cfc:	10bdfa04 	addi	r2,r2,-2072
  802d00:	1887883a 	add	r3,r3,r2
  802d04:	e0ffff15 	stw	r3,-4(fp)
  802d08:	00000106 	br	802d10 <close+0x48>
  802d0c:	e03fff15 	stw	zero,-4(fp)
  802d10:	e0bfff17 	ldw	r2,-4(fp)
  802d14:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  802d18:	e0bffb17 	ldw	r2,-20(fp)
  802d1c:	1005003a 	cmpeq	r2,r2,zero
  802d20:	10001d1e 	bne	r2,zero,802d98 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802d24:	e0bffb17 	ldw	r2,-20(fp)
  802d28:	10800017 	ldw	r2,0(r2)
  802d2c:	10800417 	ldw	r2,16(r2)
  802d30:	1005003a 	cmpeq	r2,r2,zero
  802d34:	1000071e 	bne	r2,zero,802d54 <close+0x8c>
  802d38:	e0bffb17 	ldw	r2,-20(fp)
  802d3c:	10800017 	ldw	r2,0(r2)
  802d40:	10800417 	ldw	r2,16(r2)
  802d44:	e13ffb17 	ldw	r4,-20(fp)
  802d48:	103ee83a 	callr	r2
  802d4c:	e0bffe15 	stw	r2,-8(fp)
  802d50:	00000106 	br	802d58 <close+0x90>
  802d54:	e03ffe15 	stw	zero,-8(fp)
  802d58:	e0bffe17 	ldw	r2,-8(fp)
  802d5c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  802d60:	e13ffc17 	ldw	r4,-16(fp)
  802d64:	080353c0 	call	80353c <alt_release_fd>
    if (rval < 0)
  802d68:	e0bffa17 	ldw	r2,-24(fp)
  802d6c:	1004403a 	cmpge	r2,r2,zero
  802d70:	1000071e 	bne	r2,zero,802d90 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  802d74:	0802dc80 	call	802dc8 <alt_get_errno>
  802d78:	e0fffa17 	ldw	r3,-24(fp)
  802d7c:	00c7c83a 	sub	r3,zero,r3
  802d80:	10c00015 	stw	r3,0(r2)
      return -1;
  802d84:	00bfffc4 	movi	r2,-1
  802d88:	e0bffd15 	stw	r2,-12(fp)
  802d8c:	00000806 	br	802db0 <close+0xe8>
    }
    return 0;
  802d90:	e03ffd15 	stw	zero,-12(fp)
  802d94:	00000606 	br	802db0 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802d98:	0802dc80 	call	802dc8 <alt_get_errno>
  802d9c:	1007883a 	mov	r3,r2
  802da0:	00801444 	movi	r2,81
  802da4:	18800015 	stw	r2,0(r3)
    return -1;
  802da8:	00bfffc4 	movi	r2,-1
  802dac:	e0bffd15 	stw	r2,-12(fp)
  802db0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  802db4:	e037883a 	mov	sp,fp
  802db8:	dfc00117 	ldw	ra,4(sp)
  802dbc:	df000017 	ldw	fp,0(sp)
  802dc0:	dec00204 	addi	sp,sp,8
  802dc4:	f800283a 	ret

00802dc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802dc8:	defffd04 	addi	sp,sp,-12
  802dcc:	dfc00215 	stw	ra,8(sp)
  802dd0:	df000115 	stw	fp,4(sp)
  802dd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  802dd8:	00802074 	movhi	r2,129
  802ddc:	10829404 	addi	r2,r2,2640
  802de0:	10800017 	ldw	r2,0(r2)
  802de4:	1005003a 	cmpeq	r2,r2,zero
  802de8:	1000061e 	bne	r2,zero,802e04 <alt_get_errno+0x3c>
  802dec:	00802074 	movhi	r2,129
  802df0:	10829404 	addi	r2,r2,2640
  802df4:	10800017 	ldw	r2,0(r2)
  802df8:	103ee83a 	callr	r2
  802dfc:	e0bfff15 	stw	r2,-4(fp)
  802e00:	00000306 	br	802e10 <alt_get_errno+0x48>
  802e04:	00802074 	movhi	r2,129
  802e08:	10898604 	addi	r2,r2,9752
  802e0c:	e0bfff15 	stw	r2,-4(fp)
  802e10:	e0bfff17 	ldw	r2,-4(fp)
}
  802e14:	e037883a 	mov	sp,fp
  802e18:	dfc00117 	ldw	ra,4(sp)
  802e1c:	df000017 	ldw	fp,0(sp)
  802e20:	dec00204 	addi	sp,sp,8
  802e24:	f800283a 	ret

00802e28 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  802e28:	defffc04 	addi	sp,sp,-16
  802e2c:	df000315 	stw	fp,12(sp)
  802e30:	df000304 	addi	fp,sp,12
  802e34:	e13ffd15 	stw	r4,-12(fp)
  802e38:	e17ffe15 	stw	r5,-8(fp)
  802e3c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  802e40:	e0bfff17 	ldw	r2,-4(fp)
}
  802e44:	e037883a 	mov	sp,fp
  802e48:	df000017 	ldw	fp,0(sp)
  802e4c:	dec00104 	addi	sp,sp,4
  802e50:	f800283a 	ret

00802e54 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  802e54:	defff904 	addi	sp,sp,-28
  802e58:	dfc00615 	stw	ra,24(sp)
  802e5c:	df000515 	stw	fp,20(sp)
  802e60:	df000504 	addi	fp,sp,20
  802e64:	e13ffc15 	stw	r4,-16(fp)
  802e68:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  802e6c:	e0bffc17 	ldw	r2,-16(fp)
  802e70:	1004803a 	cmplt	r2,r2,zero
  802e74:	1000091e 	bne	r2,zero,802e9c <fstat+0x48>
  802e78:	e13ffc17 	ldw	r4,-16(fp)
  802e7c:	01400304 	movi	r5,12
  802e80:	0802c900 	call	802c90 <__mulsi3>
  802e84:	1007883a 	mov	r3,r2
  802e88:	00802074 	movhi	r2,129
  802e8c:	10bdfa04 	addi	r2,r2,-2072
  802e90:	1887883a 	add	r3,r3,r2
  802e94:	e0ffff15 	stw	r3,-4(fp)
  802e98:	00000106 	br	802ea0 <fstat+0x4c>
  802e9c:	e03fff15 	stw	zero,-4(fp)
  802ea0:	e0bfff17 	ldw	r2,-4(fp)
  802ea4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  802ea8:	e0bffb17 	ldw	r2,-20(fp)
  802eac:	1005003a 	cmpeq	r2,r2,zero
  802eb0:	1000121e 	bne	r2,zero,802efc <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  802eb4:	e0bffb17 	ldw	r2,-20(fp)
  802eb8:	10800017 	ldw	r2,0(r2)
  802ebc:	10800817 	ldw	r2,32(r2)
  802ec0:	1005003a 	cmpeq	r2,r2,zero
  802ec4:	1000081e 	bne	r2,zero,802ee8 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  802ec8:	e0bffb17 	ldw	r2,-20(fp)
  802ecc:	10800017 	ldw	r2,0(r2)
  802ed0:	10800817 	ldw	r2,32(r2)
  802ed4:	e13ffb17 	ldw	r4,-20(fp)
  802ed8:	e17ffd17 	ldw	r5,-12(fp)
  802edc:	103ee83a 	callr	r2
  802ee0:	e0bffe15 	stw	r2,-8(fp)
  802ee4:	00000b06 	br	802f14 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  802ee8:	e0fffd17 	ldw	r3,-12(fp)
  802eec:	00880004 	movi	r2,8192
  802ef0:	18800115 	stw	r2,4(r3)
      return 0;
  802ef4:	e03ffe15 	stw	zero,-8(fp)
  802ef8:	00000606 	br	802f14 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802efc:	0802f2c0 	call	802f2c <alt_get_errno>
  802f00:	1007883a 	mov	r3,r2
  802f04:	00801444 	movi	r2,81
  802f08:	18800015 	stw	r2,0(r3)
    return -1;
  802f0c:	00bfffc4 	movi	r2,-1
  802f10:	e0bffe15 	stw	r2,-8(fp)
  802f14:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  802f18:	e037883a 	mov	sp,fp
  802f1c:	dfc00117 	ldw	ra,4(sp)
  802f20:	df000017 	ldw	fp,0(sp)
  802f24:	dec00204 	addi	sp,sp,8
  802f28:	f800283a 	ret

00802f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802f2c:	defffd04 	addi	sp,sp,-12
  802f30:	dfc00215 	stw	ra,8(sp)
  802f34:	df000115 	stw	fp,4(sp)
  802f38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  802f3c:	00802074 	movhi	r2,129
  802f40:	10829404 	addi	r2,r2,2640
  802f44:	10800017 	ldw	r2,0(r2)
  802f48:	1005003a 	cmpeq	r2,r2,zero
  802f4c:	1000061e 	bne	r2,zero,802f68 <alt_get_errno+0x3c>
  802f50:	00802074 	movhi	r2,129
  802f54:	10829404 	addi	r2,r2,2640
  802f58:	10800017 	ldw	r2,0(r2)
  802f5c:	103ee83a 	callr	r2
  802f60:	e0bfff15 	stw	r2,-4(fp)
  802f64:	00000306 	br	802f74 <alt_get_errno+0x48>
  802f68:	00802074 	movhi	r2,129
  802f6c:	10898604 	addi	r2,r2,9752
  802f70:	e0bfff15 	stw	r2,-4(fp)
  802f74:	e0bfff17 	ldw	r2,-4(fp)
}
  802f78:	e037883a 	mov	sp,fp
  802f7c:	dfc00117 	ldw	ra,4(sp)
  802f80:	df000017 	ldw	fp,0(sp)
  802f84:	dec00204 	addi	sp,sp,8
  802f88:	f800283a 	ret

00802f8c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  802f8c:	deffeb04 	addi	sp,sp,-84
  802f90:	dfc01415 	stw	ra,80(sp)
  802f94:	df001315 	stw	fp,76(sp)
  802f98:	df001304 	addi	fp,sp,76
  802f9c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  802fa0:	e0bffd17 	ldw	r2,-12(fp)
  802fa4:	1004803a 	cmplt	r2,r2,zero
  802fa8:	1000091e 	bne	r2,zero,802fd0 <isatty+0x44>
  802fac:	e13ffd17 	ldw	r4,-12(fp)
  802fb0:	01400304 	movi	r5,12
  802fb4:	0802c900 	call	802c90 <__mulsi3>
  802fb8:	1007883a 	mov	r3,r2
  802fbc:	00802074 	movhi	r2,129
  802fc0:	10bdfa04 	addi	r2,r2,-2072
  802fc4:	1887883a 	add	r3,r3,r2
  802fc8:	e0ffff15 	stw	r3,-4(fp)
  802fcc:	00000106 	br	802fd4 <isatty+0x48>
  802fd0:	e03fff15 	stw	zero,-4(fp)
  802fd4:	e0bfff17 	ldw	r2,-4(fp)
  802fd8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  802fdc:	e0bfed17 	ldw	r2,-76(fp)
  802fe0:	1005003a 	cmpeq	r2,r2,zero
  802fe4:	10000f1e 	bne	r2,zero,803024 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  802fe8:	e0bfed17 	ldw	r2,-76(fp)
  802fec:	10800017 	ldw	r2,0(r2)
  802ff0:	10800817 	ldw	r2,32(r2)
  802ff4:	1004c03a 	cmpne	r2,r2,zero
  802ff8:	1000031e 	bne	r2,zero,803008 <isatty+0x7c>
    {
      return 1;
  802ffc:	00800044 	movi	r2,1
  803000:	e0bffe15 	stw	r2,-8(fp)
  803004:	00000c06 	br	803038 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  803008:	e17fee04 	addi	r5,fp,-72
  80300c:	e13ffd17 	ldw	r4,-12(fp)
  803010:	0802e540 	call	802e54 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  803014:	e0bfef17 	ldw	r2,-68(fp)
  803018:	10880020 	cmpeqi	r2,r2,8192
  80301c:	e0bffe15 	stw	r2,-8(fp)
  803020:	00000506 	br	803038 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803024:	08030500 	call	803050 <alt_get_errno>
  803028:	1007883a 	mov	r3,r2
  80302c:	00801444 	movi	r2,81
  803030:	18800015 	stw	r2,0(r3)
    return 0;
  803034:	e03ffe15 	stw	zero,-8(fp)
  803038:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80303c:	e037883a 	mov	sp,fp
  803040:	dfc00117 	ldw	ra,4(sp)
  803044:	df000017 	ldw	fp,0(sp)
  803048:	dec00204 	addi	sp,sp,8
  80304c:	f800283a 	ret

00803050 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803050:	defffd04 	addi	sp,sp,-12
  803054:	dfc00215 	stw	ra,8(sp)
  803058:	df000115 	stw	fp,4(sp)
  80305c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803060:	00802074 	movhi	r2,129
  803064:	10829404 	addi	r2,r2,2640
  803068:	10800017 	ldw	r2,0(r2)
  80306c:	1005003a 	cmpeq	r2,r2,zero
  803070:	1000061e 	bne	r2,zero,80308c <alt_get_errno+0x3c>
  803074:	00802074 	movhi	r2,129
  803078:	10829404 	addi	r2,r2,2640
  80307c:	10800017 	ldw	r2,0(r2)
  803080:	103ee83a 	callr	r2
  803084:	e0bfff15 	stw	r2,-4(fp)
  803088:	00000306 	br	803098 <alt_get_errno+0x48>
  80308c:	00802074 	movhi	r2,129
  803090:	10898604 	addi	r2,r2,9752
  803094:	e0bfff15 	stw	r2,-4(fp)
  803098:	e0bfff17 	ldw	r2,-4(fp)
}
  80309c:	e037883a 	mov	sp,fp
  8030a0:	dfc00117 	ldw	ra,4(sp)
  8030a4:	df000017 	ldw	fp,0(sp)
  8030a8:	dec00204 	addi	sp,sp,8
  8030ac:	f800283a 	ret

008030b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8030b0:	defffe04 	addi	sp,sp,-8
  8030b4:	dfc00115 	stw	ra,4(sp)
  8030b8:	df000015 	stw	fp,0(sp)
  8030bc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8030c0:	01002074 	movhi	r4,129
  8030c4:	2102b804 	addi	r4,r4,2784
  8030c8:	01402074 	movhi	r5,129
  8030cc:	297bee04 	addi	r5,r5,-4168
  8030d0:	01802074 	movhi	r6,129
  8030d4:	3182b804 	addi	r6,r6,2784
  8030d8:	08031300 	call	803130 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8030dc:	01002034 	movhi	r4,128
  8030e0:	21000004 	addi	r4,r4,0
  8030e4:	01404434 	movhi	r5,272
  8030e8:	29500804 	addi	r5,r5,16416
  8030ec:	01804434 	movhi	r6,272
  8030f0:	31907004 	addi	r6,r6,16832
  8030f4:	08031300 	call	803130 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8030f8:	01002074 	movhi	r4,129
  8030fc:	213b7c04 	addi	r4,r4,-4624
  803100:	01402074 	movhi	r5,129
  803104:	297b7c04 	addi	r5,r5,-4624
  803108:	01802074 	movhi	r6,129
  80310c:	31bbee04 	addi	r6,r6,-4168
  803110:	08031300 	call	803130 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  803114:	080d71c0 	call	80d71c <alt_dcache_flush_all>
  alt_icache_flush_all();
  803118:	080d9a80 	call	80d9a8 <alt_icache_flush_all>
}
  80311c:	e037883a 	mov	sp,fp
  803120:	dfc00117 	ldw	ra,4(sp)
  803124:	df000017 	ldw	fp,0(sp)
  803128:	dec00204 	addi	sp,sp,8
  80312c:	f800283a 	ret

00803130 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  803130:	defffc04 	addi	sp,sp,-16
  803134:	df000315 	stw	fp,12(sp)
  803138:	df000304 	addi	fp,sp,12
  80313c:	e13ffd15 	stw	r4,-12(fp)
  803140:	e17ffe15 	stw	r5,-8(fp)
  803144:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  803148:	e0fffe17 	ldw	r3,-8(fp)
  80314c:	e0bffd17 	ldw	r2,-12(fp)
  803150:	18800e26 	beq	r3,r2,80318c <alt_load_section+0x5c>
  {
    while( to != end )
  803154:	00000a06 	br	803180 <alt_load_section+0x50>
    {
      *to++ = *from++;
  803158:	e0bffd17 	ldw	r2,-12(fp)
  80315c:	10c00017 	ldw	r3,0(r2)
  803160:	e0bffe17 	ldw	r2,-8(fp)
  803164:	10c00015 	stw	r3,0(r2)
  803168:	e0bffe17 	ldw	r2,-8(fp)
  80316c:	10800104 	addi	r2,r2,4
  803170:	e0bffe15 	stw	r2,-8(fp)
  803174:	e0bffd17 	ldw	r2,-12(fp)
  803178:	10800104 	addi	r2,r2,4
  80317c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  803180:	e0fffe17 	ldw	r3,-8(fp)
  803184:	e0bfff17 	ldw	r2,-4(fp)
  803188:	18bff31e 	bne	r3,r2,803158 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80318c:	e037883a 	mov	sp,fp
  803190:	df000017 	ldw	fp,0(sp)
  803194:	dec00104 	addi	sp,sp,4
  803198:	f800283a 	ret

0080319c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80319c:	defff804 	addi	sp,sp,-32
  8031a0:	dfc00715 	stw	ra,28(sp)
  8031a4:	df000615 	stw	fp,24(sp)
  8031a8:	df000604 	addi	fp,sp,24
  8031ac:	e13ffc15 	stw	r4,-16(fp)
  8031b0:	e17ffd15 	stw	r5,-12(fp)
  8031b4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8031b8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8031bc:	e0bffc17 	ldw	r2,-16(fp)
  8031c0:	1004803a 	cmplt	r2,r2,zero
  8031c4:	1000091e 	bne	r2,zero,8031ec <lseek+0x50>
  8031c8:	e13ffc17 	ldw	r4,-16(fp)
  8031cc:	01400304 	movi	r5,12
  8031d0:	0802c900 	call	802c90 <__mulsi3>
  8031d4:	1007883a 	mov	r3,r2
  8031d8:	00802074 	movhi	r2,129
  8031dc:	10bdfa04 	addi	r2,r2,-2072
  8031e0:	1887883a 	add	r3,r3,r2
  8031e4:	e0ffff15 	stw	r3,-4(fp)
  8031e8:	00000106 	br	8031f0 <lseek+0x54>
  8031ec:	e03fff15 	stw	zero,-4(fp)
  8031f0:	e0bfff17 	ldw	r2,-4(fp)
  8031f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  8031f8:	e0bffb17 	ldw	r2,-20(fp)
  8031fc:	1005003a 	cmpeq	r2,r2,zero
  803200:	1000111e 	bne	r2,zero,803248 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  803204:	e0bffb17 	ldw	r2,-20(fp)
  803208:	10800017 	ldw	r2,0(r2)
  80320c:	10800717 	ldw	r2,28(r2)
  803210:	1005003a 	cmpeq	r2,r2,zero
  803214:	1000091e 	bne	r2,zero,80323c <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  803218:	e0bffb17 	ldw	r2,-20(fp)
  80321c:	10800017 	ldw	r2,0(r2)
  803220:	10800717 	ldw	r2,28(r2)
  803224:	e13ffb17 	ldw	r4,-20(fp)
  803228:	e17ffd17 	ldw	r5,-12(fp)
  80322c:	e1bffe17 	ldw	r6,-8(fp)
  803230:	103ee83a 	callr	r2
  803234:	e0bffa15 	stw	r2,-24(fp)
  803238:	00000506 	br	803250 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80323c:	00bfde84 	movi	r2,-134
  803240:	e0bffa15 	stw	r2,-24(fp)
  803244:	00000206 	br	803250 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  803248:	00bfebc4 	movi	r2,-81
  80324c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  803250:	e0bffa17 	ldw	r2,-24(fp)
  803254:	1004403a 	cmpge	r2,r2,zero
  803258:	1000071e 	bne	r2,zero,803278 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80325c:	08032900 	call	803290 <alt_get_errno>
  803260:	1007883a 	mov	r3,r2
  803264:	e0bffa17 	ldw	r2,-24(fp)
  803268:	0085c83a 	sub	r2,zero,r2
  80326c:	18800015 	stw	r2,0(r3)
    rc = -1;
  803270:	00bfffc4 	movi	r2,-1
  803274:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  803278:	e0bffa17 	ldw	r2,-24(fp)
}
  80327c:	e037883a 	mov	sp,fp
  803280:	dfc00117 	ldw	ra,4(sp)
  803284:	df000017 	ldw	fp,0(sp)
  803288:	dec00204 	addi	sp,sp,8
  80328c:	f800283a 	ret

00803290 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803290:	defffd04 	addi	sp,sp,-12
  803294:	dfc00215 	stw	ra,8(sp)
  803298:	df000115 	stw	fp,4(sp)
  80329c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8032a0:	00802074 	movhi	r2,129
  8032a4:	10829404 	addi	r2,r2,2640
  8032a8:	10800017 	ldw	r2,0(r2)
  8032ac:	1005003a 	cmpeq	r2,r2,zero
  8032b0:	1000061e 	bne	r2,zero,8032cc <alt_get_errno+0x3c>
  8032b4:	00802074 	movhi	r2,129
  8032b8:	10829404 	addi	r2,r2,2640
  8032bc:	10800017 	ldw	r2,0(r2)
  8032c0:	103ee83a 	callr	r2
  8032c4:	e0bfff15 	stw	r2,-4(fp)
  8032c8:	00000306 	br	8032d8 <alt_get_errno+0x48>
  8032cc:	00802074 	movhi	r2,129
  8032d0:	10898604 	addi	r2,r2,9752
  8032d4:	e0bfff15 	stw	r2,-4(fp)
  8032d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8032dc:	e037883a 	mov	sp,fp
  8032e0:	dfc00117 	ldw	ra,4(sp)
  8032e4:	df000017 	ldw	fp,0(sp)
  8032e8:	dec00204 	addi	sp,sp,8
  8032ec:	f800283a 	ret

008032f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8032f0:	defffb04 	addi	sp,sp,-20
  8032f4:	dfc00415 	stw	ra,16(sp)
  8032f8:	df000315 	stw	fp,12(sp)
  8032fc:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  803300:	0009883a 	mov	r4,zero
  803304:	080bdc00 	call	80bdc0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  803308:	08043fc0 	call	8043fc <OSInit>
  80330c:	01000044 	movi	r4,1
  803310:	08092c40 	call	8092c4 <OSSemCreate>
  803314:	1007883a 	mov	r3,r2
  803318:	00802074 	movhi	r2,129
  80331c:	10898c04 	addi	r2,r2,9776
  803320:	10c00015 	stw	r3,0(r2)
  803324:	01000044 	movi	r4,1
  803328:	08092c40 	call	8092c4 <OSSemCreate>
  80332c:	1007883a 	mov	r3,r2
  803330:	00802074 	movhi	r2,129
  803334:	10898e04 	addi	r2,r2,9784
  803338:	10c00015 	stw	r3,0(r2)
  80333c:	00802074 	movhi	r2,129
  803340:	10898704 	addi	r2,r2,9756
  803344:	e0bffd15 	stw	r2,-12(fp)
  803348:	00800044 	movi	r2,1
  80334c:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  803350:	e13ffe0b 	ldhu	r4,-8(fp)
  803354:	08092c40 	call	8092c4 <OSSemCreate>
  803358:	1007883a 	mov	r3,r2
  80335c:	e0bffd17 	ldw	r2,-12(fp)
  803360:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  803364:	080bdf40 	call	80bdf4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  803368:	01002074 	movhi	r4,129
  80336c:	213b9104 	addi	r4,r4,-4540
  803370:	01402074 	movhi	r5,129
  803374:	297b9104 	addi	r5,r5,-4540
  803378:	01802074 	movhi	r6,129
  80337c:	31bb9104 	addi	r6,r6,-4540
  803380:	080da9c0 	call	80da9c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  803384:	080d84c0 	call	80d84c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  803388:	01002074 	movhi	r4,129
  80338c:	21362c04 	addi	r4,r4,-10064
  803390:	080e88c0 	call	80e88c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  803394:	d126fd17 	ldw	r4,-25612(gp)
  803398:	d166fe17 	ldw	r5,-25608(gp)
  80339c:	d1a6ff17 	ldw	r6,-25604(gp)
  8033a0:	08002b80 	call	8002b8 <main>
  8033a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8033a8:	01000044 	movi	r4,1
  8033ac:	0802cc80 	call	802cc8 <close>
  exit (result);
  8033b0:	e13fff17 	ldw	r4,-4(fp)
  8033b4:	080e8a00 	call	80e8a0 <exit>

008033b8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8033b8:	defff704 	addi	sp,sp,-36
  8033bc:	dfc00815 	stw	ra,32(sp)
  8033c0:	df000715 	stw	fp,28(sp)
  8033c4:	df000704 	addi	fp,sp,28
  8033c8:	e13ffb15 	stw	r4,-20(fp)
  8033cc:	e17ffc15 	stw	r5,-16(fp)
  8033d0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8033d4:	e0bffb17 	ldw	r2,-20(fp)
  8033d8:	1004803a 	cmplt	r2,r2,zero
  8033dc:	1000091e 	bne	r2,zero,803404 <read+0x4c>
  8033e0:	e13ffb17 	ldw	r4,-20(fp)
  8033e4:	01400304 	movi	r5,12
  8033e8:	0802c900 	call	802c90 <__mulsi3>
  8033ec:	1007883a 	mov	r3,r2
  8033f0:	00802074 	movhi	r2,129
  8033f4:	10bdfa04 	addi	r2,r2,-2072
  8033f8:	1887883a 	add	r3,r3,r2
  8033fc:	e0ffff15 	stw	r3,-4(fp)
  803400:	00000106 	br	803408 <read+0x50>
  803404:	e03fff15 	stw	zero,-4(fp)
  803408:	e0bfff17 	ldw	r2,-4(fp)
  80340c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  803410:	e0bffa17 	ldw	r2,-24(fp)
  803414:	1005003a 	cmpeq	r2,r2,zero
  803418:	1000241e 	bne	r2,zero,8034ac <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80341c:	e0bffa17 	ldw	r2,-24(fp)
  803420:	10800217 	ldw	r2,8(r2)
  803424:	108000cc 	andi	r2,r2,3
  803428:	10800060 	cmpeqi	r2,r2,1
  80342c:	10001a1e 	bne	r2,zero,803498 <read+0xe0>
  803430:	e0bffa17 	ldw	r2,-24(fp)
  803434:	10800017 	ldw	r2,0(r2)
  803438:	10800517 	ldw	r2,20(r2)
  80343c:	1005003a 	cmpeq	r2,r2,zero
  803440:	1000151e 	bne	r2,zero,803498 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  803444:	e0bffa17 	ldw	r2,-24(fp)
  803448:	10800017 	ldw	r2,0(r2)
  80344c:	10800517 	ldw	r2,20(r2)
  803450:	e17ffc17 	ldw	r5,-16(fp)
  803454:	e1bffd17 	ldw	r6,-12(fp)
  803458:	e13ffa17 	ldw	r4,-24(fp)
  80345c:	103ee83a 	callr	r2
  803460:	e0bff915 	stw	r2,-28(fp)
  803464:	e0bff917 	ldw	r2,-28(fp)
  803468:	1004403a 	cmpge	r2,r2,zero
  80346c:	1000071e 	bne	r2,zero,80348c <read+0xd4>
        {
          ALT_ERRNO = -rval;
  803470:	08034dc0 	call	8034dc <alt_get_errno>
  803474:	e0fff917 	ldw	r3,-28(fp)
  803478:	00c7c83a 	sub	r3,zero,r3
  80347c:	10c00015 	stw	r3,0(r2)
          return -1;
  803480:	00bfffc4 	movi	r2,-1
  803484:	e0bffe15 	stw	r2,-8(fp)
  803488:	00000e06 	br	8034c4 <read+0x10c>
        }
        return rval;
  80348c:	e0bff917 	ldw	r2,-28(fp)
  803490:	e0bffe15 	stw	r2,-8(fp)
  803494:	00000b06 	br	8034c4 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  803498:	08034dc0 	call	8034dc <alt_get_errno>
  80349c:	1007883a 	mov	r3,r2
  8034a0:	00800344 	movi	r2,13
  8034a4:	18800015 	stw	r2,0(r3)
  8034a8:	00000406 	br	8034bc <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8034ac:	08034dc0 	call	8034dc <alt_get_errno>
  8034b0:	1007883a 	mov	r3,r2
  8034b4:	00801444 	movi	r2,81
  8034b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8034bc:	00bfffc4 	movi	r2,-1
  8034c0:	e0bffe15 	stw	r2,-8(fp)
  8034c4:	e0bffe17 	ldw	r2,-8(fp)
}
  8034c8:	e037883a 	mov	sp,fp
  8034cc:	dfc00117 	ldw	ra,4(sp)
  8034d0:	df000017 	ldw	fp,0(sp)
  8034d4:	dec00204 	addi	sp,sp,8
  8034d8:	f800283a 	ret

008034dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8034dc:	defffd04 	addi	sp,sp,-12
  8034e0:	dfc00215 	stw	ra,8(sp)
  8034e4:	df000115 	stw	fp,4(sp)
  8034e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8034ec:	00802074 	movhi	r2,129
  8034f0:	10829404 	addi	r2,r2,2640
  8034f4:	10800017 	ldw	r2,0(r2)
  8034f8:	1005003a 	cmpeq	r2,r2,zero
  8034fc:	1000061e 	bne	r2,zero,803518 <alt_get_errno+0x3c>
  803500:	00802074 	movhi	r2,129
  803504:	10829404 	addi	r2,r2,2640
  803508:	10800017 	ldw	r2,0(r2)
  80350c:	103ee83a 	callr	r2
  803510:	e0bfff15 	stw	r2,-4(fp)
  803514:	00000306 	br	803524 <alt_get_errno+0x48>
  803518:	00802074 	movhi	r2,129
  80351c:	10898604 	addi	r2,r2,9752
  803520:	e0bfff15 	stw	r2,-4(fp)
  803524:	e0bfff17 	ldw	r2,-4(fp)
}
  803528:	e037883a 	mov	sp,fp
  80352c:	dfc00117 	ldw	ra,4(sp)
  803530:	df000017 	ldw	fp,0(sp)
  803534:	dec00204 	addi	sp,sp,8
  803538:	f800283a 	ret

0080353c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80353c:	defffc04 	addi	sp,sp,-16
  803540:	dfc00315 	stw	ra,12(sp)
  803544:	df000215 	stw	fp,8(sp)
  803548:	dc000115 	stw	r16,4(sp)
  80354c:	df000104 	addi	fp,sp,4
  803550:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803554:	e0bfff17 	ldw	r2,-4(fp)
  803558:	108000d0 	cmplti	r2,r2,3
  80355c:	10000f1e 	bne	r2,zero,80359c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  803560:	e13fff17 	ldw	r4,-4(fp)
  803564:	04002074 	movhi	r16,129
  803568:	843dfa04 	addi	r16,r16,-2072
  80356c:	01400304 	movi	r5,12
  803570:	0802c900 	call	802c90 <__mulsi3>
  803574:	1405883a 	add	r2,r2,r16
  803578:	10800204 	addi	r2,r2,8
  80357c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  803580:	e13fff17 	ldw	r4,-4(fp)
  803584:	04002074 	movhi	r16,129
  803588:	843dfa04 	addi	r16,r16,-2072
  80358c:	01400304 	movi	r5,12
  803590:	0802c900 	call	802c90 <__mulsi3>
  803594:	1405883a 	add	r2,r2,r16
  803598:	10000015 	stw	zero,0(r2)
  }
}
  80359c:	e037883a 	mov	sp,fp
  8035a0:	dfc00217 	ldw	ra,8(sp)
  8035a4:	df000117 	ldw	fp,4(sp)
  8035a8:	dc000017 	ldw	r16,0(sp)
  8035ac:	dec00304 	addi	sp,sp,12
  8035b0:	f800283a 	ret

008035b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8035b4:	defff804 	addi	sp,sp,-32
  8035b8:	df000715 	stw	fp,28(sp)
  8035bc:	df000704 	addi	fp,sp,28
  8035c0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8035c4:	0005303a 	rdctl	r2,status
  8035c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8035cc:	e0fffb17 	ldw	r3,-20(fp)
  8035d0:	00bfff84 	movi	r2,-2
  8035d4:	1884703a 	and	r2,r3,r2
  8035d8:	1001703a 	wrctl	status,r2
  
  return context;
  8035dc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8035e0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8035e4:	d0a00a17 	ldw	r2,-32728(gp)
  8035e8:	10c000c4 	addi	r3,r2,3
  8035ec:	00bfff04 	movi	r2,-4
  8035f0:	1884703a 	and	r2,r3,r2
  8035f4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8035f8:	d0e00a17 	ldw	r3,-32728(gp)
  8035fc:	e0bffe17 	ldw	r2,-8(fp)
  803600:	1887883a 	add	r3,r3,r2
  803604:	00804034 	movhi	r2,256
  803608:	10800004 	addi	r2,r2,0
  80360c:	10c0072e 	bgeu	r2,r3,80362c <sbrk+0x78>
  803610:	e0bffd17 	ldw	r2,-12(fp)
  803614:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803618:	e0bffa17 	ldw	r2,-24(fp)
  80361c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  803620:	00bfffc4 	movi	r2,-1
  803624:	e0bfff15 	stw	r2,-4(fp)
  803628:	00000c06 	br	80365c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80362c:	d0a00a17 	ldw	r2,-32728(gp)
  803630:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  803634:	d0e00a17 	ldw	r3,-32728(gp)
  803638:	e0bffe17 	ldw	r2,-8(fp)
  80363c:	1885883a 	add	r2,r3,r2
  803640:	d0a00a15 	stw	r2,-32728(gp)
  803644:	e0bffd17 	ldw	r2,-12(fp)
  803648:	e0bff915 	stw	r2,-28(fp)
  80364c:	e0bff917 	ldw	r2,-28(fp)
  803650:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  803654:	e0bffc17 	ldw	r2,-16(fp)
  803658:	e0bfff15 	stw	r2,-4(fp)
  80365c:	e0bfff17 	ldw	r2,-4(fp)
} 
  803660:	e037883a 	mov	sp,fp
  803664:	df000017 	ldw	fp,0(sp)
  803668:	dec00104 	addi	sp,sp,4
  80366c:	f800283a 	ret

00803670 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  803670:	defff704 	addi	sp,sp,-36
  803674:	dfc00815 	stw	ra,32(sp)
  803678:	df000715 	stw	fp,28(sp)
  80367c:	df000704 	addi	fp,sp,28
  803680:	e13ffb15 	stw	r4,-20(fp)
  803684:	e17ffc15 	stw	r5,-16(fp)
  803688:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80368c:	e0bffb17 	ldw	r2,-20(fp)
  803690:	1004803a 	cmplt	r2,r2,zero
  803694:	1000091e 	bne	r2,zero,8036bc <write+0x4c>
  803698:	e13ffb17 	ldw	r4,-20(fp)
  80369c:	01400304 	movi	r5,12
  8036a0:	0802c900 	call	802c90 <__mulsi3>
  8036a4:	1007883a 	mov	r3,r2
  8036a8:	00802074 	movhi	r2,129
  8036ac:	10bdfa04 	addi	r2,r2,-2072
  8036b0:	1887883a 	add	r3,r3,r2
  8036b4:	e0ffff15 	stw	r3,-4(fp)
  8036b8:	00000106 	br	8036c0 <write+0x50>
  8036bc:	e03fff15 	stw	zero,-4(fp)
  8036c0:	e0bfff17 	ldw	r2,-4(fp)
  8036c4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8036c8:	e0bffa17 	ldw	r2,-24(fp)
  8036cc:	1005003a 	cmpeq	r2,r2,zero
  8036d0:	1000241e 	bne	r2,zero,803764 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8036d4:	e0bffa17 	ldw	r2,-24(fp)
  8036d8:	10800217 	ldw	r2,8(r2)
  8036dc:	108000cc 	andi	r2,r2,3
  8036e0:	1005003a 	cmpeq	r2,r2,zero
  8036e4:	10001a1e 	bne	r2,zero,803750 <write+0xe0>
  8036e8:	e0bffa17 	ldw	r2,-24(fp)
  8036ec:	10800017 	ldw	r2,0(r2)
  8036f0:	10800617 	ldw	r2,24(r2)
  8036f4:	1005003a 	cmpeq	r2,r2,zero
  8036f8:	1000151e 	bne	r2,zero,803750 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8036fc:	e0bffa17 	ldw	r2,-24(fp)
  803700:	10800017 	ldw	r2,0(r2)
  803704:	10800617 	ldw	r2,24(r2)
  803708:	e17ffc17 	ldw	r5,-16(fp)
  80370c:	e1bffd17 	ldw	r6,-12(fp)
  803710:	e13ffa17 	ldw	r4,-24(fp)
  803714:	103ee83a 	callr	r2
  803718:	e0bff915 	stw	r2,-28(fp)
  80371c:	e0bff917 	ldw	r2,-28(fp)
  803720:	1004403a 	cmpge	r2,r2,zero
  803724:	1000071e 	bne	r2,zero,803744 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  803728:	08037940 	call	803794 <alt_get_errno>
  80372c:	e0fff917 	ldw	r3,-28(fp)
  803730:	00c7c83a 	sub	r3,zero,r3
  803734:	10c00015 	stw	r3,0(r2)
        return -1;
  803738:	00bfffc4 	movi	r2,-1
  80373c:	e0bffe15 	stw	r2,-8(fp)
  803740:	00000e06 	br	80377c <write+0x10c>
      }
      return rval;
  803744:	e0bff917 	ldw	r2,-28(fp)
  803748:	e0bffe15 	stw	r2,-8(fp)
  80374c:	00000b06 	br	80377c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  803750:	08037940 	call	803794 <alt_get_errno>
  803754:	1007883a 	mov	r3,r2
  803758:	00800344 	movi	r2,13
  80375c:	18800015 	stw	r2,0(r3)
  803760:	00000406 	br	803774 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  803764:	08037940 	call	803794 <alt_get_errno>
  803768:	1007883a 	mov	r3,r2
  80376c:	00801444 	movi	r2,81
  803770:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803774:	00bfffc4 	movi	r2,-1
  803778:	e0bffe15 	stw	r2,-8(fp)
  80377c:	e0bffe17 	ldw	r2,-8(fp)
}
  803780:	e037883a 	mov	sp,fp
  803784:	dfc00117 	ldw	ra,4(sp)
  803788:	df000017 	ldw	fp,0(sp)
  80378c:	dec00204 	addi	sp,sp,8
  803790:	f800283a 	ret

00803794 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803794:	defffd04 	addi	sp,sp,-12
  803798:	dfc00215 	stw	ra,8(sp)
  80379c:	df000115 	stw	fp,4(sp)
  8037a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8037a4:	00802074 	movhi	r2,129
  8037a8:	10829404 	addi	r2,r2,2640
  8037ac:	10800017 	ldw	r2,0(r2)
  8037b0:	1005003a 	cmpeq	r2,r2,zero
  8037b4:	1000061e 	bne	r2,zero,8037d0 <alt_get_errno+0x3c>
  8037b8:	00802074 	movhi	r2,129
  8037bc:	10829404 	addi	r2,r2,2640
  8037c0:	10800017 	ldw	r2,0(r2)
  8037c4:	103ee83a 	callr	r2
  8037c8:	e0bfff15 	stw	r2,-4(fp)
  8037cc:	00000306 	br	8037dc <alt_get_errno+0x48>
  8037d0:	00802074 	movhi	r2,129
  8037d4:	10898604 	addi	r2,r2,9752
  8037d8:	e0bfff15 	stw	r2,-4(fp)
  8037dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8037e0:	e037883a 	mov	sp,fp
  8037e4:	dfc00117 	ldw	ra,4(sp)
  8037e8:	df000017 	ldw	fp,0(sp)
  8037ec:	dec00204 	addi	sp,sp,8
  8037f0:	f800283a 	ret

008037f4 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  8037f4:	deffdf04 	addi	sp,sp,-132
  8037f8:	dfc02015 	stw	ra,128(sp)
  8037fc:	df001f15 	stw	fp,124(sp)
  803800:	df001f04 	addi	fp,sp,124
  803804:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  803808:	e17fe204 	addi	r5,fp,-120
  80380c:	01003fc4 	movi	r4,255
  803810:	080b64c0 	call	80b64c <OSTaskQuery>
  803814:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  803818:	e0bffe83 	ldbu	r2,-6(fp)
  80381c:	10803fcc 	andi	r2,r2,255
  803820:	1004c03a 	cmpne	r2,r2,zero
  803824:	1000191e 	bne	r2,zero,80388c <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  803828:	e0bfee83 	ldbu	r2,-70(fp)
  80382c:	10803fcc 	andi	r2,r2,255
  803830:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  803834:	d1270117 	ldw	r4,-25596(gp)
  803838:	e17ffd04 	addi	r5,fp,-12
  80383c:	0809b980 	call	809b98 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  803840:	e0bffe43 	ldbu	r2,-7(fp)
  803844:	10803fcc 	andi	r2,r2,255
  803848:	1005003a 	cmpeq	r2,r2,zero
  80384c:	1000071e 	bne	r2,zero,80386c <__env_lock+0x78>
  803850:	d0e00b17 	ldw	r3,-32724(gp)
  803854:	e0bfe117 	ldw	r2,-124(fp)
  803858:	10c0041e 	bne	r2,r3,80386c <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  80385c:	d0a70017 	ldw	r2,-25600(gp)
  803860:	10800044 	addi	r2,r2,1
  803864:	d0a70015 	stw	r2,-25600(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  803868:	00000806 	br	80388c <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  80386c:	d1270117 	ldw	r4,-25596(gp)
  803870:	e1bffe84 	addi	r6,fp,-6
  803874:	000b883a 	mov	r5,zero
  803878:	08096780 	call	809678 <OSSemPend>
    locks  = 1;
  80387c:	00800044 	movi	r2,1
  803880:	d0a70015 	stw	r2,-25600(gp)
    lockid = id;
  803884:	e0bfe117 	ldw	r2,-124(fp)
  803888:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80388c:	e037883a 	mov	sp,fp
  803890:	dfc00117 	ldw	ra,4(sp)
  803894:	df000017 	ldw	fp,0(sp)
  803898:	dec00204 	addi	sp,sp,8
  80389c:	f800283a 	ret

008038a0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  8038a0:	defffd04 	addi	sp,sp,-12
  8038a4:	dfc00215 	stw	ra,8(sp)
  8038a8:	df000115 	stw	fp,4(sp)
  8038ac:	df000104 	addi	fp,sp,4
  8038b0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  8038b4:	d0a70017 	ldw	r2,-25600(gp)
  8038b8:	1005003a 	cmpeq	r2,r2,zero
  8038bc:	10000a1e 	bne	r2,zero,8038e8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  8038c0:	d0a70017 	ldw	r2,-25600(gp)
  8038c4:	10bfffc4 	addi	r2,r2,-1
  8038c8:	d0a70015 	stw	r2,-25600(gp)
  8038cc:	d0a70017 	ldw	r2,-25600(gp)
  8038d0:	1004c03a 	cmpne	r2,r2,zero
  8038d4:	1000041e 	bne	r2,zero,8038e8 <__env_unlock+0x48>
  {
    lockid = -1;
  8038d8:	00bfffc4 	movi	r2,-1
  8038dc:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
  8038e0:	d1270117 	ldw	r4,-25596(gp)
  8038e4:	0809a700 	call	809a70 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  8038e8:	e037883a 	mov	sp,fp
  8038ec:	dfc00117 	ldw	ra,4(sp)
  8038f0:	df000017 	ldw	fp,0(sp)
  8038f4:	dec00204 	addi	sp,sp,8
  8038f8:	f800283a 	ret

008038fc <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  8038fc:	deffdb04 	addi	sp,sp,-148
  803900:	dfc02415 	stw	ra,144(sp)
  803904:	df002315 	stw	fp,140(sp)
  803908:	df002304 	addi	fp,sp,140
  80390c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  803910:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  803914:	00802074 	movhi	r2,129
  803918:	10898f44 	addi	r2,r2,9789
  80391c:	10800003 	ldbu	r2,0(r2)
  803920:	10803fcc 	andi	r2,r2,255
  803924:	10800058 	cmpnei	r2,r2,1
  803928:	1000311e 	bne	r2,zero,8039f0 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80392c:	e17fe204 	addi	r5,fp,-120
  803930:	01003fc4 	movi	r4,255
  803934:	080b64c0 	call	80b64c <OSTaskQuery>
  803938:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80393c:	e0bffe83 	ldbu	r2,-6(fp)
  803940:	10803fcc 	andi	r2,r2,255
  803944:	1004c03a 	cmpne	r2,r2,zero
  803948:	1000291e 	bne	r2,zero,8039f0 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  80394c:	e0bfee83 	ldbu	r2,-70(fp)
  803950:	10803fcc 	andi	r2,r2,255
  803954:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  803958:	d1270317 	ldw	r4,-25588(gp)
  80395c:	e17ffd04 	addi	r5,fp,-12
  803960:	0809b980 	call	809b98 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803964:	0005303a 	rdctl	r2,status
  803968:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80396c:	e0ffdf17 	ldw	r3,-132(fp)
  803970:	00bfff84 	movi	r2,-2
  803974:	1884703a 	and	r2,r3,r2
  803978:	1001703a 	wrctl	status,r2
  
  return context;
  80397c:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  803980:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  803984:	e0bffd0b 	ldhu	r2,-12(fp)
  803988:	10bfffcc 	andi	r2,r2,65535
  80398c:	1004c03a 	cmpne	r2,r2,zero
  803990:	10000b1e 	bne	r2,zero,8039c0 <__malloc_lock+0xc4>
  803994:	d0e00c17 	ldw	r3,-32720(gp)
  803998:	e0bfe117 	ldw	r2,-124(fp)
  80399c:	10c0081e 	bne	r2,r3,8039c0 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  8039a0:	d0a70217 	ldw	r2,-25592(gp)
  8039a4:	10800044 	addi	r2,r2,1
  8039a8:	d0a70215 	stw	r2,-25592(gp)
  8039ac:	e0bfe017 	ldw	r2,-128(fp)
  8039b0:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8039b4:	e0bfde17 	ldw	r2,-136(fp)
  8039b8:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  8039bc:	00000c06 	br	8039f0 <__malloc_lock+0xf4>
  8039c0:	e0bfe017 	ldw	r2,-128(fp)
  8039c4:	e0bfdd15 	stw	r2,-140(fp)
  8039c8:	e0bfdd17 	ldw	r2,-140(fp)
  8039cc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  8039d0:	d1270317 	ldw	r4,-25588(gp)
  8039d4:	e1bffe84 	addi	r6,fp,-6
  8039d8:	000b883a 	mov	r5,zero
  8039dc:	08096780 	call	809678 <OSSemPend>
    locks  = 1;
  8039e0:	00800044 	movi	r2,1
  8039e4:	d0a70215 	stw	r2,-25592(gp)
    lockid = id;
  8039e8:	e0bfe117 	ldw	r2,-124(fp)
  8039ec:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  8039f0:	e037883a 	mov	sp,fp
  8039f4:	dfc00117 	ldw	ra,4(sp)
  8039f8:	df000017 	ldw	fp,0(sp)
  8039fc:	dec00204 	addi	sp,sp,8
  803a00:	f800283a 	ret

00803a04 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  803a04:	defff804 	addi	sp,sp,-32
  803a08:	dfc00715 	stw	ra,28(sp)
  803a0c:	df000615 	stw	fp,24(sp)
  803a10:	df000604 	addi	fp,sp,24
  803a14:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  803a18:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  803a1c:	00802074 	movhi	r2,129
  803a20:	10898f44 	addi	r2,r2,9789
  803a24:	10800003 	ldbu	r2,0(r2)
  803a28:	10803fcc 	andi	r2,r2,255
  803a2c:	10800058 	cmpnei	r2,r2,1
  803a30:	1000231e 	bne	r2,zero,803ac0 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803a34:	0005303a 	rdctl	r2,status
  803a38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803a3c:	e0fffd17 	ldw	r3,-12(fp)
  803a40:	00bfff84 	movi	r2,-2
  803a44:	1884703a 	and	r2,r3,r2
  803a48:	1001703a 	wrctl	status,r2
  
  return context;
  803a4c:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  803a50:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  803a54:	d0a70217 	ldw	r2,-25592(gp)
  803a58:	1004c03a 	cmpne	r2,r2,zero
  803a5c:	1000051e 	bne	r2,zero,803a74 <__malloc_unlock+0x70>
  803a60:	e0bffe17 	ldw	r2,-8(fp)
  803a64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803a68:	e0bffc17 	ldw	r2,-16(fp)
  803a6c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  803a70:	00001306 	br	803ac0 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  803a74:	d0a70217 	ldw	r2,-25592(gp)
  803a78:	10bfffc4 	addi	r2,r2,-1
  803a7c:	d0a70215 	stw	r2,-25592(gp)
  803a80:	d0a70217 	ldw	r2,-25592(gp)
  803a84:	1004c03a 	cmpne	r2,r2,zero
  803a88:	1000091e 	bne	r2,zero,803ab0 <__malloc_unlock+0xac>
  {
    lockid = -1;
  803a8c:	00bfffc4 	movi	r2,-1
  803a90:	d0a00c15 	stw	r2,-32720(gp)
  803a94:	e0bffe17 	ldw	r2,-8(fp)
  803a98:	e0bffb15 	stw	r2,-20(fp)
  803a9c:	e0bffb17 	ldw	r2,-20(fp)
  803aa0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  803aa4:	d1270317 	ldw	r4,-25588(gp)
  803aa8:	0809a700 	call	809a70 <OSSemPost>
  803aac:	00000406 	br	803ac0 <__malloc_unlock+0xbc>
  803ab0:	e0bffe17 	ldw	r2,-8(fp)
  803ab4:	e0bffa15 	stw	r2,-24(fp)
  803ab8:	e0bffa17 	ldw	r2,-24(fp)
  803abc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  803ac0:	e037883a 	mov	sp,fp
  803ac4:	dfc00117 	ldw	ra,4(sp)
  803ac8:	df000017 	ldw	fp,0(sp)
  803acc:	dec00204 	addi	sp,sp,8
  803ad0:	f800283a 	ret

00803ad4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  803ad4:	defff604 	addi	sp,sp,-40
  803ad8:	dfc00915 	stw	ra,36(sp)
  803adc:	df000815 	stw	fp,32(sp)
  803ae0:	df000804 	addi	fp,sp,32
  803ae4:	e13ffc15 	stw	r4,-16(fp)
  803ae8:	e17ffd15 	stw	r5,-12(fp)
  803aec:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  803af0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  803af4:	e0bffe17 	ldw	r2,-8(fp)
  803af8:	1004c03a 	cmpne	r2,r2,zero
  803afc:	1000021e 	bne	r2,zero,803b08 <OSEventNameGet+0x34>
        return (0);
  803b00:	e03fff15 	stw	zero,-4(fp)
  803b04:	00003906 	br	803bec <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  803b08:	e0bffc17 	ldw	r2,-16(fp)
  803b0c:	1004c03a 	cmpne	r2,r2,zero
  803b10:	1000051e 	bne	r2,zero,803b28 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  803b14:	e0fffe17 	ldw	r3,-8(fp)
  803b18:	00800104 	movi	r2,4
  803b1c:	18800005 	stb	r2,0(r3)
        return (0);
  803b20:	e03fff15 	stw	zero,-4(fp)
  803b24:	00003106 	br	803bec <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  803b28:	e0bffd17 	ldw	r2,-12(fp)
  803b2c:	1004c03a 	cmpne	r2,r2,zero
  803b30:	1000051e 	bne	r2,zero,803b48 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  803b34:	e0fffe17 	ldw	r3,-8(fp)
  803b38:	00800304 	movi	r2,12
  803b3c:	18800005 	stb	r2,0(r3)
        return (0);
  803b40:	e03fff15 	stw	zero,-4(fp)
  803b44:	00002906 	br	803bec <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  803b48:	d0a71203 	ldbu	r2,-25528(gp)
  803b4c:	10803fcc 	andi	r2,r2,255
  803b50:	1005003a 	cmpeq	r2,r2,zero
  803b54:	1000051e 	bne	r2,zero,803b6c <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  803b58:	e0fffe17 	ldw	r3,-8(fp)
  803b5c:	00800444 	movi	r2,17
  803b60:	18800005 	stb	r2,0(r3)
        return (0);
  803b64:	e03fff15 	stw	zero,-4(fp)
  803b68:	00002006 	br	803bec <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  803b6c:	e0bffc17 	ldw	r2,-16(fp)
  803b70:	10800003 	ldbu	r2,0(r2)
  803b74:	10803fcc 	andi	r2,r2,255
  803b78:	10bfffc4 	addi	r2,r2,-1
  803b7c:	10800128 	cmpgeui	r2,r2,4
  803b80:	1000161e 	bne	r2,zero,803bdc <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803b84:	0005303a 	rdctl	r2,status
  803b88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803b8c:	e0fff917 	ldw	r3,-28(fp)
  803b90:	00bfff84 	movi	r2,-2
  803b94:	1884703a 	and	r2,r3,r2
  803b98:	1001703a 	wrctl	status,r2
  
  return context;
  803b9c:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  803ba0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  803ba4:	e0bffc17 	ldw	r2,-16(fp)
  803ba8:	11400384 	addi	r5,r2,14
  803bac:	e13ffd17 	ldw	r4,-12(fp)
  803bb0:	08056580 	call	805658 <OS_StrCopy>
  803bb4:	e0bffb05 	stb	r2,-20(fp)
  803bb8:	e0bffa17 	ldw	r2,-24(fp)
  803bbc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803bc0:	e0bff817 	ldw	r2,-32(fp)
  803bc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  803bc8:	e0bffe17 	ldw	r2,-8(fp)
  803bcc:	10000005 	stb	zero,0(r2)
    return (len);
  803bd0:	e0bffb03 	ldbu	r2,-20(fp)
  803bd4:	e0bfff15 	stw	r2,-4(fp)
  803bd8:	00000406 	br	803bec <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  803bdc:	e0fffe17 	ldw	r3,-8(fp)
  803be0:	00800044 	movi	r2,1
  803be4:	18800005 	stb	r2,0(r3)
             return (0);
  803be8:	e03fff15 	stw	zero,-4(fp)
  803bec:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  803bf0:	e037883a 	mov	sp,fp
  803bf4:	dfc00117 	ldw	ra,4(sp)
  803bf8:	df000017 	ldw	fp,0(sp)
  803bfc:	dec00204 	addi	sp,sp,8
  803c00:	f800283a 	ret

00803c04 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  803c04:	defff604 	addi	sp,sp,-40
  803c08:	dfc00915 	stw	ra,36(sp)
  803c0c:	df000815 	stw	fp,32(sp)
  803c10:	df000804 	addi	fp,sp,32
  803c14:	e13ffd15 	stw	r4,-12(fp)
  803c18:	e17ffe15 	stw	r5,-8(fp)
  803c1c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  803c20:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  803c24:	e0bfff17 	ldw	r2,-4(fp)
  803c28:	1005003a 	cmpeq	r2,r2,zero
  803c2c:	1000411e 	bne	r2,zero,803d34 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  803c30:	e0bffd17 	ldw	r2,-12(fp)
  803c34:	1004c03a 	cmpne	r2,r2,zero
  803c38:	1000041e 	bne	r2,zero,803c4c <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  803c3c:	e0ffff17 	ldw	r3,-4(fp)
  803c40:	00800104 	movi	r2,4
  803c44:	18800005 	stb	r2,0(r3)
        return;
  803c48:	00003a06 	br	803d34 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  803c4c:	e0bffe17 	ldw	r2,-8(fp)
  803c50:	1004c03a 	cmpne	r2,r2,zero
  803c54:	1000041e 	bne	r2,zero,803c68 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  803c58:	e0ffff17 	ldw	r3,-4(fp)
  803c5c:	00800304 	movi	r2,12
  803c60:	18800005 	stb	r2,0(r3)
        return;
  803c64:	00003306 	br	803d34 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  803c68:	d0a71203 	ldbu	r2,-25528(gp)
  803c6c:	10803fcc 	andi	r2,r2,255
  803c70:	1005003a 	cmpeq	r2,r2,zero
  803c74:	1000041e 	bne	r2,zero,803c88 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  803c78:	e0ffff17 	ldw	r3,-4(fp)
  803c7c:	00800484 	movi	r2,18
  803c80:	18800005 	stb	r2,0(r3)
        return;
  803c84:	00002b06 	br	803d34 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  803c88:	e0bffd17 	ldw	r2,-12(fp)
  803c8c:	10800003 	ldbu	r2,0(r2)
  803c90:	10803fcc 	andi	r2,r2,255
  803c94:	10bfffc4 	addi	r2,r2,-1
  803c98:	10800128 	cmpgeui	r2,r2,4
  803c9c:	10000f1e 	bne	r2,zero,803cdc <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803ca0:	0005303a 	rdctl	r2,status
  803ca4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803ca8:	e0fffa17 	ldw	r3,-24(fp)
  803cac:	00bfff84 	movi	r2,-2
  803cb0:	1884703a 	and	r2,r3,r2
  803cb4:	1001703a 	wrctl	status,r2
  
  return context;
  803cb8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  803cbc:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  803cc0:	e13ffe17 	ldw	r4,-8(fp)
  803cc4:	08056d80 	call	8056d8 <OS_StrLen>
  803cc8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  803ccc:	e0bffc03 	ldbu	r2,-16(fp)
  803cd0:	10800828 	cmpgeui	r2,r2,32
  803cd4:	1000051e 	bne	r2,zero,803cec <OSEventNameSet+0xe8>
  803cd8:	00000c06 	br	803d0c <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  803cdc:	e0ffff17 	ldw	r3,-4(fp)
  803ce0:	00800044 	movi	r2,1
  803ce4:	18800005 	stb	r2,0(r3)
             return;
  803ce8:	00001206 	br	803d34 <OSEventNameSet+0x130>
  803cec:	e0bffb17 	ldw	r2,-20(fp)
  803cf0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803cf4:	e0bff917 	ldw	r2,-28(fp)
  803cf8:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  803cfc:	e0ffff17 	ldw	r3,-4(fp)
  803d00:	008002c4 	movi	r2,11
  803d04:	18800005 	stb	r2,0(r3)
        return;
  803d08:	00000a06 	br	803d34 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  803d0c:	e0bffd17 	ldw	r2,-12(fp)
  803d10:	11000384 	addi	r4,r2,14
  803d14:	e17ffe17 	ldw	r5,-8(fp)
  803d18:	08056580 	call	805658 <OS_StrCopy>
  803d1c:	e0bffb17 	ldw	r2,-20(fp)
  803d20:	e0bff815 	stw	r2,-32(fp)
  803d24:	e0bff817 	ldw	r2,-32(fp)
  803d28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  803d2c:	e0bfff17 	ldw	r2,-4(fp)
  803d30:	10000005 	stb	zero,0(r2)
}
  803d34:	e037883a 	mov	sp,fp
  803d38:	dfc00117 	ldw	ra,4(sp)
  803d3c:	df000017 	ldw	fp,0(sp)
  803d40:	dec00204 	addi	sp,sp,8
  803d44:	f800283a 	ret

00803d48 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  803d48:	deffe704 	addi	sp,sp,-100
  803d4c:	dfc01815 	stw	ra,96(sp)
  803d50:	df001715 	stw	fp,92(sp)
  803d54:	df001704 	addi	fp,sp,92
  803d58:	e13ff615 	stw	r4,-40(fp)
  803d5c:	e17ff715 	stw	r5,-36(fp)
  803d60:	e1bff815 	stw	r6,-32(fp)
  803d64:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  803d68:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  803d6c:	e0800217 	ldw	r2,8(fp)
  803d70:	1004c03a 	cmpne	r2,r2,zero
  803d74:	1000021e 	bne	r2,zero,803d80 <OSEventPendMulti+0x38>
        return (0);
  803d78:	e03fff15 	stw	zero,-4(fp)
  803d7c:	00019906 	br	8043e4 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  803d80:	e0bff617 	ldw	r2,-40(fp)
  803d84:	1004c03a 	cmpne	r2,r2,zero
  803d88:	1000051e 	bne	r2,zero,803da0 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  803d8c:	e0c00217 	ldw	r3,8(fp)
  803d90:	00800104 	movi	r2,4
  803d94:	18800005 	stb	r2,0(r3)
        return (0);
  803d98:	e03fff15 	stw	zero,-4(fp)
  803d9c:	00019106 	br	8043e4 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  803da0:	e0bff717 	ldw	r2,-36(fp)
  803da4:	1004c03a 	cmpne	r2,r2,zero
  803da8:	1000051e 	bne	r2,zero,803dc0 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  803dac:	e0c00217 	ldw	r3,8(fp)
  803db0:	00800104 	movi	r2,4
  803db4:	18800005 	stb	r2,0(r3)
        return (0);
  803db8:	e03fff15 	stw	zero,-4(fp)
  803dbc:	00018906 	br	8043e4 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  803dc0:	e0bff817 	ldw	r2,-32(fp)
  803dc4:	1004c03a 	cmpne	r2,r2,zero
  803dc8:	1000051e 	bne	r2,zero,803de0 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  803dcc:	e0c00217 	ldw	r3,8(fp)
  803dd0:	00800104 	movi	r2,4
  803dd4:	18800005 	stb	r2,0(r3)
        return (0);
  803dd8:	e03fff15 	stw	zero,-4(fp)
  803ddc:	00018106 	br	8043e4 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  803de0:	e0bff717 	ldw	r2,-36(fp)
  803de4:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  803de8:	e0bff617 	ldw	r2,-40(fp)
  803dec:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  803df0:	e0bff517 	ldw	r2,-44(fp)
  803df4:	10800017 	ldw	r2,0(r2)
  803df8:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  803dfc:	00001806 	br	803e60 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  803e00:	e0bff417 	ldw	r2,-48(fp)
  803e04:	10800003 	ldbu	r2,0(r2)
  803e08:	10803fcc 	andi	r2,r2,255
  803e0c:	e0bffe15 	stw	r2,-8(fp)
  803e10:	e0fffe17 	ldw	r3,-8(fp)
  803e14:	188000a0 	cmpeqi	r2,r3,2
  803e18:	10000b1e 	bne	r2,zero,803e48 <OSEventPendMulti+0x100>
  803e1c:	e0fffe17 	ldw	r3,-8(fp)
  803e20:	188000e0 	cmpeqi	r2,r3,3
  803e24:	1000081e 	bne	r2,zero,803e48 <OSEventPendMulti+0x100>
  803e28:	e0fffe17 	ldw	r3,-8(fp)
  803e2c:	18800060 	cmpeqi	r2,r3,1
  803e30:	1000051e 	bne	r2,zero,803e48 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  803e34:	e0c00217 	ldw	r3,8(fp)
  803e38:	00800044 	movi	r2,1
  803e3c:	18800005 	stb	r2,0(r3)
                 return (0);
  803e40:	e03fff15 	stw	zero,-4(fp)
  803e44:	00016706 	br	8043e4 <OSEventPendMulti+0x69c>
        }
        pevents++;
  803e48:	e0bff517 	ldw	r2,-44(fp)
  803e4c:	10800104 	addi	r2,r2,4
  803e50:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  803e54:	e0bff517 	ldw	r2,-44(fp)
  803e58:	10800017 	ldw	r2,0(r2)
  803e5c:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  803e60:	e0bff417 	ldw	r2,-48(fp)
  803e64:	1004c03a 	cmpne	r2,r2,zero
  803e68:	103fe51e 	bne	r2,zero,803e00 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  803e6c:	d0a71203 	ldbu	r2,-25528(gp)
  803e70:	10803fcc 	andi	r2,r2,255
  803e74:	1005003a 	cmpeq	r2,r2,zero
  803e78:	1000051e 	bne	r2,zero,803e90 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  803e7c:	e0c00217 	ldw	r3,8(fp)
  803e80:	00800084 	movi	r2,2
  803e84:	18800005 	stb	r2,0(r3)
        return (0);
  803e88:	e03fff15 	stw	zero,-4(fp)
  803e8c:	00015506 	br	8043e4 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  803e90:	d0a70403 	ldbu	r2,-25584(gp)
  803e94:	10803fcc 	andi	r2,r2,255
  803e98:	1005003a 	cmpeq	r2,r2,zero
  803e9c:	1000051e 	bne	r2,zero,803eb4 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  803ea0:	e0c00217 	ldw	r3,8(fp)
  803ea4:	00800344 	movi	r2,13
  803ea8:	18800005 	stb	r2,0(r3)
        return (0);
  803eac:	e03fff15 	stw	zero,-4(fp)
  803eb0:	00014c06 	br	8043e4 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803eb4:	0005303a 	rdctl	r2,status
  803eb8:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803ebc:	e0ffef17 	ldw	r3,-68(fp)
  803ec0:	00bfff84 	movi	r2,-2
  803ec4:	1884703a 	and	r2,r3,r2
  803ec8:	1001703a 	wrctl	status,r2
  
  return context;
  803ecc:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  803ed0:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  803ed4:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  803ed8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  803edc:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  803ee0:	e0bff617 	ldw	r2,-40(fp)
  803ee4:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  803ee8:	e0bff517 	ldw	r2,-44(fp)
  803eec:	10800017 	ldw	r2,0(r2)
  803ef0:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  803ef4:	00008f06 	br	804134 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  803ef8:	e0bff417 	ldw	r2,-48(fp)
  803efc:	10800003 	ldbu	r2,0(r2)
  803f00:	10803fcc 	andi	r2,r2,255
  803f04:	e0bffd15 	stw	r2,-12(fp)
  803f08:	e0fffd17 	ldw	r3,-12(fp)
  803f0c:	188000a0 	cmpeqi	r2,r3,2
  803f10:	1000441e 	bne	r2,zero,804024 <OSEventPendMulti+0x2dc>
  803f14:	e0fffd17 	ldw	r3,-12(fp)
  803f18:	188000e0 	cmpeqi	r2,r3,3
  803f1c:	1000041e 	bne	r2,zero,803f30 <OSEventPendMulti+0x1e8>
  803f20:	e0fffd17 	ldw	r3,-12(fp)
  803f24:	18800060 	cmpeqi	r2,r3,1
  803f28:	1000211e 	bne	r2,zero,803fb0 <OSEventPendMulti+0x268>
  803f2c:	00006f06 	br	8040ec <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  803f30:	e0bff417 	ldw	r2,-48(fp)
  803f34:	1080020b 	ldhu	r2,8(r2)
  803f38:	10bfffcc 	andi	r2,r2,65535
  803f3c:	1005003a 	cmpeq	r2,r2,zero
  803f40:	1000171e 	bne	r2,zero,803fa0 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  803f44:	e0bff417 	ldw	r2,-48(fp)
  803f48:	1080020b 	ldhu	r2,8(r2)
  803f4c:	10bfffc4 	addi	r2,r2,-1
  803f50:	1007883a 	mov	r3,r2
  803f54:	e0bff417 	ldw	r2,-48(fp)
  803f58:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  803f5c:	e0fff717 	ldw	r3,-36(fp)
  803f60:	e0bff417 	ldw	r2,-48(fp)
  803f64:	18800015 	stw	r2,0(r3)
  803f68:	e0bff717 	ldw	r2,-36(fp)
  803f6c:	10800104 	addi	r2,r2,4
  803f70:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  803f74:	00800044 	movi	r2,1
  803f78:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  803f7c:	e0bff817 	ldw	r2,-32(fp)
  803f80:	10000015 	stw	zero,0(r2)
  803f84:	e0bff817 	ldw	r2,-32(fp)
  803f88:	10800104 	addi	r2,r2,4
  803f8c:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  803f90:	e0bff18b 	ldhu	r2,-58(fp)
  803f94:	10800044 	addi	r2,r2,1
  803f98:	e0bff18d 	sth	r2,-58(fp)
  803f9c:	00005f06 	br	80411c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  803fa0:	e0bff103 	ldbu	r2,-60(fp)
  803fa4:	10800054 	ori	r2,r2,1
  803fa8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  803fac:	00005b06 	br	80411c <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  803fb0:	e0bff417 	ldw	r2,-48(fp)
  803fb4:	10800117 	ldw	r2,4(r2)
  803fb8:	1005003a 	cmpeq	r2,r2,zero
  803fbc:	1000151e 	bne	r2,zero,804014 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  803fc0:	e0bff417 	ldw	r2,-48(fp)
  803fc4:	10c00117 	ldw	r3,4(r2)
  803fc8:	e0bff817 	ldw	r2,-32(fp)
  803fcc:	10c00015 	stw	r3,0(r2)
  803fd0:	e0bff817 	ldw	r2,-32(fp)
  803fd4:	10800104 	addi	r2,r2,4
  803fd8:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  803fdc:	e0bff417 	ldw	r2,-48(fp)
  803fe0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  803fe4:	e0fff717 	ldw	r3,-36(fp)
  803fe8:	e0bff417 	ldw	r2,-48(fp)
  803fec:	18800015 	stw	r2,0(r3)
  803ff0:	e0bff717 	ldw	r2,-36(fp)
  803ff4:	10800104 	addi	r2,r2,4
  803ff8:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  803ffc:	00800044 	movi	r2,1
  804000:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  804004:	e0bff18b 	ldhu	r2,-58(fp)
  804008:	10800044 	addi	r2,r2,1
  80400c:	e0bff18d 	sth	r2,-58(fp)
  804010:	00004206 	br	80411c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  804014:	e0bff103 	ldbu	r2,-60(fp)
  804018:	10800094 	ori	r2,r2,2
  80401c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  804020:	00003e06 	br	80411c <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  804024:	e0bff417 	ldw	r2,-48(fp)
  804028:	10800117 	ldw	r2,4(r2)
  80402c:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  804030:	e0bff317 	ldw	r2,-52(fp)
  804034:	1080058b 	ldhu	r2,22(r2)
  804038:	10bfffcc 	andi	r2,r2,65535
  80403c:	1005003a 	cmpeq	r2,r2,zero
  804040:	1000261e 	bne	r2,zero,8040dc <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  804044:	e0bff317 	ldw	r2,-52(fp)
  804048:	11000417 	ldw	r4,16(r2)
  80404c:	20c00017 	ldw	r3,0(r4)
  804050:	e0bff817 	ldw	r2,-32(fp)
  804054:	10c00015 	stw	r3,0(r2)
  804058:	e0bff817 	ldw	r2,-32(fp)
  80405c:	10800104 	addi	r2,r2,4
  804060:	e0bff815 	stw	r2,-32(fp)
  804064:	20c00104 	addi	r3,r4,4
  804068:	e0bff317 	ldw	r2,-52(fp)
  80406c:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  804070:	e0bff317 	ldw	r2,-52(fp)
  804074:	10c00417 	ldw	r3,16(r2)
  804078:	e0bff317 	ldw	r2,-52(fp)
  80407c:	10800217 	ldw	r2,8(r2)
  804080:	1880041e 	bne	r3,r2,804094 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  804084:	e0bff317 	ldw	r2,-52(fp)
  804088:	10c00117 	ldw	r3,4(r2)
  80408c:	e0bff317 	ldw	r2,-52(fp)
  804090:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  804094:	e0bff317 	ldw	r2,-52(fp)
  804098:	1080058b 	ldhu	r2,22(r2)
  80409c:	10bfffc4 	addi	r2,r2,-1
  8040a0:	1007883a 	mov	r3,r2
  8040a4:	e0bff317 	ldw	r2,-52(fp)
  8040a8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  8040ac:	e0fff717 	ldw	r3,-36(fp)
  8040b0:	e0bff417 	ldw	r2,-48(fp)
  8040b4:	18800015 	stw	r2,0(r3)
  8040b8:	e0bff717 	ldw	r2,-36(fp)
  8040bc:	10800104 	addi	r2,r2,4
  8040c0:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  8040c4:	00800044 	movi	r2,1
  8040c8:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  8040cc:	e0bff18b 	ldhu	r2,-58(fp)
  8040d0:	10800044 	addi	r2,r2,1
  8040d4:	e0bff18d 	sth	r2,-58(fp)
  8040d8:	00001006 	br	80411c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  8040dc:	e0bff103 	ldbu	r2,-60(fp)
  8040e0:	10800114 	ori	r2,r2,4
  8040e4:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  8040e8:	00000c06 	br	80411c <OSEventPendMulti+0x3d4>
  8040ec:	e0bff017 	ldw	r2,-64(fp)
  8040f0:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8040f4:	e0bfee17 	ldw	r2,-72(fp)
  8040f8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  8040fc:	e0bff717 	ldw	r2,-36(fp)
  804100:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  804104:	e0c00217 	ldw	r3,8(fp)
  804108:	00800044 	movi	r2,1
  80410c:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  804110:	e0bff18b 	ldhu	r2,-58(fp)
  804114:	e0bfff15 	stw	r2,-4(fp)
  804118:	0000b206 	br	8043e4 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80411c:	e0bff517 	ldw	r2,-44(fp)
  804120:	10800104 	addi	r2,r2,4
  804124:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  804128:	e0bff517 	ldw	r2,-44(fp)
  80412c:	10800017 	ldw	r2,0(r2)
  804130:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  804134:	e0bff417 	ldw	r2,-48(fp)
  804138:	1004c03a 	cmpne	r2,r2,zero
  80413c:	103f6e1e 	bne	r2,zero,803ef8 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  804140:	e0bff203 	ldbu	r2,-56(fp)
  804144:	10800058 	cmpnei	r2,r2,1
  804148:	10000b1e 	bne	r2,zero,804178 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  80414c:	e0bff717 	ldw	r2,-36(fp)
  804150:	10000015 	stw	zero,0(r2)
  804154:	e0bff017 	ldw	r2,-64(fp)
  804158:	e0bfed15 	stw	r2,-76(fp)
  80415c:	e0bfed17 	ldw	r2,-76(fp)
  804160:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  804164:	e0800217 	ldw	r2,8(fp)
  804168:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  80416c:	e0fff18b 	ldhu	r3,-58(fp)
  804170:	e0ffff15 	stw	r3,-4(fp)
  804174:	00009b06 	br	8043e4 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  804178:	d1271317 	ldw	r4,-25524(gp)
  80417c:	d0a71317 	ldw	r2,-25524(gp)
  804180:	10c00c03 	ldbu	r3,48(r2)
  804184:	e0bff103 	ldbu	r2,-60(fp)
  804188:	1884b03a 	or	r2,r3,r2
  80418c:	1007883a 	mov	r3,r2
  804190:	00bfe004 	movi	r2,-128
  804194:	1884b03a 	or	r2,r3,r2
  804198:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80419c:	d0a71317 	ldw	r2,-25524(gp)
  8041a0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  8041a4:	d0e71317 	ldw	r3,-25524(gp)
  8041a8:	e0bff90b 	ldhu	r2,-28(fp)
  8041ac:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  8041b0:	e13ff617 	ldw	r4,-40(fp)
  8041b4:	0804d780 	call	804d78 <OS_EventTaskWaitMulti>
  8041b8:	e0bff017 	ldw	r2,-64(fp)
  8041bc:	e0bfec15 	stw	r2,-80(fp)
  8041c0:	e0bfec17 	ldw	r2,-80(fp)
  8041c4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  8041c8:	08055140 	call	805514 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8041cc:	0005303a 	rdctl	r2,status
  8041d0:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8041d4:	e0ffeb17 	ldw	r3,-84(fp)
  8041d8:	00bfff84 	movi	r2,-2
  8041dc:	1884703a 	and	r2,r3,r2
  8041e0:	1001703a 	wrctl	status,r2
  
  return context;
  8041e4:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  8041e8:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  8041ec:	d0a71317 	ldw	r2,-25524(gp)
  8041f0:	10800c43 	ldbu	r2,49(r2)
  8041f4:	10803fcc 	andi	r2,r2,255
  8041f8:	e0bffc15 	stw	r2,-16(fp)
  8041fc:	e0fffc17 	ldw	r3,-16(fp)
  804200:	1805003a 	cmpeq	r2,r3,zero
  804204:	1000041e 	bne	r2,zero,804218 <OSEventPendMulti+0x4d0>
  804208:	e0fffc17 	ldw	r3,-16(fp)
  80420c:	188000a0 	cmpeqi	r2,r3,2
  804210:	1000011e 	bne	r2,zero,804218 <OSEventPendMulti+0x4d0>
  804214:	00001906 	br	80427c <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  804218:	d0a71317 	ldw	r2,-25524(gp)
  80421c:	10800717 	ldw	r2,28(r2)
  804220:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  804224:	e0bff417 	ldw	r2,-48(fp)
  804228:	1005003a 	cmpeq	r2,r2,zero
  80422c:	10000c1e 	bne	r2,zero,804260 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  804230:	e0fff717 	ldw	r3,-36(fp)
  804234:	e0bff417 	ldw	r2,-48(fp)
  804238:	18800015 	stw	r2,0(r3)
  80423c:	e0bff717 	ldw	r2,-36(fp)
  804240:	10800104 	addi	r2,r2,4
  804244:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  804248:	e0bff717 	ldw	r2,-36(fp)
  80424c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  804250:	e0bff18b 	ldhu	r2,-58(fp)
  804254:	10800044 	addi	r2,r2,1
  804258:	e0bff18d 	sth	r2,-58(fp)
  80425c:	00000a06 	br	804288 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  804260:	d0a71317 	ldw	r2,-25524(gp)
  804264:	00c00044 	movi	r3,1
  804268:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80426c:	d1271317 	ldw	r4,-25524(gp)
  804270:	e17ff617 	ldw	r5,-40(fp)
  804274:	0804f840 	call	804f84 <OS_EventTaskRemoveMulti>
             }
			 break;
  804278:	00000306 	br	804288 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80427c:	d1271317 	ldw	r4,-25524(gp)
  804280:	e17ff617 	ldw	r5,-40(fp)
  804284:	0804f840 	call	804f84 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  804288:	d0a71317 	ldw	r2,-25524(gp)
  80428c:	10800c43 	ldbu	r2,49(r2)
  804290:	10803fcc 	andi	r2,r2,255
  804294:	e0bffb15 	stw	r2,-20(fp)
  804298:	e0fffb17 	ldw	r3,-20(fp)
  80429c:	1805003a 	cmpeq	r2,r3,zero
  8042a0:	1000041e 	bne	r2,zero,8042b4 <OSEventPendMulti+0x56c>
  8042a4:	e0fffb17 	ldw	r3,-20(fp)
  8042a8:	188000a0 	cmpeqi	r2,r3,2
  8042ac:	10002c1e 	bne	r2,zero,804360 <OSEventPendMulti+0x618>
  8042b0:	00003406 	br	804384 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  8042b4:	e0bff417 	ldw	r2,-48(fp)
  8042b8:	10800003 	ldbu	r2,0(r2)
  8042bc:	10803fcc 	andi	r2,r2,255
  8042c0:	e0bffa15 	stw	r2,-24(fp)
  8042c4:	e0fffa17 	ldw	r3,-24(fp)
  8042c8:	18800050 	cmplti	r2,r3,1
  8042cc:	1000151e 	bne	r2,zero,804324 <OSEventPendMulti+0x5dc>
  8042d0:	e0fffa17 	ldw	r3,-24(fp)
  8042d4:	188000d0 	cmplti	r2,r3,3
  8042d8:	10000a1e 	bne	r2,zero,804304 <OSEventPendMulti+0x5bc>
  8042dc:	e0fffa17 	ldw	r3,-24(fp)
  8042e0:	188000e0 	cmpeqi	r2,r3,3
  8042e4:	1000011e 	bne	r2,zero,8042ec <OSEventPendMulti+0x5a4>
  8042e8:	00000e06 	br	804324 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  8042ec:	e0bff817 	ldw	r2,-32(fp)
  8042f0:	10000015 	stw	zero,0(r2)
  8042f4:	e0bff817 	ldw	r2,-32(fp)
  8042f8:	10800104 	addi	r2,r2,4
  8042fc:	e0bff815 	stw	r2,-32(fp)
                      break;
  804300:	00001406 	br	804354 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  804304:	d0a71317 	ldw	r2,-25524(gp)
  804308:	10c00917 	ldw	r3,36(r2)
  80430c:	e0bff817 	ldw	r2,-32(fp)
  804310:	10c00015 	stw	r3,0(r2)
  804314:	e0bff817 	ldw	r2,-32(fp)
  804318:	10800104 	addi	r2,r2,4
  80431c:	e0bff815 	stw	r2,-32(fp)
                      break;
  804320:	00000c06 	br	804354 <OSEventPendMulti+0x60c>
  804324:	e0bff017 	ldw	r2,-64(fp)
  804328:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80432c:	e0bfea17 	ldw	r2,-88(fp)
  804330:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  804334:	e0bff717 	ldw	r2,-36(fp)
  804338:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  80433c:	e0c00217 	ldw	r3,8(fp)
  804340:	00800044 	movi	r2,1
  804344:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  804348:	e0bff18b 	ldhu	r2,-58(fp)
  80434c:	e0bfff15 	stw	r2,-4(fp)
  804350:	00002406 	br	8043e4 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  804354:	e0800217 	ldw	r2,8(fp)
  804358:	10000005 	stb	zero,0(r2)
             break;
  80435c:	00001106 	br	8043a4 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  804360:	e0bff817 	ldw	r2,-32(fp)
  804364:	10000015 	stw	zero,0(r2)
  804368:	e0bff817 	ldw	r2,-32(fp)
  80436c:	10800104 	addi	r2,r2,4
  804370:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  804374:	e0c00217 	ldw	r3,8(fp)
  804378:	00800384 	movi	r2,14
  80437c:	18800005 	stb	r2,0(r3)
             break;
  804380:	00000806 	br	8043a4 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  804384:	e0bff817 	ldw	r2,-32(fp)
  804388:	10000015 	stw	zero,0(r2)
  80438c:	e0bff817 	ldw	r2,-32(fp)
  804390:	10800104 	addi	r2,r2,4
  804394:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  804398:	e0c00217 	ldw	r3,8(fp)
  80439c:	00800284 	movi	r2,10
  8043a0:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  8043a4:	d0a71317 	ldw	r2,-25524(gp)
  8043a8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  8043ac:	d0a71317 	ldw	r2,-25524(gp)
  8043b0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  8043b4:	d0a71317 	ldw	r2,-25524(gp)
  8043b8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8043bc:	d0a71317 	ldw	r2,-25524(gp)
  8043c0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  8043c4:	d0a71317 	ldw	r2,-25524(gp)
  8043c8:	10000915 	stw	zero,36(r2)
  8043cc:	e0bff017 	ldw	r2,-64(fp)
  8043d0:	e0bfe915 	stw	r2,-92(fp)
  8043d4:	e0bfe917 	ldw	r2,-92(fp)
  8043d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  8043dc:	e0fff18b 	ldhu	r3,-58(fp)
  8043e0:	e0ffff15 	stw	r3,-4(fp)
  8043e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8043e8:	e037883a 	mov	sp,fp
  8043ec:	dfc00117 	ldw	ra,4(sp)
  8043f0:	df000017 	ldw	fp,0(sp)
  8043f4:	dec00204 	addi	sp,sp,8
  8043f8:	f800283a 	ret

008043fc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  8043fc:	defffe04 	addi	sp,sp,-8
  804400:	dfc00115 	stw	ra,4(sp)
  804404:	df000015 	stw	fp,0(sp)
  804408:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  80440c:	080e5f40 	call	80e5f4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  804410:	08051cc0 	call	8051cc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  804414:	08052100 	call	805210 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  804418:	08053740 	call	805374 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  80441c:	08050f00 	call	8050f0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  804420:	08074240 	call	807424 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  804424:	0807dfc0 	call	807dfc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  804428:	08091580 	call	809158 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  80442c:	080527c0 	call	80527c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  804430:	08052f80 	call	8052f8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  804434:	080e6100 	call	80e610 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  804438:	0805bfc0 	call	805bfc <OSDebugInit>
#endif
}
  80443c:	e037883a 	mov	sp,fp
  804440:	dfc00117 	ldw	ra,4(sp)
  804444:	df000017 	ldw	fp,0(sp)
  804448:	dec00204 	addi	sp,sp,8
  80444c:	f800283a 	ret

00804450 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  804450:	defffc04 	addi	sp,sp,-16
  804454:	df000315 	stw	fp,12(sp)
  804458:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80445c:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  804460:	d0a70443 	ldbu	r2,-25583(gp)
  804464:	10803fcc 	andi	r2,r2,255
  804468:	10800058 	cmpnei	r2,r2,1
  80446c:	1000131e 	bne	r2,zero,8044bc <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804470:	0005303a 	rdctl	r2,status
  804474:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804478:	e0fffe17 	ldw	r3,-8(fp)
  80447c:	00bfff84 	movi	r2,-2
  804480:	1884703a 	and	r2,r3,r2
  804484:	1001703a 	wrctl	status,r2
  
  return context;
  804488:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80448c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  804490:	d0a71203 	ldbu	r2,-25528(gp)
  804494:	10803fcc 	andi	r2,r2,255
  804498:	10803fe0 	cmpeqi	r2,r2,255
  80449c:	1000031e 	bne	r2,zero,8044ac <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  8044a0:	d0a71203 	ldbu	r2,-25528(gp)
  8044a4:	10800044 	addi	r2,r2,1
  8044a8:	d0a71205 	stb	r2,-25528(gp)
  8044ac:	e0bfff17 	ldw	r2,-4(fp)
  8044b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8044b4:	e0bffd17 	ldw	r2,-12(fp)
  8044b8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  8044bc:	e037883a 	mov	sp,fp
  8044c0:	df000017 	ldw	fp,0(sp)
  8044c4:	dec00104 	addi	sp,sp,4
  8044c8:	f800283a 	ret

008044cc <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  8044cc:	defffb04 	addi	sp,sp,-20
  8044d0:	dfc00415 	stw	ra,16(sp)
  8044d4:	df000315 	stw	fp,12(sp)
  8044d8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8044dc:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  8044e0:	d0a70443 	ldbu	r2,-25583(gp)
  8044e4:	10803fcc 	andi	r2,r2,255
  8044e8:	10800058 	cmpnei	r2,r2,1
  8044ec:	1000321e 	bne	r2,zero,8045b8 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8044f0:	0005303a 	rdctl	r2,status
  8044f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8044f8:	e0fffe17 	ldw	r3,-8(fp)
  8044fc:	00bfff84 	movi	r2,-2
  804500:	1884703a 	and	r2,r3,r2
  804504:	1001703a 	wrctl	status,r2
  
  return context;
  804508:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80450c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  804510:	d0a71203 	ldbu	r2,-25528(gp)
  804514:	10803fcc 	andi	r2,r2,255
  804518:	1005003a 	cmpeq	r2,r2,zero
  80451c:	1000031e 	bne	r2,zero,80452c <OSIntExit+0x60>
            OSIntNesting--;
  804520:	d0a71203 	ldbu	r2,-25528(gp)
  804524:	10bfffc4 	addi	r2,r2,-1
  804528:	d0a71205 	stb	r2,-25528(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  80452c:	d0a71203 	ldbu	r2,-25528(gp)
  804530:	10803fcc 	andi	r2,r2,255
  804534:	1004c03a 	cmpne	r2,r2,zero
  804538:	10001b1e 	bne	r2,zero,8045a8 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80453c:	d0a70403 	ldbu	r2,-25584(gp)
  804540:	10803fcc 	andi	r2,r2,255
  804544:	1004c03a 	cmpne	r2,r2,zero
  804548:	1000171e 	bne	r2,zero,8045a8 <OSIntExit+0xdc>
                OS_SchedNew();
  80454c:	08055e80 	call	8055e8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  804550:	d0a70603 	ldbu	r2,-25576(gp)
  804554:	d0e70643 	ldbu	r3,-25575(gp)
  804558:	11003fcc 	andi	r4,r2,255
  80455c:	18803fcc 	andi	r2,r3,255
  804560:	20801126 	beq	r4,r2,8045a8 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  804564:	d0a70603 	ldbu	r2,-25576(gp)
  804568:	10803fcc 	andi	r2,r2,255
  80456c:	00c02074 	movhi	r3,129
  804570:	18de2404 	addi	r3,r3,30864
  804574:	1085883a 	add	r2,r2,r2
  804578:	1085883a 	add	r2,r2,r2
  80457c:	10c5883a 	add	r2,r2,r3
  804580:	10800017 	ldw	r2,0(r2)
  804584:	d0a70e15 	stw	r2,-25544(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  804588:	d0e70e17 	ldw	r3,-25544(gp)
  80458c:	18800e17 	ldw	r2,56(r3)
  804590:	10800044 	addi	r2,r2,1
  804594:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  804598:	d0a70917 	ldw	r2,-25564(gp)
  80459c:	10800044 	addi	r2,r2,1
  8045a0:	d0a70915 	stw	r2,-25564(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  8045a4:	080e1800 	call	80e180 <OSCtxSw>
  8045a8:	e0bfff17 	ldw	r2,-4(fp)
  8045ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8045b0:	e0bffd17 	ldw	r2,-12(fp)
  8045b4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  8045b8:	e037883a 	mov	sp,fp
  8045bc:	dfc00117 	ldw	ra,4(sp)
  8045c0:	df000017 	ldw	fp,0(sp)
  8045c4:	dec00204 	addi	sp,sp,8
  8045c8:	f800283a 	ret

008045cc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  8045cc:	defffc04 	addi	sp,sp,-16
  8045d0:	df000315 	stw	fp,12(sp)
  8045d4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8045d8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  8045dc:	d0a70443 	ldbu	r2,-25583(gp)
  8045e0:	10803fcc 	andi	r2,r2,255
  8045e4:	10800058 	cmpnei	r2,r2,1
  8045e8:	1000171e 	bne	r2,zero,804648 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8045ec:	0005303a 	rdctl	r2,status
  8045f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8045f4:	e0fffe17 	ldw	r3,-8(fp)
  8045f8:	00bfff84 	movi	r2,-2
  8045fc:	1884703a 	and	r2,r3,r2
  804600:	1001703a 	wrctl	status,r2
  
  return context;
  804604:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  804608:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80460c:	d0a71203 	ldbu	r2,-25528(gp)
  804610:	10803fcc 	andi	r2,r2,255
  804614:	1004c03a 	cmpne	r2,r2,zero
  804618:	1000071e 	bne	r2,zero,804638 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  80461c:	d0a70403 	ldbu	r2,-25584(gp)
  804620:	10803fcc 	andi	r2,r2,255
  804624:	10803fe0 	cmpeqi	r2,r2,255
  804628:	1000031e 	bne	r2,zero,804638 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  80462c:	d0a70403 	ldbu	r2,-25584(gp)
  804630:	10800044 	addi	r2,r2,1
  804634:	d0a70405 	stb	r2,-25584(gp)
  804638:	e0bfff17 	ldw	r2,-4(fp)
  80463c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804640:	e0bffd17 	ldw	r2,-12(fp)
  804644:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  804648:	e037883a 	mov	sp,fp
  80464c:	df000017 	ldw	fp,0(sp)
  804650:	dec00104 	addi	sp,sp,4
  804654:	f800283a 	ret

00804658 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  804658:	defff804 	addi	sp,sp,-32
  80465c:	dfc00715 	stw	ra,28(sp)
  804660:	df000615 	stw	fp,24(sp)
  804664:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  804668:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  80466c:	d0a70443 	ldbu	r2,-25583(gp)
  804670:	10803fcc 	andi	r2,r2,255
  804674:	10800058 	cmpnei	r2,r2,1
  804678:	10002b1e 	bne	r2,zero,804728 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80467c:	0005303a 	rdctl	r2,status
  804680:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804684:	e0fffe17 	ldw	r3,-8(fp)
  804688:	00bfff84 	movi	r2,-2
  80468c:	1884703a 	and	r2,r3,r2
  804690:	1001703a 	wrctl	status,r2
  
  return context;
  804694:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  804698:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  80469c:	d0a70403 	ldbu	r2,-25584(gp)
  8046a0:	10803fcc 	andi	r2,r2,255
  8046a4:	1005003a 	cmpeq	r2,r2,zero
  8046a8:	10001b1e 	bne	r2,zero,804718 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  8046ac:	d0a70403 	ldbu	r2,-25584(gp)
  8046b0:	10bfffc4 	addi	r2,r2,-1
  8046b4:	d0a70405 	stb	r2,-25584(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  8046b8:	d0a70403 	ldbu	r2,-25584(gp)
  8046bc:	10803fcc 	andi	r2,r2,255
  8046c0:	1004c03a 	cmpne	r2,r2,zero
  8046c4:	10000f1e 	bne	r2,zero,804704 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  8046c8:	d0a71203 	ldbu	r2,-25528(gp)
  8046cc:	10803fcc 	andi	r2,r2,255
  8046d0:	1004c03a 	cmpne	r2,r2,zero
  8046d4:	1000061e 	bne	r2,zero,8046f0 <OSSchedUnlock+0x98>
  8046d8:	e0bfff17 	ldw	r2,-4(fp)
  8046dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8046e0:	e0bffd17 	ldw	r2,-12(fp)
  8046e4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  8046e8:	08055140 	call	805514 <OS_Sched>
  8046ec:	00000e06 	br	804728 <OSSchedUnlock+0xd0>
  8046f0:	e0bfff17 	ldw	r2,-4(fp)
  8046f4:	e0bffc15 	stw	r2,-16(fp)
  8046f8:	e0bffc17 	ldw	r2,-16(fp)
  8046fc:	1001703a 	wrctl	status,r2
  804700:	00000906 	br	804728 <OSSchedUnlock+0xd0>
  804704:	e0bfff17 	ldw	r2,-4(fp)
  804708:	e0bffb15 	stw	r2,-20(fp)
  80470c:	e0bffb17 	ldw	r2,-20(fp)
  804710:	1001703a 	wrctl	status,r2
  804714:	00000406 	br	804728 <OSSchedUnlock+0xd0>
  804718:	e0bfff17 	ldw	r2,-4(fp)
  80471c:	e0bffa15 	stw	r2,-24(fp)
  804720:	e0bffa17 	ldw	r2,-24(fp)
  804724:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  804728:	e037883a 	mov	sp,fp
  80472c:	dfc00117 	ldw	ra,4(sp)
  804730:	df000017 	ldw	fp,0(sp)
  804734:	dec00204 	addi	sp,sp,8
  804738:	f800283a 	ret

0080473c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  80473c:	defffe04 	addi	sp,sp,-8
  804740:	dfc00115 	stw	ra,4(sp)
  804744:	df000015 	stw	fp,0(sp)
  804748:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  80474c:	d0a70443 	ldbu	r2,-25583(gp)
  804750:	10803fcc 	andi	r2,r2,255
  804754:	1004c03a 	cmpne	r2,r2,zero
  804758:	10000f1e 	bne	r2,zero,804798 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  80475c:	08055e80 	call	8055e8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  804760:	d0a70603 	ldbu	r2,-25576(gp)
  804764:	d0a70645 	stb	r2,-25575(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  804768:	d0a70603 	ldbu	r2,-25576(gp)
  80476c:	10803fcc 	andi	r2,r2,255
  804770:	00c02074 	movhi	r3,129
  804774:	18de2404 	addi	r3,r3,30864
  804778:	1085883a 	add	r2,r2,r2
  80477c:	1085883a 	add	r2,r2,r2
  804780:	10c5883a 	add	r2,r2,r3
  804784:	10800017 	ldw	r2,0(r2)
  804788:	d0a70e15 	stw	r2,-25544(gp)
        OSTCBCur      = OSTCBHighRdy;
  80478c:	d0a70e17 	ldw	r2,-25544(gp)
  804790:	d0a71315 	stw	r2,-25524(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  804794:	080e20c0 	call	80e20c <OSStartHighRdy>
    }
}
  804798:	e037883a 	mov	sp,fp
  80479c:	dfc00117 	ldw	ra,4(sp)
  8047a0:	df000017 	ldw	fp,0(sp)
  8047a4:	dec00204 	addi	sp,sp,8
  8047a8:	f800283a 	ret

008047ac <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  8047ac:	defff904 	addi	sp,sp,-28
  8047b0:	dfc00615 	stw	ra,24(sp)
  8047b4:	df000515 	stw	fp,20(sp)
  8047b8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8047bc:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  8047c0:	01000084 	movi	r4,2
  8047c4:	080b80c0 	call	80b80c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8047c8:	0005303a 	rdctl	r2,status
  8047cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8047d0:	e0fffe17 	ldw	r3,-8(fp)
  8047d4:	00bfff84 	movi	r2,-2
  8047d8:	1884703a 	and	r2,r3,r2
  8047dc:	1001703a 	wrctl	status,r2
  
  return context;
  8047e0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  8047e4:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  8047e8:	d0270515 	stw	zero,-25580(gp)
  8047ec:	e0bfff17 	ldw	r2,-4(fp)
  8047f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8047f4:	e0bffd17 	ldw	r2,-12(fp)
  8047f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  8047fc:	01001904 	movi	r4,100
  804800:	080b80c0 	call	80b80c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804804:	0005303a 	rdctl	r2,status
  804808:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80480c:	e0fffc17 	ldw	r3,-16(fp)
  804810:	00bfff84 	movi	r2,-2
  804814:	1884703a 	and	r2,r3,r2
  804818:	1001703a 	wrctl	status,r2
  
  return context;
  80481c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  804820:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  804824:	d0a70517 	ldw	r2,-25580(gp)
  804828:	d0a70a15 	stw	r2,-25560(gp)
    OSStatRdy    = OS_TRUE;
  80482c:	00800044 	movi	r2,1
  804830:	d0a71605 	stb	r2,-25512(gp)
  804834:	e0bfff17 	ldw	r2,-4(fp)
  804838:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80483c:	e0bffb17 	ldw	r2,-20(fp)
  804840:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  804844:	e037883a 	mov	sp,fp
  804848:	dfc00117 	ldw	ra,4(sp)
  80484c:	df000017 	ldw	fp,0(sp)
  804850:	dec00204 	addi	sp,sp,8
  804854:	f800283a 	ret

00804858 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  804858:	defff604 	addi	sp,sp,-40
  80485c:	dfc00915 	stw	ra,36(sp)
  804860:	df000815 	stw	fp,32(sp)
  804864:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  804868:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  80486c:	080e5d80 	call	80e5d8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804870:	0005303a 	rdctl	r2,status
  804874:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804878:	e0fffb17 	ldw	r3,-20(fp)
  80487c:	00bfff84 	movi	r2,-2
  804880:	1884703a 	and	r2,r3,r2
  804884:	1001703a 	wrctl	status,r2
  
  return context;
  804888:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  80488c:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  804890:	d0a71417 	ldw	r2,-25520(gp)
  804894:	10800044 	addi	r2,r2,1
  804898:	d0a71415 	stw	r2,-25520(gp)
  80489c:	e0bffc17 	ldw	r2,-16(fp)
  8048a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8048a4:	e0bffa17 	ldw	r2,-24(fp)
  8048a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  8048ac:	d0a70443 	ldbu	r2,-25583(gp)
  8048b0:	10803fcc 	andi	r2,r2,255
  8048b4:	10800058 	cmpnei	r2,r2,1
  8048b8:	1000721e 	bne	r2,zero,804a84 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  8048bc:	d0a70803 	ldbu	r2,-25568(gp)
  8048c0:	10803fcc 	andi	r2,r2,255
  8048c4:	e0bfff15 	stw	r2,-4(fp)
  8048c8:	e0ffff17 	ldw	r3,-4(fp)
  8048cc:	18800060 	cmpeqi	r2,r3,1
  8048d0:	10000a1e 	bne	r2,zero,8048fc <OSTimeTick+0xa4>
  8048d4:	e0ffff17 	ldw	r3,-4(fp)
  8048d8:	188000a0 	cmpeqi	r2,r3,2
  8048dc:	1000091e 	bne	r2,zero,804904 <OSTimeTick+0xac>
  8048e0:	e0ffff17 	ldw	r3,-4(fp)
  8048e4:	1805003a 	cmpeq	r2,r3,zero
  8048e8:	1000011e 	bne	r2,zero,8048f0 <OSTimeTick+0x98>
  8048ec:	00000a06 	br	804918 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  8048f0:	00800044 	movi	r2,1
  8048f4:	e0bffd05 	stb	r2,-12(fp)
                 break;
  8048f8:	00000a06 	br	804924 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  8048fc:	e03ffd05 	stb	zero,-12(fp)
                 break;
  804900:	00000806 	br	804924 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  804904:	00800044 	movi	r2,1
  804908:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80490c:	00800044 	movi	r2,1
  804910:	d0a70805 	stb	r2,-25568(gp)
                 break;
  804914:	00000306 	br	804924 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  804918:	00800044 	movi	r2,1
  80491c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  804920:	d0270805 	stb	zero,-25568(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  804924:	e0bffd03 	ldbu	r2,-12(fp)
  804928:	1005003a 	cmpeq	r2,r2,zero
  80492c:	1000551e 	bne	r2,zero,804a84 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  804930:	d0a70717 	ldw	r2,-25572(gp)
  804934:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  804938:	00004d06 	br	804a70 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80493c:	0005303a 	rdctl	r2,status
  804940:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804944:	e0fff917 	ldw	r3,-28(fp)
  804948:	00bfff84 	movi	r2,-2
  80494c:	1884703a 	and	r2,r3,r2
  804950:	1001703a 	wrctl	status,r2
  
  return context;
  804954:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  804958:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80495c:	e0bffe17 	ldw	r2,-8(fp)
  804960:	10800b8b 	ldhu	r2,46(r2)
  804964:	10bfffcc 	andi	r2,r2,65535
  804968:	1005003a 	cmpeq	r2,r2,zero
  80496c:	1000391e 	bne	r2,zero,804a54 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  804970:	e0bffe17 	ldw	r2,-8(fp)
  804974:	10800b8b 	ldhu	r2,46(r2)
  804978:	10bfffc4 	addi	r2,r2,-1
  80497c:	1007883a 	mov	r3,r2
  804980:	e0bffe17 	ldw	r2,-8(fp)
  804984:	10c00b8d 	sth	r3,46(r2)
  804988:	e0bffe17 	ldw	r2,-8(fp)
  80498c:	10800b8b 	ldhu	r2,46(r2)
  804990:	10bfffcc 	andi	r2,r2,65535
  804994:	1004c03a 	cmpne	r2,r2,zero
  804998:	10002e1e 	bne	r2,zero,804a54 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80499c:	e0bffe17 	ldw	r2,-8(fp)
  8049a0:	10800c03 	ldbu	r2,48(r2)
  8049a4:	10803fcc 	andi	r2,r2,255
  8049a8:	10800dcc 	andi	r2,r2,55
  8049ac:	1005003a 	cmpeq	r2,r2,zero
  8049b0:	10000b1e 	bne	r2,zero,8049e0 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  8049b4:	e0bffe17 	ldw	r2,-8(fp)
  8049b8:	10c00c03 	ldbu	r3,48(r2)
  8049bc:	00bff204 	movi	r2,-56
  8049c0:	1884703a 	and	r2,r3,r2
  8049c4:	1007883a 	mov	r3,r2
  8049c8:	e0bffe17 	ldw	r2,-8(fp)
  8049cc:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  8049d0:	e0fffe17 	ldw	r3,-8(fp)
  8049d4:	00800044 	movi	r2,1
  8049d8:	18800c45 	stb	r2,49(r3)
  8049dc:	00000206 	br	8049e8 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  8049e0:	e0bffe17 	ldw	r2,-8(fp)
  8049e4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  8049e8:	e0bffe17 	ldw	r2,-8(fp)
  8049ec:	10800c03 	ldbu	r2,48(r2)
  8049f0:	10803fcc 	andi	r2,r2,255
  8049f4:	1080020c 	andi	r2,r2,8
  8049f8:	1004c03a 	cmpne	r2,r2,zero
  8049fc:	1000151e 	bne	r2,zero,804a54 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  804a00:	e0bffe17 	ldw	r2,-8(fp)
  804a04:	10c00d83 	ldbu	r3,54(r2)
  804a08:	d0a71003 	ldbu	r2,-25536(gp)
  804a0c:	1884b03a 	or	r2,r3,r2
  804a10:	d0a71005 	stb	r2,-25536(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  804a14:	e0bffe17 	ldw	r2,-8(fp)
  804a18:	10800d03 	ldbu	r2,52(r2)
  804a1c:	11003fcc 	andi	r4,r2,255
  804a20:	e0bffe17 	ldw	r2,-8(fp)
  804a24:	10800d03 	ldbu	r2,52(r2)
  804a28:	10c03fcc 	andi	r3,r2,255
  804a2c:	d0a71044 	addi	r2,gp,-25535
  804a30:	1885883a 	add	r2,r3,r2
  804a34:	10c00003 	ldbu	r3,0(r2)
  804a38:	e0bffe17 	ldw	r2,-8(fp)
  804a3c:	10800d43 	ldbu	r2,53(r2)
  804a40:	1884b03a 	or	r2,r3,r2
  804a44:	1007883a 	mov	r3,r2
  804a48:	d0a71044 	addi	r2,gp,-25535
  804a4c:	2085883a 	add	r2,r4,r2
  804a50:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  804a54:	e0bffe17 	ldw	r2,-8(fp)
  804a58:	10800517 	ldw	r2,20(r2)
  804a5c:	e0bffe15 	stw	r2,-8(fp)
  804a60:	e0bffc17 	ldw	r2,-16(fp)
  804a64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804a68:	e0bff817 	ldw	r2,-32(fp)
  804a6c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  804a70:	e0bffe17 	ldw	r2,-8(fp)
  804a74:	10800c83 	ldbu	r2,50(r2)
  804a78:	10803fcc 	andi	r2,r2,255
  804a7c:	10800518 	cmpnei	r2,r2,20
  804a80:	103fae1e 	bne	r2,zero,80493c <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  804a84:	e037883a 	mov	sp,fp
  804a88:	dfc00117 	ldw	ra,4(sp)
  804a8c:	df000017 	ldw	fp,0(sp)
  804a90:	dec00204 	addi	sp,sp,8
  804a94:	f800283a 	ret

00804a98 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  804a98:	deffff04 	addi	sp,sp,-4
  804a9c:	df000015 	stw	fp,0(sp)
  804aa0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  804aa4:	00804784 	movi	r2,286
}
  804aa8:	e037883a 	mov	sp,fp
  804aac:	df000017 	ldw	fp,0(sp)
  804ab0:	dec00104 	addi	sp,sp,4
  804ab4:	f800283a 	ret

00804ab8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  804ab8:	deffff04 	addi	sp,sp,-4
  804abc:	df000015 	stw	fp,0(sp)
  804ac0:	d839883a 	mov	fp,sp
}
  804ac4:	e037883a 	mov	sp,fp
  804ac8:	df000017 	ldw	fp,0(sp)
  804acc:	dec00104 	addi	sp,sp,4
  804ad0:	f800283a 	ret

00804ad4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  804ad4:	defff804 	addi	sp,sp,-32
  804ad8:	dfc00715 	stw	ra,28(sp)
  804adc:	df000615 	stw	fp,24(sp)
  804ae0:	df000604 	addi	fp,sp,24
  804ae4:	e13ffc15 	stw	r4,-16(fp)
  804ae8:	e17ffd15 	stw	r5,-12(fp)
  804aec:	e1bffe05 	stb	r6,-8(fp)
  804af0:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  804af4:	e0bffc17 	ldw	r2,-16(fp)
  804af8:	10800283 	ldbu	r2,10(r2)
  804afc:	10c03fcc 	andi	r3,r2,255
  804b00:	00802074 	movhi	r2,129
  804b04:	10bb9604 	addi	r2,r2,-4520
  804b08:	10c5883a 	add	r2,r2,r3
  804b0c:	10800003 	ldbu	r2,0(r2)
  804b10:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  804b14:	e0fffa83 	ldbu	r3,-22(fp)
  804b18:	e0bffc17 	ldw	r2,-16(fp)
  804b1c:	1885883a 	add	r2,r3,r2
  804b20:	10800204 	addi	r2,r2,8
  804b24:	108000c3 	ldbu	r2,3(r2)
  804b28:	10c03fcc 	andi	r3,r2,255
  804b2c:	00802074 	movhi	r2,129
  804b30:	10bb9604 	addi	r2,r2,-4520
  804b34:	10c5883a 	add	r2,r2,r3
  804b38:	10800003 	ldbu	r2,0(r2)
  804b3c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  804b40:	e0bffa83 	ldbu	r2,-22(fp)
  804b44:	100490fa 	slli	r2,r2,3
  804b48:	1007883a 	mov	r3,r2
  804b4c:	e0bffa43 	ldbu	r2,-23(fp)
  804b50:	1885883a 	add	r2,r3,r2
  804b54:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  804b58:	e0bffa03 	ldbu	r2,-24(fp)
  804b5c:	00c02074 	movhi	r3,129
  804b60:	18de2404 	addi	r3,r3,30864
  804b64:	1085883a 	add	r2,r2,r2
  804b68:	1085883a 	add	r2,r2,r2
  804b6c:	10c5883a 	add	r2,r2,r3
  804b70:	10800017 	ldw	r2,0(r2)
  804b74:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  804b78:	e0bffb17 	ldw	r2,-20(fp)
  804b7c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  804b80:	e0fffb17 	ldw	r3,-20(fp)
  804b84:	e0bffd17 	ldw	r2,-12(fp)
  804b88:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  804b8c:	e0bffb17 	ldw	r2,-20(fp)
  804b90:	10800c03 	ldbu	r2,48(r2)
  804b94:	1007883a 	mov	r3,r2
  804b98:	e0bffe03 	ldbu	r2,-8(fp)
  804b9c:	0084303a 	nor	r2,zero,r2
  804ba0:	1884703a 	and	r2,r3,r2
  804ba4:	1007883a 	mov	r3,r2
  804ba8:	e0bffb17 	ldw	r2,-20(fp)
  804bac:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  804bb0:	e0fffb17 	ldw	r3,-20(fp)
  804bb4:	e0bfff03 	ldbu	r2,-4(fp)
  804bb8:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  804bbc:	e0bffb17 	ldw	r2,-20(fp)
  804bc0:	10800c03 	ldbu	r2,48(r2)
  804bc4:	10803fcc 	andi	r2,r2,255
  804bc8:	1080020c 	andi	r2,r2,8
  804bcc:	1004c03a 	cmpne	r2,r2,zero
  804bd0:	1000111e 	bne	r2,zero,804c18 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  804bd4:	e0bffb17 	ldw	r2,-20(fp)
  804bd8:	10c00d83 	ldbu	r3,54(r2)
  804bdc:	d0a71003 	ldbu	r2,-25536(gp)
  804be0:	1884b03a 	or	r2,r3,r2
  804be4:	d0a71005 	stb	r2,-25536(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  804be8:	e13ffa83 	ldbu	r4,-22(fp)
  804bec:	e0fffa83 	ldbu	r3,-22(fp)
  804bf0:	d0a71044 	addi	r2,gp,-25535
  804bf4:	1885883a 	add	r2,r3,r2
  804bf8:	10c00003 	ldbu	r3,0(r2)
  804bfc:	e0bffb17 	ldw	r2,-20(fp)
  804c00:	10800d43 	ldbu	r2,53(r2)
  804c04:	1884b03a 	or	r2,r3,r2
  804c08:	1007883a 	mov	r3,r2
  804c0c:	d0a71044 	addi	r2,gp,-25535
  804c10:	2085883a 	add	r2,r4,r2
  804c14:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  804c18:	e13ffb17 	ldw	r4,-20(fp)
  804c1c:	e17ffc17 	ldw	r5,-16(fp)
  804c20:	0804ecc0 	call	804ecc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  804c24:	e0bffb17 	ldw	r2,-20(fp)
  804c28:	10800817 	ldw	r2,32(r2)
  804c2c:	1005003a 	cmpeq	r2,r2,zero
  804c30:	1000071e 	bne	r2,zero,804c50 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  804c34:	e0bffb17 	ldw	r2,-20(fp)
  804c38:	11400817 	ldw	r5,32(r2)
  804c3c:	e13ffb17 	ldw	r4,-20(fp)
  804c40:	0804f840 	call	804f84 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  804c44:	e0fffb17 	ldw	r3,-20(fp)
  804c48:	e0bffc17 	ldw	r2,-16(fp)
  804c4c:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  804c50:	e0bffa03 	ldbu	r2,-24(fp)
}
  804c54:	e037883a 	mov	sp,fp
  804c58:	dfc00117 	ldw	ra,4(sp)
  804c5c:	df000017 	ldw	fp,0(sp)
  804c60:	dec00204 	addi	sp,sp,8
  804c64:	f800283a 	ret

00804c68 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  804c68:	defffd04 	addi	sp,sp,-12
  804c6c:	df000215 	stw	fp,8(sp)
  804c70:	df000204 	addi	fp,sp,8
  804c74:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  804c78:	d0e71317 	ldw	r3,-25524(gp)
  804c7c:	e0bfff17 	ldw	r2,-4(fp)
  804c80:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  804c84:	d0a71317 	ldw	r2,-25524(gp)
  804c88:	10800d03 	ldbu	r2,52(r2)
  804c8c:	11003fcc 	andi	r4,r2,255
  804c90:	d0a71317 	ldw	r2,-25524(gp)
  804c94:	10800d03 	ldbu	r2,52(r2)
  804c98:	10c03fcc 	andi	r3,r2,255
  804c9c:	e0bfff17 	ldw	r2,-4(fp)
  804ca0:	1885883a 	add	r2,r3,r2
  804ca4:	10800204 	addi	r2,r2,8
  804ca8:	10c000c3 	ldbu	r3,3(r2)
  804cac:	d0a71317 	ldw	r2,-25524(gp)
  804cb0:	10800d43 	ldbu	r2,53(r2)
  804cb4:	1884b03a 	or	r2,r3,r2
  804cb8:	1007883a 	mov	r3,r2
  804cbc:	e0bfff17 	ldw	r2,-4(fp)
  804cc0:	2085883a 	add	r2,r4,r2
  804cc4:	10800204 	addi	r2,r2,8
  804cc8:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  804ccc:	e0bfff17 	ldw	r2,-4(fp)
  804cd0:	10c00283 	ldbu	r3,10(r2)
  804cd4:	d0a71317 	ldw	r2,-25524(gp)
  804cd8:	10800d83 	ldbu	r2,54(r2)
  804cdc:	1884b03a 	or	r2,r3,r2
  804ce0:	1007883a 	mov	r3,r2
  804ce4:	e0bfff17 	ldw	r2,-4(fp)
  804ce8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  804cec:	d0a71317 	ldw	r2,-25524(gp)
  804cf0:	10800d03 	ldbu	r2,52(r2)
  804cf4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  804cf8:	e13ffe03 	ldbu	r4,-8(fp)
  804cfc:	e0fffe03 	ldbu	r3,-8(fp)
  804d00:	d0a71044 	addi	r2,gp,-25535
  804d04:	1885883a 	add	r2,r3,r2
  804d08:	10800003 	ldbu	r2,0(r2)
  804d0c:	1007883a 	mov	r3,r2
  804d10:	d0a71317 	ldw	r2,-25524(gp)
  804d14:	10800d43 	ldbu	r2,53(r2)
  804d18:	0084303a 	nor	r2,zero,r2
  804d1c:	1884703a 	and	r2,r3,r2
  804d20:	1007883a 	mov	r3,r2
  804d24:	d0a71044 	addi	r2,gp,-25535
  804d28:	2085883a 	add	r2,r4,r2
  804d2c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  804d30:	e0fffe03 	ldbu	r3,-8(fp)
  804d34:	d0a71044 	addi	r2,gp,-25535
  804d38:	1885883a 	add	r2,r3,r2
  804d3c:	10800003 	ldbu	r2,0(r2)
  804d40:	10803fcc 	andi	r2,r2,255
  804d44:	1004c03a 	cmpne	r2,r2,zero
  804d48:	1000071e 	bne	r2,zero,804d68 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  804d4c:	d0a71317 	ldw	r2,-25524(gp)
  804d50:	10800d83 	ldbu	r2,54(r2)
  804d54:	0084303a 	nor	r2,zero,r2
  804d58:	1007883a 	mov	r3,r2
  804d5c:	d0a71003 	ldbu	r2,-25536(gp)
  804d60:	1884703a 	and	r2,r3,r2
  804d64:	d0a71005 	stb	r2,-25536(gp)
    }
}
  804d68:	e037883a 	mov	sp,fp
  804d6c:	df000017 	ldw	fp,0(sp)
  804d70:	dec00104 	addi	sp,sp,4
  804d74:	f800283a 	ret

00804d78 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  804d78:	defffb04 	addi	sp,sp,-20
  804d7c:	df000415 	stw	fp,16(sp)
  804d80:	df000404 	addi	fp,sp,16
  804d84:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  804d88:	d0a71317 	ldw	r2,-25524(gp)
  804d8c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  804d90:	d0e71317 	ldw	r3,-25524(gp)
  804d94:	e0bfff17 	ldw	r2,-4(fp)
  804d98:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  804d9c:	e0bfff17 	ldw	r2,-4(fp)
  804da0:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  804da4:	e0bffe17 	ldw	r2,-8(fp)
  804da8:	10800017 	ldw	r2,0(r2)
  804dac:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  804db0:	00002006 	br	804e34 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  804db4:	d0a71317 	ldw	r2,-25524(gp)
  804db8:	10800d03 	ldbu	r2,52(r2)
  804dbc:	11003fcc 	andi	r4,r2,255
  804dc0:	d0a71317 	ldw	r2,-25524(gp)
  804dc4:	10800d03 	ldbu	r2,52(r2)
  804dc8:	10c03fcc 	andi	r3,r2,255
  804dcc:	e0bffd17 	ldw	r2,-12(fp)
  804dd0:	1885883a 	add	r2,r3,r2
  804dd4:	10800204 	addi	r2,r2,8
  804dd8:	10c000c3 	ldbu	r3,3(r2)
  804ddc:	d0a71317 	ldw	r2,-25524(gp)
  804de0:	10800d43 	ldbu	r2,53(r2)
  804de4:	1884b03a 	or	r2,r3,r2
  804de8:	1007883a 	mov	r3,r2
  804dec:	e0bffd17 	ldw	r2,-12(fp)
  804df0:	2085883a 	add	r2,r4,r2
  804df4:	10800204 	addi	r2,r2,8
  804df8:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  804dfc:	e0bffd17 	ldw	r2,-12(fp)
  804e00:	10c00283 	ldbu	r3,10(r2)
  804e04:	d0a71317 	ldw	r2,-25524(gp)
  804e08:	10800d83 	ldbu	r2,54(r2)
  804e0c:	1884b03a 	or	r2,r3,r2
  804e10:	1007883a 	mov	r3,r2
  804e14:	e0bffd17 	ldw	r2,-12(fp)
  804e18:	10c00285 	stb	r3,10(r2)
        pevents++;
  804e1c:	e0bffe17 	ldw	r2,-8(fp)
  804e20:	10800104 	addi	r2,r2,4
  804e24:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  804e28:	e0bffe17 	ldw	r2,-8(fp)
  804e2c:	10800017 	ldw	r2,0(r2)
  804e30:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  804e34:	e0bffd17 	ldw	r2,-12(fp)
  804e38:	1004c03a 	cmpne	r2,r2,zero
  804e3c:	103fdd1e 	bne	r2,zero,804db4 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  804e40:	d0a71317 	ldw	r2,-25524(gp)
  804e44:	10800d03 	ldbu	r2,52(r2)
  804e48:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  804e4c:	e13ffc03 	ldbu	r4,-16(fp)
  804e50:	e0fffc03 	ldbu	r3,-16(fp)
  804e54:	d0a71044 	addi	r2,gp,-25535
  804e58:	1885883a 	add	r2,r3,r2
  804e5c:	10800003 	ldbu	r2,0(r2)
  804e60:	1007883a 	mov	r3,r2
  804e64:	d0a71317 	ldw	r2,-25524(gp)
  804e68:	10800d43 	ldbu	r2,53(r2)
  804e6c:	0084303a 	nor	r2,zero,r2
  804e70:	1884703a 	and	r2,r3,r2
  804e74:	1007883a 	mov	r3,r2
  804e78:	d0a71044 	addi	r2,gp,-25535
  804e7c:	2085883a 	add	r2,r4,r2
  804e80:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  804e84:	e0fffc03 	ldbu	r3,-16(fp)
  804e88:	d0a71044 	addi	r2,gp,-25535
  804e8c:	1885883a 	add	r2,r3,r2
  804e90:	10800003 	ldbu	r2,0(r2)
  804e94:	10803fcc 	andi	r2,r2,255
  804e98:	1004c03a 	cmpne	r2,r2,zero
  804e9c:	1000071e 	bne	r2,zero,804ebc <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  804ea0:	d0a71317 	ldw	r2,-25524(gp)
  804ea4:	10800d83 	ldbu	r2,54(r2)
  804ea8:	0084303a 	nor	r2,zero,r2
  804eac:	1007883a 	mov	r3,r2
  804eb0:	d0a71003 	ldbu	r2,-25536(gp)
  804eb4:	1884703a 	and	r2,r3,r2
  804eb8:	d0a71005 	stb	r2,-25536(gp)
    }
}
  804ebc:	e037883a 	mov	sp,fp
  804ec0:	df000017 	ldw	fp,0(sp)
  804ec4:	dec00104 	addi	sp,sp,4
  804ec8:	f800283a 	ret

00804ecc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  804ecc:	defffc04 	addi	sp,sp,-16
  804ed0:	df000315 	stw	fp,12(sp)
  804ed4:	df000304 	addi	fp,sp,12
  804ed8:	e13ffe15 	stw	r4,-8(fp)
  804edc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  804ee0:	e0bffe17 	ldw	r2,-8(fp)
  804ee4:	10800d03 	ldbu	r2,52(r2)
  804ee8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  804eec:	e13ffd03 	ldbu	r4,-12(fp)
  804ef0:	e0fffd03 	ldbu	r3,-12(fp)
  804ef4:	e0bfff17 	ldw	r2,-4(fp)
  804ef8:	1885883a 	add	r2,r3,r2
  804efc:	10800204 	addi	r2,r2,8
  804f00:	108000c3 	ldbu	r2,3(r2)
  804f04:	1007883a 	mov	r3,r2
  804f08:	e0bffe17 	ldw	r2,-8(fp)
  804f0c:	10800d43 	ldbu	r2,53(r2)
  804f10:	0084303a 	nor	r2,zero,r2
  804f14:	1884703a 	and	r2,r3,r2
  804f18:	1007883a 	mov	r3,r2
  804f1c:	e0bfff17 	ldw	r2,-4(fp)
  804f20:	2085883a 	add	r2,r4,r2
  804f24:	10800204 	addi	r2,r2,8
  804f28:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  804f2c:	e0fffd03 	ldbu	r3,-12(fp)
  804f30:	e0bfff17 	ldw	r2,-4(fp)
  804f34:	1885883a 	add	r2,r3,r2
  804f38:	10800204 	addi	r2,r2,8
  804f3c:	108000c3 	ldbu	r2,3(r2)
  804f40:	10803fcc 	andi	r2,r2,255
  804f44:	1004c03a 	cmpne	r2,r2,zero
  804f48:	10000a1e 	bne	r2,zero,804f74 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  804f4c:	e0bfff17 	ldw	r2,-4(fp)
  804f50:	10800283 	ldbu	r2,10(r2)
  804f54:	1007883a 	mov	r3,r2
  804f58:	e0bffe17 	ldw	r2,-8(fp)
  804f5c:	10800d83 	ldbu	r2,54(r2)
  804f60:	0084303a 	nor	r2,zero,r2
  804f64:	1884703a 	and	r2,r3,r2
  804f68:	1007883a 	mov	r3,r2
  804f6c:	e0bfff17 	ldw	r2,-4(fp)
  804f70:	10c00285 	stb	r3,10(r2)
    }
}
  804f74:	e037883a 	mov	sp,fp
  804f78:	df000017 	ldw	fp,0(sp)
  804f7c:	dec00104 	addi	sp,sp,4
  804f80:	f800283a 	ret

00804f84 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  804f84:	defffa04 	addi	sp,sp,-24
  804f88:	df000515 	stw	fp,20(sp)
  804f8c:	df000504 	addi	fp,sp,20
  804f90:	e13ffe15 	stw	r4,-8(fp)
  804f94:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  804f98:	e0bffe17 	ldw	r2,-8(fp)
  804f9c:	10800d03 	ldbu	r2,52(r2)
  804fa0:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  804fa4:	e0bffe17 	ldw	r2,-8(fp)
  804fa8:	10800d83 	ldbu	r2,54(r2)
  804fac:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  804fb0:	e0bffe17 	ldw	r2,-8(fp)
  804fb4:	10800d43 	ldbu	r2,53(r2)
  804fb8:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  804fbc:	e0bfff17 	ldw	r2,-4(fp)
  804fc0:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  804fc4:	e0bffd17 	ldw	r2,-12(fp)
  804fc8:	10800017 	ldw	r2,0(r2)
  804fcc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  804fd0:	00002606 	br	80506c <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  804fd4:	e13ffb83 	ldbu	r4,-18(fp)
  804fd8:	e0fffb83 	ldbu	r3,-18(fp)
  804fdc:	e0bffc17 	ldw	r2,-16(fp)
  804fe0:	1885883a 	add	r2,r3,r2
  804fe4:	10800204 	addi	r2,r2,8
  804fe8:	108000c3 	ldbu	r2,3(r2)
  804fec:	1007883a 	mov	r3,r2
  804ff0:	e0bffb03 	ldbu	r2,-20(fp)
  804ff4:	0084303a 	nor	r2,zero,r2
  804ff8:	1884703a 	and	r2,r3,r2
  804ffc:	1007883a 	mov	r3,r2
  805000:	e0bffc17 	ldw	r2,-16(fp)
  805004:	2085883a 	add	r2,r4,r2
  805008:	10800204 	addi	r2,r2,8
  80500c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  805010:	e0fffb83 	ldbu	r3,-18(fp)
  805014:	e0bffc17 	ldw	r2,-16(fp)
  805018:	1885883a 	add	r2,r3,r2
  80501c:	10800204 	addi	r2,r2,8
  805020:	108000c3 	ldbu	r2,3(r2)
  805024:	10803fcc 	andi	r2,r2,255
  805028:	1004c03a 	cmpne	r2,r2,zero
  80502c:	1000091e 	bne	r2,zero,805054 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  805030:	e0bffc17 	ldw	r2,-16(fp)
  805034:	10800283 	ldbu	r2,10(r2)
  805038:	1007883a 	mov	r3,r2
  80503c:	e0bffb43 	ldbu	r2,-19(fp)
  805040:	0084303a 	nor	r2,zero,r2
  805044:	1884703a 	and	r2,r3,r2
  805048:	1007883a 	mov	r3,r2
  80504c:	e0bffc17 	ldw	r2,-16(fp)
  805050:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  805054:	e0bffd17 	ldw	r2,-12(fp)
  805058:	10800104 	addi	r2,r2,4
  80505c:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  805060:	e0bffd17 	ldw	r2,-12(fp)
  805064:	10800017 	ldw	r2,0(r2)
  805068:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80506c:	e0bffc17 	ldw	r2,-16(fp)
  805070:	1004c03a 	cmpne	r2,r2,zero
  805074:	103fd71e 	bne	r2,zero,804fd4 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  805078:	e037883a 	mov	sp,fp
  80507c:	df000017 	ldw	fp,0(sp)
  805080:	dec00104 	addi	sp,sp,4
  805084:	f800283a 	ret

00805088 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  805088:	defffc04 	addi	sp,sp,-16
  80508c:	df000315 	stw	fp,12(sp)
  805090:	df000304 	addi	fp,sp,12
  805094:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  805098:	e0bfff17 	ldw	r2,-4(fp)
  80509c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  8050a0:	e0bfff17 	ldw	r2,-4(fp)
  8050a4:	108002c4 	addi	r2,r2,11
  8050a8:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8050ac:	e03ffd05 	stb	zero,-12(fp)
  8050b0:	00000806 	br	8050d4 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  8050b4:	e0bffe17 	ldw	r2,-8(fp)
  8050b8:	10000005 	stb	zero,0(r2)
  8050bc:	e0bffe17 	ldw	r2,-8(fp)
  8050c0:	10800044 	addi	r2,r2,1
  8050c4:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8050c8:	e0bffd03 	ldbu	r2,-12(fp)
  8050cc:	10800044 	addi	r2,r2,1
  8050d0:	e0bffd05 	stb	r2,-12(fp)
  8050d4:	e0bffd03 	ldbu	r2,-12(fp)
  8050d8:	108000f0 	cmpltui	r2,r2,3
  8050dc:	103ff51e 	bne	r2,zero,8050b4 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  8050e0:	e037883a 	mov	sp,fp
  8050e4:	df000017 	ldw	fp,0(sp)
  8050e8:	dec00104 	addi	sp,sp,4
  8050ec:	f800283a 	ret

008050f0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  8050f0:	defffb04 	addi	sp,sp,-20
  8050f4:	dfc00415 	stw	ra,16(sp)
  8050f8:	df000315 	stw	fp,12(sp)
  8050fc:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  805100:	01002074 	movhi	r4,129
  805104:	211a1004 	addi	r4,r4,26688
  805108:	0142d004 	movi	r5,2880
  80510c:	08054540 	call	805454 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  805110:	00802074 	movhi	r2,129
  805114:	109a1004 	addi	r2,r2,26688
  805118:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  80511c:	00802074 	movhi	r2,129
  805120:	109a1c04 	addi	r2,r2,26736
  805124:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  805128:	e03fff0d 	sth	zero,-4(fp)
  80512c:	00001306 	br	80517c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  805130:	e0bffe17 	ldw	r2,-8(fp)
  805134:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  805138:	e0fffe17 	ldw	r3,-8(fp)
  80513c:	e0bffd17 	ldw	r2,-12(fp)
  805140:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  805144:	e0fffe17 	ldw	r3,-8(fp)
  805148:	00800fc4 	movi	r2,63
  80514c:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  805150:	e0bffe17 	ldw	r2,-8(fp)
  805154:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  805158:	e0bffe17 	ldw	r2,-8(fp)
  80515c:	10800c04 	addi	r2,r2,48
  805160:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  805164:	e0bffd17 	ldw	r2,-12(fp)
  805168:	10800c04 	addi	r2,r2,48
  80516c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  805170:	e0bfff0b 	ldhu	r2,-4(fp)
  805174:	10800044 	addi	r2,r2,1
  805178:	e0bfff0d 	sth	r2,-4(fp)
  80517c:	e0bfff0b 	ldhu	r2,-4(fp)
  805180:	10800ef0 	cmpltui	r2,r2,59
  805184:	103fea1e 	bne	r2,zero,805130 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  805188:	e0bffe17 	ldw	r2,-8(fp)
  80518c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  805190:	e0bffe17 	ldw	r2,-8(fp)
  805194:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  805198:	e0fffe17 	ldw	r3,-8(fp)
  80519c:	00800fc4 	movi	r2,63
  8051a0:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  8051a4:	e0bffe17 	ldw	r2,-8(fp)
  8051a8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  8051ac:	00802074 	movhi	r2,129
  8051b0:	109a1004 	addi	r2,r2,26688
  8051b4:	d0a71115 	stw	r2,-25532(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  8051b8:	e037883a 	mov	sp,fp
  8051bc:	dfc00117 	ldw	ra,4(sp)
  8051c0:	df000017 	ldw	fp,0(sp)
  8051c4:	dec00204 	addi	sp,sp,8
  8051c8:	f800283a 	ret

008051cc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  8051cc:	deffff04 	addi	sp,sp,-4
  8051d0:	df000015 	stw	fp,0(sp)
  8051d4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  8051d8:	d0271415 	stw	zero,-25520(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  8051dc:	d0271205 	stb	zero,-25528(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  8051e0:	d0270405 	stb	zero,-25584(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  8051e4:	d0270c45 	stb	zero,-25551(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  8051e8:	d0270445 	stb	zero,-25583(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  8051ec:	d0270915 	stw	zero,-25564(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  8051f0:	d0270515 	stw	zero,-25580(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  8051f4:	d0271715 	stw	zero,-25508(gp)
    OSIdleCtrMax  = 0L;
  8051f8:	d0270a15 	stw	zero,-25560(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  8051fc:	d0271605 	stb	zero,-25512(gp)
#endif
}
  805200:	e037883a 	mov	sp,fp
  805204:	df000017 	ldw	fp,0(sp)
  805208:	dec00104 	addi	sp,sp,4
  80520c:	f800283a 	ret

00805210 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  805210:	defffd04 	addi	sp,sp,-12
  805214:	df000215 	stw	fp,8(sp)
  805218:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  80521c:	d0271005 	stb	zero,-25536(gp)
    prdytbl       = &OSRdyTbl[0];
  805220:	d0a71044 	addi	r2,gp,-25535
  805224:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  805228:	e03fff05 	stb	zero,-4(fp)
  80522c:	00000806 	br	805250 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  805230:	e0bffe17 	ldw	r2,-8(fp)
  805234:	10000005 	stb	zero,0(r2)
  805238:	e0bffe17 	ldw	r2,-8(fp)
  80523c:	10800044 	addi	r2,r2,1
  805240:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  805244:	e0bfff03 	ldbu	r2,-4(fp)
  805248:	10800044 	addi	r2,r2,1
  80524c:	e0bfff05 	stb	r2,-4(fp)
  805250:	e0bfff03 	ldbu	r2,-4(fp)
  805254:	108000f0 	cmpltui	r2,r2,3
  805258:	103ff51e 	bne	r2,zero,805230 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  80525c:	d0270645 	stb	zero,-25575(gp)
    OSPrioHighRdy = 0;
  805260:	d0270605 	stb	zero,-25576(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  805264:	d0270e15 	stw	zero,-25544(gp)
    OSTCBCur      = (OS_TCB *)0;
  805268:	d0271315 	stw	zero,-25524(gp)
}
  80526c:	e037883a 	mov	sp,fp
  805270:	df000017 	ldw	fp,0(sp)
  805274:	dec00104 	addi	sp,sp,4
  805278:	f800283a 	ret

0080527c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  80527c:	defff804 	addi	sp,sp,-32
  805280:	dfc00715 	stw	ra,28(sp)
  805284:	df000615 	stw	fp,24(sp)
  805288:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  80528c:	01802074 	movhi	r6,129
  805290:	319a0f04 	addi	r6,r6,26684
  805294:	00bfffd4 	movui	r2,65535
  805298:	d8800015 	stw	r2,0(sp)
  80529c:	00802074 	movhi	r2,129
  8052a0:	10981004 	addi	r2,r2,24640
  8052a4:	d8800115 	stw	r2,4(sp)
  8052a8:	00808004 	movi	r2,512
  8052ac:	d8800215 	stw	r2,8(sp)
  8052b0:	d8000315 	stw	zero,12(sp)
  8052b4:	008000c4 	movi	r2,3
  8052b8:	d8800415 	stw	r2,16(sp)
  8052bc:	01002034 	movhi	r4,128
  8052c0:	2115cc04 	addi	r4,r4,22320
  8052c4:	000b883a 	mov	r5,zero
  8052c8:	01c00504 	movi	r7,20
  8052cc:	080a5140 	call	80a514 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  8052d0:	01402074 	movhi	r5,129
  8052d4:	297bd604 	addi	r5,r5,-4264
  8052d8:	01000504 	movi	r4,20
  8052dc:	e1bfff04 	addi	r6,fp,-4
  8052e0:	080ae480 	call	80ae48 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  8052e4:	e037883a 	mov	sp,fp
  8052e8:	dfc00117 	ldw	ra,4(sp)
  8052ec:	df000017 	ldw	fp,0(sp)
  8052f0:	dec00204 	addi	sp,sp,8
  8052f4:	f800283a 	ret

008052f8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  8052f8:	defff804 	addi	sp,sp,-32
  8052fc:	dfc00715 	stw	ra,28(sp)
  805300:	df000615 	stw	fp,24(sp)
  805304:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  805308:	01802074 	movhi	r6,129
  80530c:	31979704 	addi	r6,r6,24156
  805310:	00bfff94 	movui	r2,65534
  805314:	d8800015 	stw	r2,0(sp)
  805318:	00802074 	movhi	r2,129
  80531c:	10959804 	addi	r2,r2,22112
  805320:	d8800115 	stw	r2,4(sp)
  805324:	00808004 	movi	r2,512
  805328:	d8800215 	stw	r2,8(sp)
  80532c:	d8000315 	stw	zero,12(sp)
  805330:	008000c4 	movi	r2,3
  805334:	d8800415 	stw	r2,16(sp)
  805338:	01002034 	movhi	r4,128
  80533c:	2115e304 	addi	r4,r4,22412
  805340:	000b883a 	mov	r5,zero
  805344:	01c004c4 	movi	r7,19
  805348:	080a5140 	call	80a514 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  80534c:	01402074 	movhi	r5,129
  805350:	297bda04 	addi	r5,r5,-4248
  805354:	010004c4 	movi	r4,19
  805358:	e1bfff04 	addi	r6,fp,-4
  80535c:	080ae480 	call	80ae48 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  805360:	e037883a 	mov	sp,fp
  805364:	dfc00117 	ldw	ra,4(sp)
  805368:	df000017 	ldw	fp,0(sp)
  80536c:	dec00204 	addi	sp,sp,8
  805370:	f800283a 	ret

00805374 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  805374:	defffb04 	addi	sp,sp,-20
  805378:	dfc00415 	stw	ra,16(sp)
  80537c:	df000315 	stw	fp,12(sp)
  805380:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  805384:	01002074 	movhi	r4,129
  805388:	211ce004 	addi	r4,r4,29568
  80538c:	01414404 	movi	r5,1296
  805390:	08054540 	call	805454 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  805394:	01002074 	movhi	r4,129
  805398:	211e2404 	addi	r4,r4,30864
  80539c:	01401504 	movi	r5,84
  8053a0:	08054540 	call	805454 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  8053a4:	00802074 	movhi	r2,129
  8053a8:	109ce004 	addi	r2,r2,29568
  8053ac:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  8053b0:	00802074 	movhi	r2,129
  8053b4:	109cfb04 	addi	r2,r2,29676
  8053b8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  8053bc:	e03fff05 	stb	zero,-4(fp)
  8053c0:	00001106 	br	805408 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  8053c4:	e0fffe17 	ldw	r3,-8(fp)
  8053c8:	e0bffd17 	ldw	r2,-12(fp)
  8053cc:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  8053d0:	e0fffe17 	ldw	r3,-8(fp)
  8053d4:	00800fc4 	movi	r2,63
  8053d8:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  8053dc:	e0bffe17 	ldw	r2,-8(fp)
  8053e0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  8053e4:	e0bffe17 	ldw	r2,-8(fp)
  8053e8:	10801b04 	addi	r2,r2,108
  8053ec:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  8053f0:	e0bffd17 	ldw	r2,-12(fp)
  8053f4:	10801b04 	addi	r2,r2,108
  8053f8:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  8053fc:	e0bfff03 	ldbu	r2,-4(fp)
  805400:	10800044 	addi	r2,r2,1
  805404:	e0bfff05 	stb	r2,-4(fp)
  805408:	e0bfff03 	ldbu	r2,-4(fp)
  80540c:	108002f0 	cmpltui	r2,r2,11
  805410:	103fec1e 	bne	r2,zero,8053c4 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  805414:	e0bffe17 	ldw	r2,-8(fp)
  805418:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  80541c:	e0fffe17 	ldw	r3,-8(fp)
  805420:	00800fc4 	movi	r2,63
  805424:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  805428:	e0bffe17 	ldw	r2,-8(fp)
  80542c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  805430:	d0270715 	stw	zero,-25572(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  805434:	00802074 	movhi	r2,129
  805438:	109ce004 	addi	r2,r2,29568
  80543c:	d0a70b15 	stw	r2,-25556(gp)
}
  805440:	e037883a 	mov	sp,fp
  805444:	dfc00117 	ldw	ra,4(sp)
  805448:	df000017 	ldw	fp,0(sp)
  80544c:	dec00204 	addi	sp,sp,8
  805450:	f800283a 	ret

00805454 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  805454:	defffd04 	addi	sp,sp,-12
  805458:	df000215 	stw	fp,8(sp)
  80545c:	df000204 	addi	fp,sp,8
  805460:	e13ffe15 	stw	r4,-8(fp)
  805464:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  805468:	00000806 	br	80548c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  80546c:	e0bffe17 	ldw	r2,-8(fp)
  805470:	10000005 	stb	zero,0(r2)
  805474:	e0bffe17 	ldw	r2,-8(fp)
  805478:	10800044 	addi	r2,r2,1
  80547c:	e0bffe15 	stw	r2,-8(fp)
        size--;
  805480:	e0bfff0b 	ldhu	r2,-4(fp)
  805484:	10bfffc4 	addi	r2,r2,-1
  805488:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  80548c:	e0bfff0b 	ldhu	r2,-4(fp)
  805490:	1004c03a 	cmpne	r2,r2,zero
  805494:	103ff51e 	bne	r2,zero,80546c <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  805498:	e037883a 	mov	sp,fp
  80549c:	df000017 	ldw	fp,0(sp)
  8054a0:	dec00104 	addi	sp,sp,4
  8054a4:	f800283a 	ret

008054a8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  8054a8:	defffc04 	addi	sp,sp,-16
  8054ac:	df000315 	stw	fp,12(sp)
  8054b0:	df000304 	addi	fp,sp,12
  8054b4:	e13ffd15 	stw	r4,-12(fp)
  8054b8:	e17ffe15 	stw	r5,-8(fp)
  8054bc:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  8054c0:	00000d06 	br	8054f8 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  8054c4:	e0bffe17 	ldw	r2,-8(fp)
  8054c8:	10c00003 	ldbu	r3,0(r2)
  8054cc:	e0bffd17 	ldw	r2,-12(fp)
  8054d0:	10c00005 	stb	r3,0(r2)
  8054d4:	e0bffd17 	ldw	r2,-12(fp)
  8054d8:	10800044 	addi	r2,r2,1
  8054dc:	e0bffd15 	stw	r2,-12(fp)
  8054e0:	e0bffe17 	ldw	r2,-8(fp)
  8054e4:	10800044 	addi	r2,r2,1
  8054e8:	e0bffe15 	stw	r2,-8(fp)
        size--;
  8054ec:	e0bfff0b 	ldhu	r2,-4(fp)
  8054f0:	10bfffc4 	addi	r2,r2,-1
  8054f4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  8054f8:	e0bfff0b 	ldhu	r2,-4(fp)
  8054fc:	1004c03a 	cmpne	r2,r2,zero
  805500:	103ff01e 	bne	r2,zero,8054c4 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  805504:	e037883a 	mov	sp,fp
  805508:	df000017 	ldw	fp,0(sp)
  80550c:	dec00104 	addi	sp,sp,4
  805510:	f800283a 	ret

00805514 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  805514:	defffb04 	addi	sp,sp,-20
  805518:	dfc00415 	stw	ra,16(sp)
  80551c:	df000315 	stw	fp,12(sp)
  805520:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  805524:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805528:	0005303a 	rdctl	r2,status
  80552c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805530:	e0fffe17 	ldw	r3,-8(fp)
  805534:	00bfff84 	movi	r2,-2
  805538:	1884703a 	and	r2,r3,r2
  80553c:	1001703a 	wrctl	status,r2
  
  return context;
  805540:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  805544:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  805548:	d0a71203 	ldbu	r2,-25528(gp)
  80554c:	10803fcc 	andi	r2,r2,255
  805550:	1004c03a 	cmpne	r2,r2,zero
  805554:	10001b1e 	bne	r2,zero,8055c4 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  805558:	d0a70403 	ldbu	r2,-25584(gp)
  80555c:	10803fcc 	andi	r2,r2,255
  805560:	1004c03a 	cmpne	r2,r2,zero
  805564:	1000171e 	bne	r2,zero,8055c4 <OS_Sched+0xb0>
            OS_SchedNew();
  805568:	08055e80 	call	8055e8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  80556c:	d0a70603 	ldbu	r2,-25576(gp)
  805570:	d0e70643 	ldbu	r3,-25575(gp)
  805574:	11003fcc 	andi	r4,r2,255
  805578:	18803fcc 	andi	r2,r3,255
  80557c:	20801126 	beq	r4,r2,8055c4 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  805580:	d0a70603 	ldbu	r2,-25576(gp)
  805584:	10803fcc 	andi	r2,r2,255
  805588:	00c02074 	movhi	r3,129
  80558c:	18de2404 	addi	r3,r3,30864
  805590:	1085883a 	add	r2,r2,r2
  805594:	1085883a 	add	r2,r2,r2
  805598:	10c5883a 	add	r2,r2,r3
  80559c:	10800017 	ldw	r2,0(r2)
  8055a0:	d0a70e15 	stw	r2,-25544(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  8055a4:	d0e70e17 	ldw	r3,-25544(gp)
  8055a8:	18800e17 	ldw	r2,56(r3)
  8055ac:	10800044 	addi	r2,r2,1
  8055b0:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  8055b4:	d0a70917 	ldw	r2,-25564(gp)
  8055b8:	10800044 	addi	r2,r2,1
  8055bc:	d0a70915 	stw	r2,-25564(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  8055c0:	080e1800 	call	80e180 <OSCtxSw>
  8055c4:	e0bfff17 	ldw	r2,-4(fp)
  8055c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8055cc:	e0bffd17 	ldw	r2,-12(fp)
  8055d0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  8055d4:	e037883a 	mov	sp,fp
  8055d8:	dfc00117 	ldw	ra,4(sp)
  8055dc:	df000017 	ldw	fp,0(sp)
  8055e0:	dec00204 	addi	sp,sp,8
  8055e4:	f800283a 	ret

008055e8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  8055e8:	defffe04 	addi	sp,sp,-8
  8055ec:	df000115 	stw	fp,4(sp)
  8055f0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  8055f4:	d0a71003 	ldbu	r2,-25536(gp)
  8055f8:	10c03fcc 	andi	r3,r2,255
  8055fc:	00802074 	movhi	r2,129
  805600:	10bb9604 	addi	r2,r2,-4520
  805604:	10c5883a 	add	r2,r2,r3
  805608:	10800003 	ldbu	r2,0(r2)
  80560c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  805610:	e0bfff03 	ldbu	r2,-4(fp)
  805614:	100490fa 	slli	r2,r2,3
  805618:	1009883a 	mov	r4,r2
  80561c:	e0ffff03 	ldbu	r3,-4(fp)
  805620:	d0a71044 	addi	r2,gp,-25535
  805624:	1885883a 	add	r2,r3,r2
  805628:	10800003 	ldbu	r2,0(r2)
  80562c:	10c03fcc 	andi	r3,r2,255
  805630:	00802074 	movhi	r2,129
  805634:	10bb9604 	addi	r2,r2,-4520
  805638:	10c5883a 	add	r2,r2,r3
  80563c:	10800003 	ldbu	r2,0(r2)
  805640:	2085883a 	add	r2,r4,r2
  805644:	d0a70605 	stb	r2,-25576(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  805648:	e037883a 	mov	sp,fp
  80564c:	df000017 	ldw	fp,0(sp)
  805650:	dec00104 	addi	sp,sp,4
  805654:	f800283a 	ret

00805658 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  805658:	defffc04 	addi	sp,sp,-16
  80565c:	df000315 	stw	fp,12(sp)
  805660:	df000304 	addi	fp,sp,12
  805664:	e13ffe15 	stw	r4,-8(fp)
  805668:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  80566c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  805670:	00000d06 	br	8056a8 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  805674:	e0bfff17 	ldw	r2,-4(fp)
  805678:	10c00003 	ldbu	r3,0(r2)
  80567c:	e0bffe17 	ldw	r2,-8(fp)
  805680:	10c00005 	stb	r3,0(r2)
  805684:	e0bffe17 	ldw	r2,-8(fp)
  805688:	10800044 	addi	r2,r2,1
  80568c:	e0bffe15 	stw	r2,-8(fp)
  805690:	e0bfff17 	ldw	r2,-4(fp)
  805694:	10800044 	addi	r2,r2,1
  805698:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80569c:	e0bffd03 	ldbu	r2,-12(fp)
  8056a0:	10800044 	addi	r2,r2,1
  8056a4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  8056a8:	e0bfff17 	ldw	r2,-4(fp)
  8056ac:	10800003 	ldbu	r2,0(r2)
  8056b0:	10803fcc 	andi	r2,r2,255
  8056b4:	1004c03a 	cmpne	r2,r2,zero
  8056b8:	103fee1e 	bne	r2,zero,805674 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  8056bc:	e0bffe17 	ldw	r2,-8(fp)
  8056c0:	10000005 	stb	zero,0(r2)
    return (len);
  8056c4:	e0bffd03 	ldbu	r2,-12(fp)
}
  8056c8:	e037883a 	mov	sp,fp
  8056cc:	df000017 	ldw	fp,0(sp)
  8056d0:	dec00104 	addi	sp,sp,4
  8056d4:	f800283a 	ret

008056d8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  8056d8:	defffd04 	addi	sp,sp,-12
  8056dc:	df000215 	stw	fp,8(sp)
  8056e0:	df000204 	addi	fp,sp,8
  8056e4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  8056e8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  8056ec:	00000606 	br	805708 <OS_StrLen+0x30>
        psrc++;
  8056f0:	e0bfff17 	ldw	r2,-4(fp)
  8056f4:	10800044 	addi	r2,r2,1
  8056f8:	e0bfff15 	stw	r2,-4(fp)
        len++;
  8056fc:	e0bffe03 	ldbu	r2,-8(fp)
  805700:	10800044 	addi	r2,r2,1
  805704:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  805708:	e0bfff17 	ldw	r2,-4(fp)
  80570c:	10800003 	ldbu	r2,0(r2)
  805710:	10803fcc 	andi	r2,r2,255
  805714:	1004c03a 	cmpne	r2,r2,zero
  805718:	103ff51e 	bne	r2,zero,8056f0 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  80571c:	e0bffe03 	ldbu	r2,-8(fp)
}
  805720:	e037883a 	mov	sp,fp
  805724:	df000017 	ldw	fp,0(sp)
  805728:	dec00104 	addi	sp,sp,4
  80572c:	f800283a 	ret

00805730 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  805730:	defffa04 	addi	sp,sp,-24
  805734:	dfc00515 	stw	ra,20(sp)
  805738:	df000415 	stw	fp,16(sp)
  80573c:	df000404 	addi	fp,sp,16
  805740:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  805744:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805748:	0005303a 	rdctl	r2,status
  80574c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805750:	e0fffd17 	ldw	r3,-12(fp)
  805754:	00bfff84 	movi	r2,-2
  805758:	1884703a 	and	r2,r3,r2
  80575c:	1001703a 	wrctl	status,r2
  
  return context;
  805760:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  805764:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  805768:	d0a70517 	ldw	r2,-25580(gp)
  80576c:	10800044 	addi	r2,r2,1
  805770:	d0a70515 	stw	r2,-25580(gp)
  805774:	e0bffe17 	ldw	r2,-8(fp)
  805778:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80577c:	e0bffc17 	ldw	r2,-16(fp)
  805780:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  805784:	080e62c0 	call	80e62c <OSTaskIdleHook>
    }
  805788:	003fef06 	br	805748 <OS_TaskIdle+0x18>

0080578c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  80578c:	defffa04 	addi	sp,sp,-24
  805790:	dfc00515 	stw	ra,20(sp)
  805794:	df000415 	stw	fp,16(sp)
  805798:	df000404 	addi	fp,sp,16
  80579c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8057a0:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  8057a4:	00000206 	br	8057b0 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  8057a8:	01003204 	movi	r4,200
  8057ac:	080b80c0 	call	80b80c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  8057b0:	d0a71603 	ldbu	r2,-25512(gp)
  8057b4:	10803fcc 	andi	r2,r2,255
  8057b8:	1005003a 	cmpeq	r2,r2,zero
  8057bc:	103ffa1e 	bne	r2,zero,8057a8 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  8057c0:	d1270a17 	ldw	r4,-25560(gp)
  8057c4:	01401904 	movi	r5,100
  8057c8:	080ed700 	call	80ed70 <__udivsi3>
  8057cc:	d0a70a15 	stw	r2,-25560(gp)
    if (OSIdleCtrMax == 0L) {
  8057d0:	d0a70a17 	ldw	r2,-25560(gp)
  8057d4:	1004c03a 	cmpne	r2,r2,zero
  8057d8:	1000031e 	bne	r2,zero,8057e8 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  8057dc:	d0270c05 	stb	zero,-25552(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  8057e0:	01003fc4 	movi	r4,255
  8057e4:	080b4200 	call	80b420 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8057e8:	0005303a 	rdctl	r2,status
  8057ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8057f0:	e0fffd17 	ldw	r3,-12(fp)
  8057f4:	00bfff84 	movi	r2,-2
  8057f8:	1884703a 	and	r2,r3,r2
  8057fc:	1001703a 	wrctl	status,r2
  
  return context;
  805800:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  805804:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  805808:	d0a70517 	ldw	r2,-25580(gp)
  80580c:	d0a71715 	stw	r2,-25508(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  805810:	d0270515 	stw	zero,-25580(gp)
  805814:	e0bffe17 	ldw	r2,-8(fp)
  805818:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80581c:	e0bffc17 	ldw	r2,-16(fp)
  805820:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  805824:	d1271717 	ldw	r4,-25508(gp)
  805828:	d1670a17 	ldw	r5,-25560(gp)
  80582c:	080ed700 	call	80ed70 <__udivsi3>
  805830:	1007883a 	mov	r3,r2
  805834:	00801904 	movi	r2,100
  805838:	10c5c83a 	sub	r2,r2,r3
  80583c:	d0a70c05 	stb	r2,-25552(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  805840:	080e5bc0 	call	80e5bc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  805844:	08058540 	call	805854 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  805848:	01001904 	movi	r4,100
  80584c:	080b80c0 	call	80b80c <OSTimeDly>
    }
  805850:	003fe506 	br	8057e8 <OS_TaskStat+0x5c>

00805854 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  805854:	defffa04 	addi	sp,sp,-24
  805858:	dfc00515 	stw	ra,20(sp)
  80585c:	df000415 	stw	fp,16(sp)
  805860:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  805864:	e03ffc05 	stb	zero,-16(fp)
  805868:	00002406 	br	8058fc <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  80586c:	e13ffc03 	ldbu	r4,-16(fp)
  805870:	e17ffe04 	addi	r5,fp,-8
  805874:	080b2240 	call	80b224 <OSTaskStkChk>
  805878:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  80587c:	e0bffc43 	ldbu	r2,-15(fp)
  805880:	1004c03a 	cmpne	r2,r2,zero
  805884:	10001a1e 	bne	r2,zero,8058f0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  805888:	e0bffc03 	ldbu	r2,-16(fp)
  80588c:	00c02074 	movhi	r3,129
  805890:	18de2404 	addi	r3,r3,30864
  805894:	1085883a 	add	r2,r2,r2
  805898:	1085883a 	add	r2,r2,r2
  80589c:	10c5883a 	add	r2,r2,r3
  8058a0:	10800017 	ldw	r2,0(r2)
  8058a4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  8058a8:	e0bffd17 	ldw	r2,-12(fp)
  8058ac:	1005003a 	cmpeq	r2,r2,zero
  8058b0:	10000f1e 	bne	r2,zero,8058f0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  8058b4:	e0bffd17 	ldw	r2,-12(fp)
  8058b8:	10800060 	cmpeqi	r2,r2,1
  8058bc:	10000c1e 	bne	r2,zero,8058f0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  8058c0:	e0bffd17 	ldw	r2,-12(fp)
  8058c4:	10c00217 	ldw	r3,8(r2)
  8058c8:	e0bffd17 	ldw	r2,-12(fp)
  8058cc:	10800317 	ldw	r2,12(r2)
  8058d0:	1085883a 	add	r2,r2,r2
  8058d4:	1085883a 	add	r2,r2,r2
  8058d8:	1887883a 	add	r3,r3,r2
  8058dc:	e0bffd17 	ldw	r2,-12(fp)
  8058e0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  8058e4:	e0ffff17 	ldw	r3,-4(fp)
  8058e8:	e0bffd17 	ldw	r2,-12(fp)
  8058ec:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  8058f0:	e0bffc03 	ldbu	r2,-16(fp)
  8058f4:	10800044 	addi	r2,r2,1
  8058f8:	e0bffc05 	stb	r2,-16(fp)
  8058fc:	e0bffc03 	ldbu	r2,-16(fp)
  805900:	10800570 	cmpltui	r2,r2,21
  805904:	103fd91e 	bne	r2,zero,80586c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  805908:	e037883a 	mov	sp,fp
  80590c:	dfc00117 	ldw	ra,4(sp)
  805910:	df000017 	ldw	fp,0(sp)
  805914:	dec00204 	addi	sp,sp,8
  805918:	f800283a 	ret

0080591c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  80591c:	defff104 	addi	sp,sp,-60
  805920:	dfc00e15 	stw	ra,56(sp)
  805924:	df000d15 	stw	fp,52(sp)
  805928:	df000d04 	addi	fp,sp,52
  80592c:	e17ffb15 	stw	r5,-20(fp)
  805930:	e1bffc15 	stw	r6,-16(fp)
  805934:	e0800417 	ldw	r2,16(fp)
  805938:	e13ffa05 	stb	r4,-24(fp)
  80593c:	e1fffd0d 	sth	r7,-12(fp)
  805940:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  805944:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805948:	0005303a 	rdctl	r2,status
  80594c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805950:	e0fff717 	ldw	r3,-36(fp)
  805954:	00bfff84 	movi	r2,-2
  805958:	1884703a 	and	r2,r3,r2
  80595c:	1001703a 	wrctl	status,r2
  
  return context;
  805960:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  805964:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  805968:	d0a70b17 	ldw	r2,-25556(gp)
  80596c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  805970:	e0bff917 	ldw	r2,-28(fp)
  805974:	1005003a 	cmpeq	r2,r2,zero
  805978:	1000941e 	bne	r2,zero,805bcc <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  80597c:	e0bff917 	ldw	r2,-28(fp)
  805980:	10800517 	ldw	r2,20(r2)
  805984:	d0a70b15 	stw	r2,-25556(gp)
  805988:	e0bff817 	ldw	r2,-32(fp)
  80598c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805990:	e0bff617 	ldw	r2,-40(fp)
  805994:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  805998:	e0fff917 	ldw	r3,-28(fp)
  80599c:	e0bffb17 	ldw	r2,-20(fp)
  8059a0:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  8059a4:	e0fff917 	ldw	r3,-28(fp)
  8059a8:	e0bffa03 	ldbu	r2,-24(fp)
  8059ac:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  8059b0:	e0bff917 	ldw	r2,-28(fp)
  8059b4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  8059b8:	e0bff917 	ldw	r2,-28(fp)
  8059bc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  8059c0:	e0bff917 	ldw	r2,-28(fp)
  8059c4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  8059c8:	e0fff917 	ldw	r3,-28(fp)
  8059cc:	e0800317 	ldw	r2,12(fp)
  8059d0:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  8059d4:	e0fff917 	ldw	r3,-28(fp)
  8059d8:	e0800217 	ldw	r2,8(fp)
  8059dc:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  8059e0:	e0fff917 	ldw	r3,-28(fp)
  8059e4:	e0bffc17 	ldw	r2,-16(fp)
  8059e8:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  8059ec:	e0fff917 	ldw	r3,-28(fp)
  8059f0:	e0bffe0b 	ldhu	r2,-8(fp)
  8059f4:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  8059f8:	e0fff917 	ldw	r3,-28(fp)
  8059fc:	e0bffd0b 	ldhu	r2,-12(fp)
  805a00:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  805a04:	e0bff917 	ldw	r2,-28(fp)
  805a08:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  805a0c:	e0bffa03 	ldbu	r2,-24(fp)
  805a10:	1004d0fa 	srli	r2,r2,3
  805a14:	1007883a 	mov	r3,r2
  805a18:	e0bff917 	ldw	r2,-28(fp)
  805a1c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  805a20:	e0bffa03 	ldbu	r2,-24(fp)
  805a24:	108001cc 	andi	r2,r2,7
  805a28:	1007883a 	mov	r3,r2
  805a2c:	e0bff917 	ldw	r2,-28(fp)
  805a30:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  805a34:	e0bff917 	ldw	r2,-28(fp)
  805a38:	10800d03 	ldbu	r2,52(r2)
  805a3c:	10c03fcc 	andi	r3,r2,255
  805a40:	00800044 	movi	r2,1
  805a44:	10c4983a 	sll	r2,r2,r3
  805a48:	1007883a 	mov	r3,r2
  805a4c:	e0bff917 	ldw	r2,-28(fp)
  805a50:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  805a54:	e0bff917 	ldw	r2,-28(fp)
  805a58:	10800cc3 	ldbu	r2,51(r2)
  805a5c:	10c03fcc 	andi	r3,r2,255
  805a60:	00800044 	movi	r2,1
  805a64:	10c4983a 	sll	r2,r2,r3
  805a68:	1007883a 	mov	r3,r2
  805a6c:	e0bff917 	ldw	r2,-28(fp)
  805a70:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  805a74:	e0bff917 	ldw	r2,-28(fp)
  805a78:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  805a7c:	e0bff917 	ldw	r2,-28(fp)
  805a80:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  805a84:	e0bff917 	ldw	r2,-28(fp)
  805a88:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  805a8c:	e0bff917 	ldw	r2,-28(fp)
  805a90:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  805a94:	e0bff917 	ldw	r2,-28(fp)
  805a98:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  805a9c:	e0bff917 	ldw	r2,-28(fp)
  805aa0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  805aa4:	e0bff917 	ldw	r2,-28(fp)
  805aa8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  805aac:	e0bff917 	ldw	r2,-28(fp)
  805ab0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  805ab4:	e0bff917 	ldw	r2,-28(fp)
  805ab8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  805abc:	e0fff917 	ldw	r3,-28(fp)
  805ac0:	00800fc4 	movi	r2,63
  805ac4:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  805ac8:	e0bff917 	ldw	r2,-28(fp)
  805acc:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  805ad0:	e13ff917 	ldw	r4,-28(fp)
  805ad4:	080e6480 	call	80e648 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  805ad8:	e13ff917 	ldw	r4,-28(fp)
  805adc:	080e5600 	call	80e560 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805ae0:	0005303a 	rdctl	r2,status
  805ae4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805ae8:	e0fff517 	ldw	r3,-44(fp)
  805aec:	00bfff84 	movi	r2,-2
  805af0:	1884703a 	and	r2,r3,r2
  805af4:	1001703a 	wrctl	status,r2
  
  return context;
  805af8:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  805afc:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  805b00:	e0bffa03 	ldbu	r2,-24(fp)
  805b04:	00c02074 	movhi	r3,129
  805b08:	18de2404 	addi	r3,r3,30864
  805b0c:	1085883a 	add	r2,r2,r2
  805b10:	1085883a 	add	r2,r2,r2
  805b14:	10c7883a 	add	r3,r2,r3
  805b18:	e0bff917 	ldw	r2,-28(fp)
  805b1c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  805b20:	d0e70717 	ldw	r3,-25572(gp)
  805b24:	e0bff917 	ldw	r2,-28(fp)
  805b28:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  805b2c:	e0bff917 	ldw	r2,-28(fp)
  805b30:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  805b34:	d0a70717 	ldw	r2,-25572(gp)
  805b38:	1005003a 	cmpeq	r2,r2,zero
  805b3c:	1000031e 	bne	r2,zero,805b4c <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  805b40:	d0e70717 	ldw	r3,-25572(gp)
  805b44:	e0bff917 	ldw	r2,-28(fp)
  805b48:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  805b4c:	e0bff917 	ldw	r2,-28(fp)
  805b50:	d0a70715 	stw	r2,-25572(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  805b54:	e0bff917 	ldw	r2,-28(fp)
  805b58:	10c00d83 	ldbu	r3,54(r2)
  805b5c:	d0a71003 	ldbu	r2,-25536(gp)
  805b60:	1884b03a 	or	r2,r3,r2
  805b64:	d0a71005 	stb	r2,-25536(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  805b68:	e0bff917 	ldw	r2,-28(fp)
  805b6c:	10800d03 	ldbu	r2,52(r2)
  805b70:	11003fcc 	andi	r4,r2,255
  805b74:	e0bff917 	ldw	r2,-28(fp)
  805b78:	10800d03 	ldbu	r2,52(r2)
  805b7c:	10c03fcc 	andi	r3,r2,255
  805b80:	d0a71044 	addi	r2,gp,-25535
  805b84:	1885883a 	add	r2,r3,r2
  805b88:	10c00003 	ldbu	r3,0(r2)
  805b8c:	e0bff917 	ldw	r2,-28(fp)
  805b90:	10800d43 	ldbu	r2,53(r2)
  805b94:	1884b03a 	or	r2,r3,r2
  805b98:	1007883a 	mov	r3,r2
  805b9c:	d0a71044 	addi	r2,gp,-25535
  805ba0:	2085883a 	add	r2,r4,r2
  805ba4:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  805ba8:	d0a70c43 	ldbu	r2,-25551(gp)
  805bac:	10800044 	addi	r2,r2,1
  805bb0:	d0a70c45 	stb	r2,-25551(gp)
  805bb4:	e0bff817 	ldw	r2,-32(fp)
  805bb8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805bbc:	e0bff417 	ldw	r2,-48(fp)
  805bc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  805bc4:	e03fff15 	stw	zero,-4(fp)
  805bc8:	00000606 	br	805be4 <OS_TCBInit+0x2c8>
  805bcc:	e0bff817 	ldw	r2,-32(fp)
  805bd0:	e0bff315 	stw	r2,-52(fp)
  805bd4:	e0bff317 	ldw	r2,-52(fp)
  805bd8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  805bdc:	00801084 	movi	r2,66
  805be0:	e0bfff15 	stw	r2,-4(fp)
  805be4:	e0bfff17 	ldw	r2,-4(fp)
}
  805be8:	e037883a 	mov	sp,fp
  805bec:	dfc00117 	ldw	ra,4(sp)
  805bf0:	df000017 	ldw	fp,0(sp)
  805bf4:	dec00204 	addi	sp,sp,8
  805bf8:	f800283a 	ret

00805bfc <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  805bfc:	defffe04 	addi	sp,sp,-8
  805c00:	df000115 	stw	fp,4(sp)
  805c04:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  805c08:	d0a00d04 	addi	r2,gp,-32716
  805c0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  805c10:	d0a00e04 	addi	r2,gp,-32712
  805c14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  805c18:	d0a00f84 	addi	r2,gp,-32706
  805c1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  805c20:	d0a01004 	addi	r2,gp,-32704
  805c24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  805c28:	d0a00f04 	addi	r2,gp,-32708
  805c2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  805c30:	d0a01084 	addi	r2,gp,-32702
  805c34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  805c38:	d0a01104 	addi	r2,gp,-32700
  805c3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  805c40:	d0a01184 	addi	r2,gp,-32698
  805c44:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  805c48:	d0a01204 	addi	r2,gp,-32696
  805c4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  805c50:	d0a01284 	addi	r2,gp,-32694
  805c54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  805c58:	d0a01304 	addi	r2,gp,-32692
  805c5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  805c60:	d0a01384 	addi	r2,gp,-32690
  805c64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  805c68:	d0a01404 	addi	r2,gp,-32688
  805c6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  805c70:	d0a01484 	addi	r2,gp,-32686
  805c74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  805c78:	d0a01504 	addi	r2,gp,-32684
  805c7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  805c80:	d0a01584 	addi	r2,gp,-32682
  805c84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  805c88:	d0a01604 	addi	r2,gp,-32680
  805c8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  805c90:	d0a01684 	addi	r2,gp,-32678
  805c94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  805c98:	d0a01704 	addi	r2,gp,-32676
  805c9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  805ca0:	d0a01784 	addi	r2,gp,-32674
  805ca4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  805ca8:	d0a01804 	addi	r2,gp,-32672
  805cac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  805cb0:	d0a01884 	addi	r2,gp,-32670
  805cb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  805cb8:	d0a01904 	addi	r2,gp,-32668
  805cbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  805cc0:	d0a01984 	addi	r2,gp,-32666
  805cc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  805cc8:	d0a01a04 	addi	r2,gp,-32664
  805ccc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  805cd0:	d0a01a84 	addi	r2,gp,-32662
  805cd4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  805cd8:	d0a01b04 	addi	r2,gp,-32660
  805cdc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  805ce0:	d0a01b84 	addi	r2,gp,-32658
  805ce4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  805ce8:	d0a01c04 	addi	r2,gp,-32656
  805cec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  805cf0:	d0a01c84 	addi	r2,gp,-32654
  805cf4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  805cf8:	d0a01d04 	addi	r2,gp,-32652
  805cfc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  805d00:	d0a01d84 	addi	r2,gp,-32650
  805d04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  805d08:	d0a01e04 	addi	r2,gp,-32648
  805d0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  805d10:	d0a01e84 	addi	r2,gp,-32646
  805d14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  805d18:	d0a01f04 	addi	r2,gp,-32644
  805d1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  805d20:	d0a01f84 	addi	r2,gp,-32642
  805d24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  805d28:	d0a02004 	addi	r2,gp,-32640
  805d2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  805d30:	d0a02084 	addi	r2,gp,-32638
  805d34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  805d38:	d0a02104 	addi	r2,gp,-32636
  805d3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  805d40:	d0a02184 	addi	r2,gp,-32634
  805d44:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  805d48:	d0a02204 	addi	r2,gp,-32632
  805d4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  805d50:	d0a02284 	addi	r2,gp,-32630
  805d54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  805d58:	d0a02304 	addi	r2,gp,-32628
  805d5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  805d60:	d0a02384 	addi	r2,gp,-32626
  805d64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  805d68:	d0a02404 	addi	r2,gp,-32624
  805d6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  805d70:	d0a02904 	addi	r2,gp,-32604
  805d74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  805d78:	e037883a 	mov	sp,fp
  805d7c:	df000017 	ldw	fp,0(sp)
  805d80:	dec00104 	addi	sp,sp,4
  805d84:	f800283a 	ret

00805d88 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  805d88:	defff104 	addi	sp,sp,-60
  805d8c:	df000e15 	stw	fp,56(sp)
  805d90:	df000e04 	addi	fp,sp,56
  805d94:	e13ffa15 	stw	r4,-24(fp)
  805d98:	e1fffd15 	stw	r7,-12(fp)
  805d9c:	e17ffb0d 	sth	r5,-20(fp)
  805da0:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  805da4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  805da8:	e0bffd17 	ldw	r2,-12(fp)
  805dac:	1004c03a 	cmpne	r2,r2,zero
  805db0:	1000021e 	bne	r2,zero,805dbc <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  805db4:	e03fff15 	stw	zero,-4(fp)
  805db8:	0000bb06 	br	8060a8 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  805dbc:	e0bffa17 	ldw	r2,-24(fp)
  805dc0:	1004c03a 	cmpne	r2,r2,zero
  805dc4:	1000051e 	bne	r2,zero,805ddc <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  805dc8:	e0fffd17 	ldw	r3,-12(fp)
  805dcc:	00801b84 	movi	r2,110
  805dd0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  805dd4:	e03fff15 	stw	zero,-4(fp)
  805dd8:	0000b306 	br	8060a8 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  805ddc:	e0bffa17 	ldw	r2,-24(fp)
  805de0:	10800003 	ldbu	r2,0(r2)
  805de4:	10803fcc 	andi	r2,r2,255
  805de8:	10800160 	cmpeqi	r2,r2,5
  805dec:	1000051e 	bne	r2,zero,805e04 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  805df0:	e0fffd17 	ldw	r3,-12(fp)
  805df4:	00800044 	movi	r2,1
  805df8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  805dfc:	e03fff15 	stw	zero,-4(fp)
  805e00:	0000a906 	br	8060a8 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  805e04:	e0fffc03 	ldbu	r3,-16(fp)
  805e08:	00bfe004 	movi	r2,-128
  805e0c:	1884703a 	and	r2,r3,r2
  805e10:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  805e14:	e0bff943 	ldbu	r2,-27(fp)
  805e18:	1005003a 	cmpeq	r2,r2,zero
  805e1c:	1000061e 	bne	r2,zero,805e38 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  805e20:	e0bffc03 	ldbu	r2,-16(fp)
  805e24:	10801fcc 	andi	r2,r2,127
  805e28:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  805e2c:	00800044 	movi	r2,1
  805e30:	e0bff905 	stb	r2,-28(fp)
  805e34:	00000106 	br	805e3c <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  805e38:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  805e3c:	e0bffd17 	ldw	r2,-12(fp)
  805e40:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805e44:	0005303a 	rdctl	r2,status
  805e48:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805e4c:	e0fff717 	ldw	r3,-36(fp)
  805e50:	00bfff84 	movi	r2,-2
  805e54:	1884703a 	and	r2,r3,r2
  805e58:	1001703a 	wrctl	status,r2
  
  return context;
  805e5c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  805e60:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  805e64:	e0bffc03 	ldbu	r2,-16(fp)
  805e68:	e0bffe15 	stw	r2,-8(fp)
  805e6c:	e0fffe17 	ldw	r3,-8(fp)
  805e70:	18800060 	cmpeqi	r2,r3,1
  805e74:	1000651e 	bne	r2,zero,80600c <OSFlagAccept+0x284>
  805e78:	e0fffe17 	ldw	r3,-8(fp)
  805e7c:	18800088 	cmpgei	r2,r3,2
  805e80:	1000041e 	bne	r2,zero,805e94 <OSFlagAccept+0x10c>
  805e84:	e0fffe17 	ldw	r3,-8(fp)
  805e88:	1805003a 	cmpeq	r2,r3,zero
  805e8c:	1000421e 	bne	r2,zero,805f98 <OSFlagAccept+0x210>
  805e90:	00007b06 	br	806080 <OSFlagAccept+0x2f8>
  805e94:	e0fffe17 	ldw	r3,-8(fp)
  805e98:	188000a0 	cmpeqi	r2,r3,2
  805e9c:	1000041e 	bne	r2,zero,805eb0 <OSFlagAccept+0x128>
  805ea0:	e0fffe17 	ldw	r3,-8(fp)
  805ea4:	188000e0 	cmpeqi	r2,r3,3
  805ea8:	10001e1e 	bne	r2,zero,805f24 <OSFlagAccept+0x19c>
  805eac:	00007406 	br	806080 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  805eb0:	e0bffa17 	ldw	r2,-24(fp)
  805eb4:	10c0020b 	ldhu	r3,8(r2)
  805eb8:	e0bffb0b 	ldhu	r2,-20(fp)
  805ebc:	1884703a 	and	r2,r3,r2
  805ec0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  805ec4:	e0fff98b 	ldhu	r3,-26(fp)
  805ec8:	e0bffb0b 	ldhu	r2,-20(fp)
  805ecc:	18800d1e 	bne	r3,r2,805f04 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  805ed0:	e0bff903 	ldbu	r2,-28(fp)
  805ed4:	10800058 	cmpnei	r2,r2,1
  805ed8:	10000d1e 	bne	r2,zero,805f10 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  805edc:	e0bffa17 	ldw	r2,-24(fp)
  805ee0:	1080020b 	ldhu	r2,8(r2)
  805ee4:	1007883a 	mov	r3,r2
  805ee8:	e0bff98b 	ldhu	r2,-26(fp)
  805eec:	0084303a 	nor	r2,zero,r2
  805ef0:	1884703a 	and	r2,r3,r2
  805ef4:	1007883a 	mov	r3,r2
  805ef8:	e0bffa17 	ldw	r2,-24(fp)
  805efc:	10c0020d 	sth	r3,8(r2)
  805f00:	00000306 	br	805f10 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  805f04:	e0fffd17 	ldw	r3,-12(fp)
  805f08:	00801c04 	movi	r2,112
  805f0c:	18800005 	stb	r2,0(r3)
  805f10:	e0bff817 	ldw	r2,-32(fp)
  805f14:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805f18:	e0bff617 	ldw	r2,-40(fp)
  805f1c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  805f20:	00005f06 	br	8060a0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  805f24:	e0bffa17 	ldw	r2,-24(fp)
  805f28:	10c0020b 	ldhu	r3,8(r2)
  805f2c:	e0bffb0b 	ldhu	r2,-20(fp)
  805f30:	1884703a 	and	r2,r3,r2
  805f34:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  805f38:	e0bff98b 	ldhu	r2,-26(fp)
  805f3c:	1005003a 	cmpeq	r2,r2,zero
  805f40:	10000d1e 	bne	r2,zero,805f78 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  805f44:	e0bff903 	ldbu	r2,-28(fp)
  805f48:	10800058 	cmpnei	r2,r2,1
  805f4c:	10000d1e 	bne	r2,zero,805f84 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  805f50:	e0bffa17 	ldw	r2,-24(fp)
  805f54:	1080020b 	ldhu	r2,8(r2)
  805f58:	1007883a 	mov	r3,r2
  805f5c:	e0bff98b 	ldhu	r2,-26(fp)
  805f60:	0084303a 	nor	r2,zero,r2
  805f64:	1884703a 	and	r2,r3,r2
  805f68:	1007883a 	mov	r3,r2
  805f6c:	e0bffa17 	ldw	r2,-24(fp)
  805f70:	10c0020d 	sth	r3,8(r2)
  805f74:	00000306 	br	805f84 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  805f78:	e0fffd17 	ldw	r3,-12(fp)
  805f7c:	00801c04 	movi	r2,112
  805f80:	18800005 	stb	r2,0(r3)
  805f84:	e0bff817 	ldw	r2,-32(fp)
  805f88:	e0bff515 	stw	r2,-44(fp)
  805f8c:	e0bff517 	ldw	r2,-44(fp)
  805f90:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  805f94:	00004206 	br	8060a0 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  805f98:	e0bffa17 	ldw	r2,-24(fp)
  805f9c:	1080020b 	ldhu	r2,8(r2)
  805fa0:	0084303a 	nor	r2,zero,r2
  805fa4:	1007883a 	mov	r3,r2
  805fa8:	e0bffb0b 	ldhu	r2,-20(fp)
  805fac:	1884703a 	and	r2,r3,r2
  805fb0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  805fb4:	e0fff98b 	ldhu	r3,-26(fp)
  805fb8:	e0bffb0b 	ldhu	r2,-20(fp)
  805fbc:	18800b1e 	bne	r3,r2,805fec <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  805fc0:	e0bff903 	ldbu	r2,-28(fp)
  805fc4:	10800058 	cmpnei	r2,r2,1
  805fc8:	10000b1e 	bne	r2,zero,805ff8 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  805fcc:	e0bffa17 	ldw	r2,-24(fp)
  805fd0:	10c0020b 	ldhu	r3,8(r2)
  805fd4:	e0bff98b 	ldhu	r2,-26(fp)
  805fd8:	1884b03a 	or	r2,r3,r2
  805fdc:	1007883a 	mov	r3,r2
  805fe0:	e0bffa17 	ldw	r2,-24(fp)
  805fe4:	10c0020d 	sth	r3,8(r2)
  805fe8:	00000306 	br	805ff8 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  805fec:	e0fffd17 	ldw	r3,-12(fp)
  805ff0:	00801c04 	movi	r2,112
  805ff4:	18800005 	stb	r2,0(r3)
  805ff8:	e0bff817 	ldw	r2,-32(fp)
  805ffc:	e0bff415 	stw	r2,-48(fp)
  806000:	e0bff417 	ldw	r2,-48(fp)
  806004:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  806008:	00002506 	br	8060a0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80600c:	e0bffa17 	ldw	r2,-24(fp)
  806010:	1080020b 	ldhu	r2,8(r2)
  806014:	0084303a 	nor	r2,zero,r2
  806018:	1007883a 	mov	r3,r2
  80601c:	e0bffb0b 	ldhu	r2,-20(fp)
  806020:	1884703a 	and	r2,r3,r2
  806024:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  806028:	e0bff98b 	ldhu	r2,-26(fp)
  80602c:	1005003a 	cmpeq	r2,r2,zero
  806030:	10000b1e 	bne	r2,zero,806060 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  806034:	e0bff903 	ldbu	r2,-28(fp)
  806038:	10800058 	cmpnei	r2,r2,1
  80603c:	10000b1e 	bne	r2,zero,80606c <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  806040:	e0bffa17 	ldw	r2,-24(fp)
  806044:	10c0020b 	ldhu	r3,8(r2)
  806048:	e0bff98b 	ldhu	r2,-26(fp)
  80604c:	1884b03a 	or	r2,r3,r2
  806050:	1007883a 	mov	r3,r2
  806054:	e0bffa17 	ldw	r2,-24(fp)
  806058:	10c0020d 	sth	r3,8(r2)
  80605c:	00000306 	br	80606c <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  806060:	e0fffd17 	ldw	r3,-12(fp)
  806064:	00801c04 	movi	r2,112
  806068:	18800005 	stb	r2,0(r3)
  80606c:	e0bff817 	ldw	r2,-32(fp)
  806070:	e0bff315 	stw	r2,-52(fp)
  806074:	e0bff317 	ldw	r2,-52(fp)
  806078:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80607c:	00000806 	br	8060a0 <OSFlagAccept+0x318>
  806080:	e0bff817 	ldw	r2,-32(fp)
  806084:	e0bff215 	stw	r2,-56(fp)
  806088:	e0bff217 	ldw	r2,-56(fp)
  80608c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  806090:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  806094:	e0fffd17 	ldw	r3,-12(fp)
  806098:	00801bc4 	movi	r2,111
  80609c:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  8060a0:	e0bff98b 	ldhu	r2,-26(fp)
  8060a4:	e0bfff15 	stw	r2,-4(fp)
  8060a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8060ac:	e037883a 	mov	sp,fp
  8060b0:	df000017 	ldw	fp,0(sp)
  8060b4:	dec00104 	addi	sp,sp,4
  8060b8:	f800283a 	ret

008060bc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  8060bc:	defff704 	addi	sp,sp,-36
  8060c0:	df000815 	stw	fp,32(sp)
  8060c4:	df000804 	addi	fp,sp,32
  8060c8:	e17ffe15 	stw	r5,-8(fp)
  8060cc:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  8060d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  8060d4:	e0bffe17 	ldw	r2,-8(fp)
  8060d8:	1004c03a 	cmpne	r2,r2,zero
  8060dc:	1000021e 	bne	r2,zero,8060e8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  8060e0:	e03fff15 	stw	zero,-4(fp)
  8060e4:	00003f06 	br	8061e4 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  8060e8:	00802074 	movhi	r2,129
  8060ec:	10899d04 	addi	r2,r2,9844
  8060f0:	10800003 	ldbu	r2,0(r2)
  8060f4:	10803fcc 	andi	r2,r2,255
  8060f8:	1005003a 	cmpeq	r2,r2,zero
  8060fc:	1000051e 	bne	r2,zero,806114 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  806100:	e0fffe17 	ldw	r3,-8(fp)
  806104:	00800404 	movi	r2,16
  806108:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  80610c:	e03fff15 	stw	zero,-4(fp)
  806110:	00003406 	br	8061e4 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806114:	0005303a 	rdctl	r2,status
  806118:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80611c:	e0fffa17 	ldw	r3,-24(fp)
  806120:	00bfff84 	movi	r2,-2
  806124:	1884703a 	and	r2,r3,r2
  806128:	1001703a 	wrctl	status,r2
  
  return context;
  80612c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  806130:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  806134:	00802074 	movhi	r2,129
  806138:	1089a004 	addi	r2,r2,9856
  80613c:	10800017 	ldw	r2,0(r2)
  806140:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  806144:	e0bffc17 	ldw	r2,-16(fp)
  806148:	1005003a 	cmpeq	r2,r2,zero
  80614c:	10001c1e 	bne	r2,zero,8061c0 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  806150:	00802074 	movhi	r2,129
  806154:	1089a004 	addi	r2,r2,9856
  806158:	10800017 	ldw	r2,0(r2)
  80615c:	10800117 	ldw	r2,4(r2)
  806160:	1007883a 	mov	r3,r2
  806164:	00802074 	movhi	r2,129
  806168:	1089a004 	addi	r2,r2,9856
  80616c:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  806170:	e0fffc17 	ldw	r3,-16(fp)
  806174:	00800144 	movi	r2,5
  806178:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  80617c:	e0fffc17 	ldw	r3,-16(fp)
  806180:	e0bffd0b 	ldhu	r2,-12(fp)
  806184:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  806188:	e0bffc17 	ldw	r2,-16(fp)
  80618c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  806190:	e0fffc17 	ldw	r3,-16(fp)
  806194:	00800fc4 	movi	r2,63
  806198:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80619c:	e0bffc17 	ldw	r2,-16(fp)
  8061a0:	100002c5 	stb	zero,11(r2)
  8061a4:	e0bffb17 	ldw	r2,-20(fp)
  8061a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8061ac:	e0bff917 	ldw	r2,-28(fp)
  8061b0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  8061b4:	e0bffe17 	ldw	r2,-8(fp)
  8061b8:	10000005 	stb	zero,0(r2)
  8061bc:	00000706 	br	8061dc <OSFlagCreate+0x120>
  8061c0:	e0bffb17 	ldw	r2,-20(fp)
  8061c4:	e0bff815 	stw	r2,-32(fp)
  8061c8:	e0bff817 	ldw	r2,-32(fp)
  8061cc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  8061d0:	e0fffe17 	ldw	r3,-8(fp)
  8061d4:	00801c84 	movi	r2,114
  8061d8:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  8061dc:	e0bffc17 	ldw	r2,-16(fp)
  8061e0:	e0bfff15 	stw	r2,-4(fp)
  8061e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8061e8:	e037883a 	mov	sp,fp
  8061ec:	df000017 	ldw	fp,0(sp)
  8061f0:	dec00104 	addi	sp,sp,4
  8061f4:	f800283a 	ret

008061f8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  8061f8:	defff004 	addi	sp,sp,-64
  8061fc:	dfc00f15 	stw	ra,60(sp)
  806200:	df000e15 	stw	fp,56(sp)
  806204:	df000e04 	addi	fp,sp,56
  806208:	e13ffb15 	stw	r4,-20(fp)
  80620c:	e1bffd15 	stw	r6,-12(fp)
  806210:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  806214:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  806218:	e0bffd17 	ldw	r2,-12(fp)
  80621c:	1004c03a 	cmpne	r2,r2,zero
  806220:	1000031e 	bne	r2,zero,806230 <OSFlagDel+0x38>
        return (pgrp);
  806224:	e0bffb17 	ldw	r2,-20(fp)
  806228:	e0bfff15 	stw	r2,-4(fp)
  80622c:	00009606 	br	806488 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  806230:	e0bffb17 	ldw	r2,-20(fp)
  806234:	1004c03a 	cmpne	r2,r2,zero
  806238:	1000061e 	bne	r2,zero,806254 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80623c:	e0fffd17 	ldw	r3,-12(fp)
  806240:	00801b84 	movi	r2,110
  806244:	18800005 	stb	r2,0(r3)
        return (pgrp);
  806248:	e0fffb17 	ldw	r3,-20(fp)
  80624c:	e0ffff15 	stw	r3,-4(fp)
  806250:	00008d06 	br	806488 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  806254:	00802074 	movhi	r2,129
  806258:	10899d04 	addi	r2,r2,9844
  80625c:	10800003 	ldbu	r2,0(r2)
  806260:	10803fcc 	andi	r2,r2,255
  806264:	1005003a 	cmpeq	r2,r2,zero
  806268:	1000061e 	bne	r2,zero,806284 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80626c:	e0fffd17 	ldw	r3,-12(fp)
  806270:	008003c4 	movi	r2,15
  806274:	18800005 	stb	r2,0(r3)
        return (pgrp);
  806278:	e0bffb17 	ldw	r2,-20(fp)
  80627c:	e0bfff15 	stw	r2,-4(fp)
  806280:	00008106 	br	806488 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  806284:	e0bffb17 	ldw	r2,-20(fp)
  806288:	10800003 	ldbu	r2,0(r2)
  80628c:	10803fcc 	andi	r2,r2,255
  806290:	10800160 	cmpeqi	r2,r2,5
  806294:	1000061e 	bne	r2,zero,8062b0 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  806298:	e0fffd17 	ldw	r3,-12(fp)
  80629c:	00800044 	movi	r2,1
  8062a0:	18800005 	stb	r2,0(r3)
        return (pgrp);
  8062a4:	e0fffb17 	ldw	r3,-20(fp)
  8062a8:	e0ffff15 	stw	r3,-4(fp)
  8062ac:	00007606 	br	806488 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8062b0:	0005303a 	rdctl	r2,status
  8062b4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8062b8:	e0fff617 	ldw	r3,-40(fp)
  8062bc:	00bfff84 	movi	r2,-2
  8062c0:	1884703a 	and	r2,r3,r2
  8062c4:	1001703a 	wrctl	status,r2
  
  return context;
  8062c8:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  8062cc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  8062d0:	e0bffb17 	ldw	r2,-20(fp)
  8062d4:	10800117 	ldw	r2,4(r2)
  8062d8:	1005003a 	cmpeq	r2,r2,zero
  8062dc:	1000031e 	bne	r2,zero,8062ec <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  8062e0:	00800044 	movi	r2,1
  8062e4:	e0bffa05 	stb	r2,-24(fp)
  8062e8:	00000106 	br	8062f0 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8062ec:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  8062f0:	e0bffc03 	ldbu	r2,-16(fp)
  8062f4:	e0bffe15 	stw	r2,-8(fp)
  8062f8:	e0fffe17 	ldw	r3,-8(fp)
  8062fc:	1805003a 	cmpeq	r2,r3,zero
  806300:	1000041e 	bne	r2,zero,806314 <OSFlagDel+0x11c>
  806304:	e0fffe17 	ldw	r3,-8(fp)
  806308:	18800060 	cmpeqi	r2,r3,1
  80630c:	1000281e 	bne	r2,zero,8063b0 <OSFlagDel+0x1b8>
  806310:	00005206 	br	80645c <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  806314:	e0bffa03 	ldbu	r2,-24(fp)
  806318:	1004c03a 	cmpne	r2,r2,zero
  80631c:	10001a1e 	bne	r2,zero,806388 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  806320:	e0fffb17 	ldw	r3,-20(fp)
  806324:	00800fc4 	movi	r2,63
  806328:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80632c:	e0bffb17 	ldw	r2,-20(fp)
  806330:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  806334:	e0bffb17 	ldw	r2,-20(fp)
  806338:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  80633c:	00802074 	movhi	r2,129
  806340:	1089a004 	addi	r2,r2,9856
  806344:	10c00017 	ldw	r3,0(r2)
  806348:	e0bffb17 	ldw	r2,-20(fp)
  80634c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  806350:	e0bffb17 	ldw	r2,-20(fp)
  806354:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  806358:	00c02074 	movhi	r3,129
  80635c:	18c9a004 	addi	r3,r3,9856
  806360:	e0bffb17 	ldw	r2,-20(fp)
  806364:	18800015 	stw	r2,0(r3)
  806368:	e0bff717 	ldw	r2,-36(fp)
  80636c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806370:	e0bff517 	ldw	r2,-44(fp)
  806374:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  806378:	e0bffd17 	ldw	r2,-12(fp)
  80637c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  806380:	e03ff815 	stw	zero,-32(fp)
  806384:	00003e06 	br	806480 <OSFlagDel+0x288>
  806388:	e0bff717 	ldw	r2,-36(fp)
  80638c:	e0bff415 	stw	r2,-48(fp)
  806390:	e0bff417 	ldw	r2,-48(fp)
  806394:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  806398:	e0fffd17 	ldw	r3,-12(fp)
  80639c:	00801244 	movi	r2,73
  8063a0:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  8063a4:	e0bffb17 	ldw	r2,-20(fp)
  8063a8:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  8063ac:	00003406 	br	806480 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  8063b0:	e0bffb17 	ldw	r2,-20(fp)
  8063b4:	10800117 	ldw	r2,4(r2)
  8063b8:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  8063bc:	00000606 	br	8063d8 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  8063c0:	e13ff917 	ldw	r4,-28(fp)
  8063c4:	000b883a 	mov	r5,zero
  8063c8:	08075080 	call	807508 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  8063cc:	e0bff917 	ldw	r2,-28(fp)
  8063d0:	10800017 	ldw	r2,0(r2)
  8063d4:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  8063d8:	e0bff917 	ldw	r2,-28(fp)
  8063dc:	1004c03a 	cmpne	r2,r2,zero
  8063e0:	103ff71e 	bne	r2,zero,8063c0 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  8063e4:	e0fffb17 	ldw	r3,-20(fp)
  8063e8:	00800fc4 	movi	r2,63
  8063ec:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8063f0:	e0bffb17 	ldw	r2,-20(fp)
  8063f4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8063f8:	e0bffb17 	ldw	r2,-20(fp)
  8063fc:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  806400:	00802074 	movhi	r2,129
  806404:	1089a004 	addi	r2,r2,9856
  806408:	10c00017 	ldw	r3,0(r2)
  80640c:	e0bffb17 	ldw	r2,-20(fp)
  806410:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  806414:	e0bffb17 	ldw	r2,-20(fp)
  806418:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  80641c:	00c02074 	movhi	r3,129
  806420:	18c9a004 	addi	r3,r3,9856
  806424:	e0bffb17 	ldw	r2,-20(fp)
  806428:	18800015 	stw	r2,0(r3)
  80642c:	e0bff717 	ldw	r2,-36(fp)
  806430:	e0bff315 	stw	r2,-52(fp)
  806434:	e0bff317 	ldw	r2,-52(fp)
  806438:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80643c:	e0bffa03 	ldbu	r2,-24(fp)
  806440:	10800058 	cmpnei	r2,r2,1
  806444:	1000011e 	bne	r2,zero,80644c <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  806448:	08055140 	call	805514 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  80644c:	e0bffd17 	ldw	r2,-12(fp)
  806450:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  806454:	e03ff815 	stw	zero,-32(fp)
             break;
  806458:	00000906 	br	806480 <OSFlagDel+0x288>
  80645c:	e0bff717 	ldw	r2,-36(fp)
  806460:	e0bff215 	stw	r2,-56(fp)
  806464:	e0bff217 	ldw	r2,-56(fp)
  806468:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  80646c:	e0fffd17 	ldw	r3,-12(fp)
  806470:	008001c4 	movi	r2,7
  806474:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  806478:	e0bffb17 	ldw	r2,-20(fp)
  80647c:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  806480:	e0bff817 	ldw	r2,-32(fp)
  806484:	e0bfff15 	stw	r2,-4(fp)
  806488:	e0bfff17 	ldw	r2,-4(fp)
}
  80648c:	e037883a 	mov	sp,fp
  806490:	dfc00117 	ldw	ra,4(sp)
  806494:	df000017 	ldw	fp,0(sp)
  806498:	dec00204 	addi	sp,sp,8
  80649c:	f800283a 	ret

008064a0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  8064a0:	defff504 	addi	sp,sp,-44
  8064a4:	dfc00a15 	stw	ra,40(sp)
  8064a8:	df000915 	stw	fp,36(sp)
  8064ac:	df000904 	addi	fp,sp,36
  8064b0:	e13ffc15 	stw	r4,-16(fp)
  8064b4:	e17ffd15 	stw	r5,-12(fp)
  8064b8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8064bc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8064c0:	e0bffe17 	ldw	r2,-8(fp)
  8064c4:	1004c03a 	cmpne	r2,r2,zero
  8064c8:	1000021e 	bne	r2,zero,8064d4 <OSFlagNameGet+0x34>
        return (0);
  8064cc:	e03fff15 	stw	zero,-4(fp)
  8064d0:	00003e06 	br	8065cc <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  8064d4:	e0bffc17 	ldw	r2,-16(fp)
  8064d8:	1004c03a 	cmpne	r2,r2,zero
  8064dc:	1000051e 	bne	r2,zero,8064f4 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8064e0:	e0fffe17 	ldw	r3,-8(fp)
  8064e4:	00801b84 	movi	r2,110
  8064e8:	18800005 	stb	r2,0(r3)
        return (0);
  8064ec:	e03fff15 	stw	zero,-4(fp)
  8064f0:	00003606 	br	8065cc <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8064f4:	e0bffd17 	ldw	r2,-12(fp)
  8064f8:	1004c03a 	cmpne	r2,r2,zero
  8064fc:	1000051e 	bne	r2,zero,806514 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  806500:	e0fffe17 	ldw	r3,-8(fp)
  806504:	00800304 	movi	r2,12
  806508:	18800005 	stb	r2,0(r3)
        return (0);
  80650c:	e03fff15 	stw	zero,-4(fp)
  806510:	00002e06 	br	8065cc <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  806514:	00802074 	movhi	r2,129
  806518:	10899d04 	addi	r2,r2,9844
  80651c:	10800003 	ldbu	r2,0(r2)
  806520:	10803fcc 	andi	r2,r2,255
  806524:	1005003a 	cmpeq	r2,r2,zero
  806528:	1000051e 	bne	r2,zero,806540 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80652c:	e0fffe17 	ldw	r3,-8(fp)
  806530:	00800444 	movi	r2,17
  806534:	18800005 	stb	r2,0(r3)
        return (0);
  806538:	e03fff15 	stw	zero,-4(fp)
  80653c:	00002306 	br	8065cc <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806540:	0005303a 	rdctl	r2,status
  806544:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806548:	e0fff917 	ldw	r3,-28(fp)
  80654c:	00bfff84 	movi	r2,-2
  806550:	1884703a 	and	r2,r3,r2
  806554:	1001703a 	wrctl	status,r2
  
  return context;
  806558:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80655c:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  806560:	e0bffc17 	ldw	r2,-16(fp)
  806564:	10800003 	ldbu	r2,0(r2)
  806568:	10803fcc 	andi	r2,r2,255
  80656c:	10800160 	cmpeqi	r2,r2,5
  806570:	1000091e 	bne	r2,zero,806598 <OSFlagNameGet+0xf8>
  806574:	e0bffa17 	ldw	r2,-24(fp)
  806578:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80657c:	e0bff817 	ldw	r2,-32(fp)
  806580:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  806584:	e0fffe17 	ldw	r3,-8(fp)
  806588:	00800044 	movi	r2,1
  80658c:	18800005 	stb	r2,0(r3)
        return (0);
  806590:	e03fff15 	stw	zero,-4(fp)
  806594:	00000d06 	br	8065cc <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  806598:	e0bffc17 	ldw	r2,-16(fp)
  80659c:	11400284 	addi	r5,r2,10
  8065a0:	e13ffd17 	ldw	r4,-12(fp)
  8065a4:	08056580 	call	805658 <OS_StrCopy>
  8065a8:	e0bffb05 	stb	r2,-20(fp)
  8065ac:	e0bffa17 	ldw	r2,-24(fp)
  8065b0:	e0bff715 	stw	r2,-36(fp)
  8065b4:	e0bff717 	ldw	r2,-36(fp)
  8065b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8065bc:	e0bffe17 	ldw	r2,-8(fp)
  8065c0:	10000005 	stb	zero,0(r2)
    return (len);
  8065c4:	e0bffb03 	ldbu	r2,-20(fp)
  8065c8:	e0bfff15 	stw	r2,-4(fp)
  8065cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8065d0:	e037883a 	mov	sp,fp
  8065d4:	dfc00117 	ldw	ra,4(sp)
  8065d8:	df000017 	ldw	fp,0(sp)
  8065dc:	dec00204 	addi	sp,sp,8
  8065e0:	f800283a 	ret

008065e4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  8065e4:	defff504 	addi	sp,sp,-44
  8065e8:	dfc00a15 	stw	ra,40(sp)
  8065ec:	df000915 	stw	fp,36(sp)
  8065f0:	df000904 	addi	fp,sp,36
  8065f4:	e13ffd15 	stw	r4,-12(fp)
  8065f8:	e17ffe15 	stw	r5,-8(fp)
  8065fc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  806600:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  806604:	e0bfff17 	ldw	r2,-4(fp)
  806608:	1005003a 	cmpeq	r2,r2,zero
  80660c:	1000451e 	bne	r2,zero,806724 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  806610:	e0bffd17 	ldw	r2,-12(fp)
  806614:	1004c03a 	cmpne	r2,r2,zero
  806618:	1000041e 	bne	r2,zero,80662c <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80661c:	e0ffff17 	ldw	r3,-4(fp)
  806620:	00801b84 	movi	r2,110
  806624:	18800005 	stb	r2,0(r3)
        return;
  806628:	00003e06 	br	806724 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80662c:	e0bffe17 	ldw	r2,-8(fp)
  806630:	1004c03a 	cmpne	r2,r2,zero
  806634:	1000041e 	bne	r2,zero,806648 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  806638:	e0ffff17 	ldw	r3,-4(fp)
  80663c:	00800304 	movi	r2,12
  806640:	18800005 	stb	r2,0(r3)
        return;
  806644:	00003706 	br	806724 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  806648:	00802074 	movhi	r2,129
  80664c:	10899d04 	addi	r2,r2,9844
  806650:	10800003 	ldbu	r2,0(r2)
  806654:	10803fcc 	andi	r2,r2,255
  806658:	1005003a 	cmpeq	r2,r2,zero
  80665c:	1000041e 	bne	r2,zero,806670 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  806660:	e0ffff17 	ldw	r3,-4(fp)
  806664:	00800484 	movi	r2,18
  806668:	18800005 	stb	r2,0(r3)
        return;
  80666c:	00002d06 	br	806724 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806670:	0005303a 	rdctl	r2,status
  806674:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806678:	e0fffa17 	ldw	r3,-24(fp)
  80667c:	00bfff84 	movi	r2,-2
  806680:	1884703a 	and	r2,r3,r2
  806684:	1001703a 	wrctl	status,r2
  
  return context;
  806688:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80668c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  806690:	e0bffd17 	ldw	r2,-12(fp)
  806694:	10800003 	ldbu	r2,0(r2)
  806698:	10803fcc 	andi	r2,r2,255
  80669c:	10800160 	cmpeqi	r2,r2,5
  8066a0:	1000081e 	bne	r2,zero,8066c4 <OSFlagNameSet+0xe0>
  8066a4:	e0bffb17 	ldw	r2,-20(fp)
  8066a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8066ac:	e0bff917 	ldw	r2,-28(fp)
  8066b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  8066b4:	e0ffff17 	ldw	r3,-4(fp)
  8066b8:	00800044 	movi	r2,1
  8066bc:	18800005 	stb	r2,0(r3)
        return;
  8066c0:	00001806 	br	806724 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  8066c4:	e13ffe17 	ldw	r4,-8(fp)
  8066c8:	08056d80 	call	8056d8 <OS_StrLen>
  8066cc:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  8066d0:	e0bffc03 	ldbu	r2,-16(fp)
  8066d4:	10800830 	cmpltui	r2,r2,32
  8066d8:	1000081e 	bne	r2,zero,8066fc <OSFlagNameSet+0x118>
  8066dc:	e0bffb17 	ldw	r2,-20(fp)
  8066e0:	e0bff815 	stw	r2,-32(fp)
  8066e4:	e0bff817 	ldw	r2,-32(fp)
  8066e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  8066ec:	e0ffff17 	ldw	r3,-4(fp)
  8066f0:	00801cc4 	movi	r2,115
  8066f4:	18800005 	stb	r2,0(r3)
        return;
  8066f8:	00000a06 	br	806724 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  8066fc:	e0bffd17 	ldw	r2,-12(fp)
  806700:	11000284 	addi	r4,r2,10
  806704:	e17ffe17 	ldw	r5,-8(fp)
  806708:	08056580 	call	805658 <OS_StrCopy>
  80670c:	e0bffb17 	ldw	r2,-20(fp)
  806710:	e0bff715 	stw	r2,-36(fp)
  806714:	e0bff717 	ldw	r2,-36(fp)
  806718:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80671c:	e0bfff17 	ldw	r2,-4(fp)
  806720:	10000005 	stb	zero,0(r2)
    return;
}
  806724:	e037883a 	mov	sp,fp
  806728:	dfc00117 	ldw	ra,4(sp)
  80672c:	df000017 	ldw	fp,0(sp)
  806730:	dec00204 	addi	sp,sp,8
  806734:	f800283a 	ret

00806738 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  806738:	deffe004 	addi	sp,sp,-128
  80673c:	dfc01f15 	stw	ra,124(sp)
  806740:	df001e15 	stw	fp,120(sp)
  806744:	df001e04 	addi	fp,sp,120
  806748:	e13ff915 	stw	r4,-28(fp)
  80674c:	e17ffa0d 	sth	r5,-24(fp)
  806750:	e1bffb05 	stb	r6,-20(fp)
  806754:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  806758:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80675c:	e0800217 	ldw	r2,8(fp)
  806760:	1004c03a 	cmpne	r2,r2,zero
  806764:	1000021e 	bne	r2,zero,806770 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  806768:	e03fff15 	stw	zero,-4(fp)
  80676c:	00017d06 	br	806d64 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  806770:	e0bff917 	ldw	r2,-28(fp)
  806774:	1004c03a 	cmpne	r2,r2,zero
  806778:	1000051e 	bne	r2,zero,806790 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80677c:	e0c00217 	ldw	r3,8(fp)
  806780:	00801b84 	movi	r2,110
  806784:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  806788:	e03fff15 	stw	zero,-4(fp)
  80678c:	00017506 	br	806d64 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  806790:	00802074 	movhi	r2,129
  806794:	10899d04 	addi	r2,r2,9844
  806798:	10800003 	ldbu	r2,0(r2)
  80679c:	10803fcc 	andi	r2,r2,255
  8067a0:	1005003a 	cmpeq	r2,r2,zero
  8067a4:	1000051e 	bne	r2,zero,8067bc <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  8067a8:	e0c00217 	ldw	r3,8(fp)
  8067ac:	00800084 	movi	r2,2
  8067b0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8067b4:	e03fff15 	stw	zero,-4(fp)
  8067b8:	00016a06 	br	806d64 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  8067bc:	00802074 	movhi	r2,129
  8067c0:	10898f04 	addi	r2,r2,9788
  8067c4:	10800003 	ldbu	r2,0(r2)
  8067c8:	10803fcc 	andi	r2,r2,255
  8067cc:	1005003a 	cmpeq	r2,r2,zero
  8067d0:	1000051e 	bne	r2,zero,8067e8 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  8067d4:	e0c00217 	ldw	r3,8(fp)
  8067d8:	00800344 	movi	r2,13
  8067dc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8067e0:	e03fff15 	stw	zero,-4(fp)
  8067e4:	00015f06 	br	806d64 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  8067e8:	e0bff917 	ldw	r2,-28(fp)
  8067ec:	10800003 	ldbu	r2,0(r2)
  8067f0:	10803fcc 	andi	r2,r2,255
  8067f4:	10800160 	cmpeqi	r2,r2,5
  8067f8:	1000051e 	bne	r2,zero,806810 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  8067fc:	e0c00217 	ldw	r3,8(fp)
  806800:	00800044 	movi	r2,1
  806804:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  806808:	e03fff15 	stw	zero,-4(fp)
  80680c:	00015506 	br	806d64 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  806810:	e0fffb03 	ldbu	r3,-20(fp)
  806814:	00bfe004 	movi	r2,-128
  806818:	1884703a 	and	r2,r3,r2
  80681c:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  806820:	e0bff283 	ldbu	r2,-54(fp)
  806824:	1005003a 	cmpeq	r2,r2,zero
  806828:	1000071e 	bne	r2,zero,806848 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  80682c:	00c01fc4 	movi	r3,127
  806830:	e0bffb03 	ldbu	r2,-20(fp)
  806834:	10c4703a 	and	r2,r2,r3
  806838:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  80683c:	00800044 	movi	r2,1
  806840:	e0bff205 	stb	r2,-56(fp)
  806844:	00000106 	br	80684c <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  806848:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80684c:	0005303a 	rdctl	r2,status
  806850:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806854:	e0fff017 	ldw	r3,-64(fp)
  806858:	00bfff84 	movi	r2,-2
  80685c:	1884703a 	and	r2,r3,r2
  806860:	1001703a 	wrctl	status,r2
  
  return context;
  806864:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  806868:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  80686c:	e0bffb03 	ldbu	r2,-20(fp)
  806870:	e0bffe15 	stw	r2,-8(fp)
  806874:	e0fffe17 	ldw	r3,-8(fp)
  806878:	18800060 	cmpeqi	r2,r3,1
  80687c:	1000981e 	bne	r2,zero,806ae0 <OSFlagPend+0x3a8>
  806880:	e0fffe17 	ldw	r3,-8(fp)
  806884:	18800088 	cmpgei	r2,r3,2
  806888:	1000041e 	bne	r2,zero,80689c <OSFlagPend+0x164>
  80688c:	e0fffe17 	ldw	r3,-8(fp)
  806890:	1805003a 	cmpeq	r2,r3,zero
  806894:	1000641e 	bne	r2,zero,806a28 <OSFlagPend+0x2f0>
  806898:	0000bf06 	br	806b98 <OSFlagPend+0x460>
  80689c:	e0fffe17 	ldw	r3,-8(fp)
  8068a0:	188000a0 	cmpeqi	r2,r3,2
  8068a4:	1000041e 	bne	r2,zero,8068b8 <OSFlagPend+0x180>
  8068a8:	e0fffe17 	ldw	r3,-8(fp)
  8068ac:	188000e0 	cmpeqi	r2,r3,3
  8068b0:	10002f1e 	bne	r2,zero,806970 <OSFlagPend+0x238>
  8068b4:	0000b806 	br	806b98 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  8068b8:	e0bff917 	ldw	r2,-28(fp)
  8068bc:	10c0020b 	ldhu	r3,8(r2)
  8068c0:	e0bffa0b 	ldhu	r2,-24(fp)
  8068c4:	1884703a 	and	r2,r3,r2
  8068c8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8068cc:	e0fff30b 	ldhu	r3,-52(fp)
  8068d0:	e0bffa0b 	ldhu	r2,-24(fp)
  8068d4:	18801a1e 	bne	r3,r2,806940 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8068d8:	e0bff203 	ldbu	r2,-56(fp)
  8068dc:	10800058 	cmpnei	r2,r2,1
  8068e0:	1000091e 	bne	r2,zero,806908 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  8068e4:	e0bff917 	ldw	r2,-28(fp)
  8068e8:	1080020b 	ldhu	r2,8(r2)
  8068ec:	1007883a 	mov	r3,r2
  8068f0:	e0bff30b 	ldhu	r2,-52(fp)
  8068f4:	0084303a 	nor	r2,zero,r2
  8068f8:	1884703a 	and	r2,r3,r2
  8068fc:	1007883a 	mov	r3,r2
  806900:	e0bff917 	ldw	r2,-28(fp)
  806904:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  806908:	00802074 	movhi	r2,129
  80690c:	10899e04 	addi	r2,r2,9848
  806910:	10c00017 	ldw	r3,0(r2)
  806914:	e0bff30b 	ldhu	r2,-52(fp)
  806918:	18800b0d 	sth	r2,44(r3)
  80691c:	e0bff117 	ldw	r2,-60(fp)
  806920:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806924:	e0bfef17 	ldw	r2,-68(fp)
  806928:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80692c:	e0800217 	ldw	r2,8(fp)
  806930:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  806934:	e0bff30b 	ldhu	r2,-52(fp)
  806938:	e0bfff15 	stw	r2,-4(fp)
  80693c:	00010906 	br	806d64 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  806940:	e1bffa0b 	ldhu	r6,-24(fp)
  806944:	e1fffb03 	ldbu	r7,-20(fp)
  806948:	e0bffc0b 	ldhu	r2,-16(fp)
  80694c:	e17ff404 	addi	r5,fp,-48
  806950:	d8800015 	stw	r2,0(sp)
  806954:	e13ff917 	ldw	r4,-28(fp)
  806958:	08072600 	call	807260 <OS_FlagBlock>
  80695c:	e0bff117 	ldw	r2,-60(fp)
  806960:	e0bfee15 	stw	r2,-72(fp)
  806964:	e0bfee17 	ldw	r2,-72(fp)
  806968:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80696c:	00009506 	br	806bc4 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  806970:	e0bff917 	ldw	r2,-28(fp)
  806974:	10c0020b 	ldhu	r3,8(r2)
  806978:	e0bffa0b 	ldhu	r2,-24(fp)
  80697c:	1884703a 	and	r2,r3,r2
  806980:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  806984:	e0bff30b 	ldhu	r2,-52(fp)
  806988:	1005003a 	cmpeq	r2,r2,zero
  80698c:	10001a1e 	bne	r2,zero,8069f8 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  806990:	e0bff203 	ldbu	r2,-56(fp)
  806994:	10800058 	cmpnei	r2,r2,1
  806998:	1000091e 	bne	r2,zero,8069c0 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80699c:	e0bff917 	ldw	r2,-28(fp)
  8069a0:	1080020b 	ldhu	r2,8(r2)
  8069a4:	1007883a 	mov	r3,r2
  8069a8:	e0bff30b 	ldhu	r2,-52(fp)
  8069ac:	0084303a 	nor	r2,zero,r2
  8069b0:	1884703a 	and	r2,r3,r2
  8069b4:	1007883a 	mov	r3,r2
  8069b8:	e0bff917 	ldw	r2,-28(fp)
  8069bc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8069c0:	00802074 	movhi	r2,129
  8069c4:	10899e04 	addi	r2,r2,9848
  8069c8:	10c00017 	ldw	r3,0(r2)
  8069cc:	e0bff30b 	ldhu	r2,-52(fp)
  8069d0:	18800b0d 	sth	r2,44(r3)
  8069d4:	e0bff117 	ldw	r2,-60(fp)
  8069d8:	e0bfed15 	stw	r2,-76(fp)
  8069dc:	e0bfed17 	ldw	r2,-76(fp)
  8069e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8069e4:	e0800217 	ldw	r2,8(fp)
  8069e8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8069ec:	e0fff30b 	ldhu	r3,-52(fp)
  8069f0:	e0ffff15 	stw	r3,-4(fp)
  8069f4:	0000db06 	br	806d64 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8069f8:	e1bffa0b 	ldhu	r6,-24(fp)
  8069fc:	e1fffb03 	ldbu	r7,-20(fp)
  806a00:	e0bffc0b 	ldhu	r2,-16(fp)
  806a04:	e17ff404 	addi	r5,fp,-48
  806a08:	d8800015 	stw	r2,0(sp)
  806a0c:	e13ff917 	ldw	r4,-28(fp)
  806a10:	08072600 	call	807260 <OS_FlagBlock>
  806a14:	e0bff117 	ldw	r2,-60(fp)
  806a18:	e0bfec15 	stw	r2,-80(fp)
  806a1c:	e0bfec17 	ldw	r2,-80(fp)
  806a20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  806a24:	00006706 	br	806bc4 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  806a28:	e0bff917 	ldw	r2,-28(fp)
  806a2c:	1080020b 	ldhu	r2,8(r2)
  806a30:	0084303a 	nor	r2,zero,r2
  806a34:	1007883a 	mov	r3,r2
  806a38:	e0bffa0b 	ldhu	r2,-24(fp)
  806a3c:	1884703a 	and	r2,r3,r2
  806a40:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  806a44:	e0fff30b 	ldhu	r3,-52(fp)
  806a48:	e0bffa0b 	ldhu	r2,-24(fp)
  806a4c:	1880181e 	bne	r3,r2,806ab0 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  806a50:	e0bff203 	ldbu	r2,-56(fp)
  806a54:	10800058 	cmpnei	r2,r2,1
  806a58:	1000071e 	bne	r2,zero,806a78 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  806a5c:	e0bff917 	ldw	r2,-28(fp)
  806a60:	10c0020b 	ldhu	r3,8(r2)
  806a64:	e0bff30b 	ldhu	r2,-52(fp)
  806a68:	1884b03a 	or	r2,r3,r2
  806a6c:	1007883a 	mov	r3,r2
  806a70:	e0bff917 	ldw	r2,-28(fp)
  806a74:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  806a78:	00802074 	movhi	r2,129
  806a7c:	10899e04 	addi	r2,r2,9848
  806a80:	10c00017 	ldw	r3,0(r2)
  806a84:	e0bff30b 	ldhu	r2,-52(fp)
  806a88:	18800b0d 	sth	r2,44(r3)
  806a8c:	e0bff117 	ldw	r2,-60(fp)
  806a90:	e0bfeb15 	stw	r2,-84(fp)
  806a94:	e0bfeb17 	ldw	r2,-84(fp)
  806a98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  806a9c:	e0800217 	ldw	r2,8(fp)
  806aa0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  806aa4:	e0bff30b 	ldhu	r2,-52(fp)
  806aa8:	e0bfff15 	stw	r2,-4(fp)
  806aac:	0000ad06 	br	806d64 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  806ab0:	e1bffa0b 	ldhu	r6,-24(fp)
  806ab4:	e1fffb03 	ldbu	r7,-20(fp)
  806ab8:	e0bffc0b 	ldhu	r2,-16(fp)
  806abc:	e17ff404 	addi	r5,fp,-48
  806ac0:	d8800015 	stw	r2,0(sp)
  806ac4:	e13ff917 	ldw	r4,-28(fp)
  806ac8:	08072600 	call	807260 <OS_FlagBlock>
  806acc:	e0bff117 	ldw	r2,-60(fp)
  806ad0:	e0bfea15 	stw	r2,-88(fp)
  806ad4:	e0bfea17 	ldw	r2,-88(fp)
  806ad8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  806adc:	00003906 	br	806bc4 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  806ae0:	e0bff917 	ldw	r2,-28(fp)
  806ae4:	1080020b 	ldhu	r2,8(r2)
  806ae8:	0084303a 	nor	r2,zero,r2
  806aec:	1007883a 	mov	r3,r2
  806af0:	e0bffa0b 	ldhu	r2,-24(fp)
  806af4:	1884703a 	and	r2,r3,r2
  806af8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  806afc:	e0bff30b 	ldhu	r2,-52(fp)
  806b00:	1005003a 	cmpeq	r2,r2,zero
  806b04:	1000181e 	bne	r2,zero,806b68 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  806b08:	e0bff203 	ldbu	r2,-56(fp)
  806b0c:	10800058 	cmpnei	r2,r2,1
  806b10:	1000071e 	bne	r2,zero,806b30 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  806b14:	e0bff917 	ldw	r2,-28(fp)
  806b18:	10c0020b 	ldhu	r3,8(r2)
  806b1c:	e0bff30b 	ldhu	r2,-52(fp)
  806b20:	1884b03a 	or	r2,r3,r2
  806b24:	1007883a 	mov	r3,r2
  806b28:	e0bff917 	ldw	r2,-28(fp)
  806b2c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  806b30:	00802074 	movhi	r2,129
  806b34:	10899e04 	addi	r2,r2,9848
  806b38:	10c00017 	ldw	r3,0(r2)
  806b3c:	e0bff30b 	ldhu	r2,-52(fp)
  806b40:	18800b0d 	sth	r2,44(r3)
  806b44:	e0bff117 	ldw	r2,-60(fp)
  806b48:	e0bfe915 	stw	r2,-92(fp)
  806b4c:	e0bfe917 	ldw	r2,-92(fp)
  806b50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  806b54:	e0800217 	ldw	r2,8(fp)
  806b58:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  806b5c:	e0fff30b 	ldhu	r3,-52(fp)
  806b60:	e0ffff15 	stw	r3,-4(fp)
  806b64:	00007f06 	br	806d64 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  806b68:	e1bffa0b 	ldhu	r6,-24(fp)
  806b6c:	e1fffb03 	ldbu	r7,-20(fp)
  806b70:	e0bffc0b 	ldhu	r2,-16(fp)
  806b74:	e17ff404 	addi	r5,fp,-48
  806b78:	d8800015 	stw	r2,0(sp)
  806b7c:	e13ff917 	ldw	r4,-28(fp)
  806b80:	08072600 	call	807260 <OS_FlagBlock>
  806b84:	e0bff117 	ldw	r2,-60(fp)
  806b88:	e0bfe815 	stw	r2,-96(fp)
  806b8c:	e0bfe817 	ldw	r2,-96(fp)
  806b90:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  806b94:	00000b06 	br	806bc4 <OSFlagPend+0x48c>
  806b98:	e0bff117 	ldw	r2,-60(fp)
  806b9c:	e0bfe715 	stw	r2,-100(fp)
  806ba0:	e0bfe717 	ldw	r2,-100(fp)
  806ba4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  806ba8:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  806bac:	e0c00217 	ldw	r3,8(fp)
  806bb0:	00801bc4 	movi	r2,111
  806bb4:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  806bb8:	e0bff30b 	ldhu	r2,-52(fp)
  806bbc:	e0bfff15 	stw	r2,-4(fp)
  806bc0:	00006806 	br	806d64 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  806bc4:	08055140 	call	805514 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806bc8:	0005303a 	rdctl	r2,status
  806bcc:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806bd0:	e0ffe617 	ldw	r3,-104(fp)
  806bd4:	00bfff84 	movi	r2,-2
  806bd8:	1884703a 	and	r2,r3,r2
  806bdc:	1001703a 	wrctl	status,r2
  
  return context;
  806be0:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  806be4:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  806be8:	00802074 	movhi	r2,129
  806bec:	10899e04 	addi	r2,r2,9848
  806bf0:	10800017 	ldw	r2,0(r2)
  806bf4:	10800c43 	ldbu	r2,49(r2)
  806bf8:	10803fcc 	andi	r2,r2,255
  806bfc:	1005003a 	cmpeq	r2,r2,zero
  806c00:	1000221e 	bne	r2,zero,806c8c <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  806c04:	00802074 	movhi	r2,129
  806c08:	10899e04 	addi	r2,r2,9848
  806c0c:	10800017 	ldw	r2,0(r2)
  806c10:	10800c43 	ldbu	r2,49(r2)
  806c14:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  806c18:	00802074 	movhi	r2,129
  806c1c:	10899e04 	addi	r2,r2,9848
  806c20:	10800017 	ldw	r2,0(r2)
  806c24:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  806c28:	e13ff404 	addi	r4,fp,-48
  806c2c:	08076180 	call	807618 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  806c30:	00802074 	movhi	r2,129
  806c34:	10899e04 	addi	r2,r2,9848
  806c38:	10800017 	ldw	r2,0(r2)
  806c3c:	10000c05 	stb	zero,48(r2)
  806c40:	e0bff117 	ldw	r2,-60(fp)
  806c44:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806c48:	e0bfe517 	ldw	r2,-108(fp)
  806c4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  806c50:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  806c54:	e0bff243 	ldbu	r2,-55(fp)
  806c58:	108000a0 	cmpeqi	r2,r2,2
  806c5c:	1000011e 	bne	r2,zero,806c64 <OSFlagPend+0x52c>
  806c60:	00000406 	br	806c74 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  806c64:	e0c00217 	ldw	r3,8(fp)
  806c68:	00800384 	movi	r2,14
  806c6c:	18800005 	stb	r2,0(r3)
                 break;
  806c70:	00000306 	br	806c80 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  806c74:	e0c00217 	ldw	r3,8(fp)
  806c78:	00800284 	movi	r2,10
  806c7c:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  806c80:	e0fff30b 	ldhu	r3,-52(fp)
  806c84:	e0ffff15 	stw	r3,-4(fp)
  806c88:	00003606 	br	806d64 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  806c8c:	00802074 	movhi	r2,129
  806c90:	10899e04 	addi	r2,r2,9848
  806c94:	10800017 	ldw	r2,0(r2)
  806c98:	10800b0b 	ldhu	r2,44(r2)
  806c9c:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  806ca0:	e0bff203 	ldbu	r2,-56(fp)
  806ca4:	10800058 	cmpnei	r2,r2,1
  806ca8:	1000261e 	bne	r2,zero,806d44 <OSFlagPend+0x60c>
        switch (wait_type) {
  806cac:	e0bffb03 	ldbu	r2,-20(fp)
  806cb0:	e0bffd15 	stw	r2,-12(fp)
  806cb4:	e0fffd17 	ldw	r3,-12(fp)
  806cb8:	1804803a 	cmplt	r2,r3,zero
  806cbc:	1000181e 	bne	r2,zero,806d20 <OSFlagPend+0x5e8>
  806cc0:	e0fffd17 	ldw	r3,-12(fp)
  806cc4:	18800090 	cmplti	r2,r3,2
  806cc8:	10000d1e 	bne	r2,zero,806d00 <OSFlagPend+0x5c8>
  806ccc:	e0fffd17 	ldw	r3,-12(fp)
  806cd0:	18800108 	cmpgei	r2,r3,4
  806cd4:	1000121e 	bne	r2,zero,806d20 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  806cd8:	e0bff917 	ldw	r2,-28(fp)
  806cdc:	1080020b 	ldhu	r2,8(r2)
  806ce0:	1007883a 	mov	r3,r2
  806ce4:	e0bff30b 	ldhu	r2,-52(fp)
  806ce8:	0084303a 	nor	r2,zero,r2
  806cec:	1884703a 	and	r2,r3,r2
  806cf0:	1007883a 	mov	r3,r2
  806cf4:	e0bff917 	ldw	r2,-28(fp)
  806cf8:	10c0020d 	sth	r3,8(r2)
                 break;
  806cfc:	00001106 	br	806d44 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  806d00:	e0bff917 	ldw	r2,-28(fp)
  806d04:	10c0020b 	ldhu	r3,8(r2)
  806d08:	e0bff30b 	ldhu	r2,-52(fp)
  806d0c:	1884b03a 	or	r2,r3,r2
  806d10:	1007883a 	mov	r3,r2
  806d14:	e0bff917 	ldw	r2,-28(fp)
  806d18:	10c0020d 	sth	r3,8(r2)
                 break;
  806d1c:	00000906 	br	806d44 <OSFlagPend+0x60c>
  806d20:	e0bff117 	ldw	r2,-60(fp)
  806d24:	e0bfe415 	stw	r2,-112(fp)
  806d28:	e0bfe417 	ldw	r2,-112(fp)
  806d2c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  806d30:	e0c00217 	ldw	r3,8(fp)
  806d34:	00801bc4 	movi	r2,111
  806d38:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  806d3c:	e03fff15 	stw	zero,-4(fp)
  806d40:	00000806 	br	806d64 <OSFlagPend+0x62c>
  806d44:	e0bff117 	ldw	r2,-60(fp)
  806d48:	e0bfe315 	stw	r2,-116(fp)
  806d4c:	e0bfe317 	ldw	r2,-116(fp)
  806d50:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  806d54:	e0800217 	ldw	r2,8(fp)
  806d58:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  806d5c:	e0bff30b 	ldhu	r2,-52(fp)
  806d60:	e0bfff15 	stw	r2,-4(fp)
  806d64:	e0bfff17 	ldw	r2,-4(fp)
}
  806d68:	e037883a 	mov	sp,fp
  806d6c:	dfc00117 	ldw	ra,4(sp)
  806d70:	df000017 	ldw	fp,0(sp)
  806d74:	dec00204 	addi	sp,sp,8
  806d78:	f800283a 	ret

00806d7c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  806d7c:	defffb04 	addi	sp,sp,-20
  806d80:	df000415 	stw	fp,16(sp)
  806d84:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  806d88:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806d8c:	0005303a 	rdctl	r2,status
  806d90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806d94:	e0fffd17 	ldw	r3,-12(fp)
  806d98:	00bfff84 	movi	r2,-2
  806d9c:	1884703a 	and	r2,r3,r2
  806da0:	1001703a 	wrctl	status,r2
  
  return context;
  806da4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  806da8:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  806dac:	00802074 	movhi	r2,129
  806db0:	10899e04 	addi	r2,r2,9848
  806db4:	10800017 	ldw	r2,0(r2)
  806db8:	10800b0b 	ldhu	r2,44(r2)
  806dbc:	e0bfff0d 	sth	r2,-4(fp)
  806dc0:	e0bffe17 	ldw	r2,-8(fp)
  806dc4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806dc8:	e0bffc17 	ldw	r2,-16(fp)
  806dcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  806dd0:	e0bfff0b 	ldhu	r2,-4(fp)
}
  806dd4:	e037883a 	mov	sp,fp
  806dd8:	df000017 	ldw	fp,0(sp)
  806ddc:	dec00104 	addi	sp,sp,4
  806de0:	f800283a 	ret

00806de4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  806de4:	deffed04 	addi	sp,sp,-76
  806de8:	dfc01215 	stw	ra,72(sp)
  806dec:	df001115 	stw	fp,68(sp)
  806df0:	df001104 	addi	fp,sp,68
  806df4:	e13ff915 	stw	r4,-28(fp)
  806df8:	e1fffc15 	stw	r7,-16(fp)
  806dfc:	e17ffa0d 	sth	r5,-24(fp)
  806e00:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  806e04:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  806e08:	e0bffc17 	ldw	r2,-16(fp)
  806e0c:	1004c03a 	cmpne	r2,r2,zero
  806e10:	1000021e 	bne	r2,zero,806e1c <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  806e14:	e03fff15 	stw	zero,-4(fp)
  806e18:	0000d606 	br	807174 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  806e1c:	e0bff917 	ldw	r2,-28(fp)
  806e20:	1004c03a 	cmpne	r2,r2,zero
  806e24:	1000051e 	bne	r2,zero,806e3c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  806e28:	e0fffc17 	ldw	r3,-16(fp)
  806e2c:	00801b84 	movi	r2,110
  806e30:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  806e34:	e03fff15 	stw	zero,-4(fp)
  806e38:	0000ce06 	br	807174 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  806e3c:	e0bff917 	ldw	r2,-28(fp)
  806e40:	10800003 	ldbu	r2,0(r2)
  806e44:	10803fcc 	andi	r2,r2,255
  806e48:	10800160 	cmpeqi	r2,r2,5
  806e4c:	1000051e 	bne	r2,zero,806e64 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  806e50:	e0fffc17 	ldw	r3,-16(fp)
  806e54:	00800044 	movi	r2,1
  806e58:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  806e5c:	e03fff15 	stw	zero,-4(fp)
  806e60:	0000c406 	br	807174 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806e64:	0005303a 	rdctl	r2,status
  806e68:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806e6c:	e0fff417 	ldw	r3,-48(fp)
  806e70:	00bfff84 	movi	r2,-2
  806e74:	1884703a 	and	r2,r3,r2
  806e78:	1001703a 	wrctl	status,r2
  
  return context;
  806e7c:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  806e80:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  806e84:	e0bffb03 	ldbu	r2,-20(fp)
  806e88:	e0bffe15 	stw	r2,-8(fp)
  806e8c:	e0fffe17 	ldw	r3,-8(fp)
  806e90:	1805003a 	cmpeq	r2,r3,zero
  806e94:	1000041e 	bne	r2,zero,806ea8 <OSFlagPost+0xc4>
  806e98:	e0fffe17 	ldw	r3,-8(fp)
  806e9c:	18800060 	cmpeqi	r2,r3,1
  806ea0:	10000b1e 	bne	r2,zero,806ed0 <OSFlagPost+0xec>
  806ea4:	00001206 	br	806ef0 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  806ea8:	e0bff917 	ldw	r2,-28(fp)
  806eac:	1080020b 	ldhu	r2,8(r2)
  806eb0:	1007883a 	mov	r3,r2
  806eb4:	e0bffa0b 	ldhu	r2,-24(fp)
  806eb8:	0084303a 	nor	r2,zero,r2
  806ebc:	1884703a 	and	r2,r3,r2
  806ec0:	1007883a 	mov	r3,r2
  806ec4:	e0bff917 	ldw	r2,-28(fp)
  806ec8:	10c0020d 	sth	r3,8(r2)
             break;
  806ecc:	00001106 	br	806f14 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  806ed0:	e0bff917 	ldw	r2,-28(fp)
  806ed4:	10c0020b 	ldhu	r3,8(r2)
  806ed8:	e0bffa0b 	ldhu	r2,-24(fp)
  806edc:	1884b03a 	or	r2,r3,r2
  806ee0:	1007883a 	mov	r3,r2
  806ee4:	e0bff917 	ldw	r2,-28(fp)
  806ee8:	10c0020d 	sth	r3,8(r2)
             break;
  806eec:	00000906 	br	806f14 <OSFlagPost+0x130>
  806ef0:	e0bff517 	ldw	r2,-44(fp)
  806ef4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806ef8:	e0bff317 	ldw	r2,-52(fp)
  806efc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  806f00:	e0fffc17 	ldw	r3,-16(fp)
  806f04:	00801c44 	movi	r2,113
  806f08:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  806f0c:	e03fff15 	stw	zero,-4(fp)
  806f10:	00009806 	br	807174 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  806f14:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  806f18:	e0bff917 	ldw	r2,-28(fp)
  806f1c:	10800117 	ldw	r2,4(r2)
  806f20:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  806f24:	00007506 	br	8070fc <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  806f28:	e0bff817 	ldw	r2,-32(fp)
  806f2c:	10800483 	ldbu	r2,18(r2)
  806f30:	10803fcc 	andi	r2,r2,255
  806f34:	e0bffd15 	stw	r2,-12(fp)
  806f38:	e0fffd17 	ldw	r3,-12(fp)
  806f3c:	18800060 	cmpeqi	r2,r3,1
  806f40:	10004d1e 	bne	r2,zero,807078 <OSFlagPost+0x294>
  806f44:	e0fffd17 	ldw	r3,-12(fp)
  806f48:	18800088 	cmpgei	r2,r3,2
  806f4c:	1000041e 	bne	r2,zero,806f60 <OSFlagPost+0x17c>
  806f50:	e0fffd17 	ldw	r3,-12(fp)
  806f54:	1805003a 	cmpeq	r2,r3,zero
  806f58:	1000301e 	bne	r2,zero,80701c <OSFlagPost+0x238>
  806f5c:	00005b06 	br	8070cc <OSFlagPost+0x2e8>
  806f60:	e0fffd17 	ldw	r3,-12(fp)
  806f64:	188000a0 	cmpeqi	r2,r3,2
  806f68:	1000041e 	bne	r2,zero,806f7c <OSFlagPost+0x198>
  806f6c:	e0fffd17 	ldw	r3,-12(fp)
  806f70:	188000e0 	cmpeqi	r2,r3,3
  806f74:	1000161e 	bne	r2,zero,806fd0 <OSFlagPost+0x1ec>
  806f78:	00005406 	br	8070cc <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  806f7c:	e0bff917 	ldw	r2,-28(fp)
  806f80:	10c0020b 	ldhu	r3,8(r2)
  806f84:	e0bff817 	ldw	r2,-32(fp)
  806f88:	1080040b 	ldhu	r2,16(r2)
  806f8c:	1884703a 	and	r2,r3,r2
  806f90:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  806f94:	e0bff817 	ldw	r2,-32(fp)
  806f98:	1080040b 	ldhu	r2,16(r2)
  806f9c:	10ffffcc 	andi	r3,r2,65535
  806fa0:	e0bff68b 	ldhu	r2,-38(fp)
  806fa4:	1880521e 	bne	r3,r2,8070f0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  806fa8:	e17ff68b 	ldhu	r5,-38(fp)
  806fac:	e13ff817 	ldw	r4,-32(fp)
  806fb0:	08075080 	call	807508 <OS_FlagTaskRdy>
  806fb4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  806fb8:	e0bff603 	ldbu	r2,-40(fp)
  806fbc:	10800058 	cmpnei	r2,r2,1
  806fc0:	10004b1e 	bne	r2,zero,8070f0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  806fc4:	00800044 	movi	r2,1
  806fc8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  806fcc:	00004806 	br	8070f0 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  806fd0:	e0bff917 	ldw	r2,-28(fp)
  806fd4:	10c0020b 	ldhu	r3,8(r2)
  806fd8:	e0bff817 	ldw	r2,-32(fp)
  806fdc:	1080040b 	ldhu	r2,16(r2)
  806fe0:	1884703a 	and	r2,r3,r2
  806fe4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  806fe8:	e0bff68b 	ldhu	r2,-38(fp)
  806fec:	1005003a 	cmpeq	r2,r2,zero
  806ff0:	10003f1e 	bne	r2,zero,8070f0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  806ff4:	e17ff68b 	ldhu	r5,-38(fp)
  806ff8:	e13ff817 	ldw	r4,-32(fp)
  806ffc:	08075080 	call	807508 <OS_FlagTaskRdy>
  807000:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  807004:	e0bff603 	ldbu	r2,-40(fp)
  807008:	10800058 	cmpnei	r2,r2,1
  80700c:	1000381e 	bne	r2,zero,8070f0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  807010:	00800044 	movi	r2,1
  807014:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  807018:	00003506 	br	8070f0 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80701c:	e0bff917 	ldw	r2,-28(fp)
  807020:	1080020b 	ldhu	r2,8(r2)
  807024:	0084303a 	nor	r2,zero,r2
  807028:	1007883a 	mov	r3,r2
  80702c:	e0bff817 	ldw	r2,-32(fp)
  807030:	1080040b 	ldhu	r2,16(r2)
  807034:	1884703a 	and	r2,r3,r2
  807038:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80703c:	e0bff817 	ldw	r2,-32(fp)
  807040:	1080040b 	ldhu	r2,16(r2)
  807044:	10ffffcc 	andi	r3,r2,65535
  807048:	e0bff68b 	ldhu	r2,-38(fp)
  80704c:	1880281e 	bne	r3,r2,8070f0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  807050:	e17ff68b 	ldhu	r5,-38(fp)
  807054:	e13ff817 	ldw	r4,-32(fp)
  807058:	08075080 	call	807508 <OS_FlagTaskRdy>
  80705c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  807060:	e0bff603 	ldbu	r2,-40(fp)
  807064:	10800058 	cmpnei	r2,r2,1
  807068:	1000211e 	bne	r2,zero,8070f0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80706c:	00800044 	movi	r2,1
  807070:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  807074:	00001e06 	br	8070f0 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  807078:	e0bff917 	ldw	r2,-28(fp)
  80707c:	1080020b 	ldhu	r2,8(r2)
  807080:	0084303a 	nor	r2,zero,r2
  807084:	1007883a 	mov	r3,r2
  807088:	e0bff817 	ldw	r2,-32(fp)
  80708c:	1080040b 	ldhu	r2,16(r2)
  807090:	1884703a 	and	r2,r3,r2
  807094:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  807098:	e0bff68b 	ldhu	r2,-38(fp)
  80709c:	1005003a 	cmpeq	r2,r2,zero
  8070a0:	1000131e 	bne	r2,zero,8070f0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8070a4:	e17ff68b 	ldhu	r5,-38(fp)
  8070a8:	e13ff817 	ldw	r4,-32(fp)
  8070ac:	08075080 	call	807508 <OS_FlagTaskRdy>
  8070b0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  8070b4:	e0bff603 	ldbu	r2,-40(fp)
  8070b8:	10800058 	cmpnei	r2,r2,1
  8070bc:	10000c1e 	bne	r2,zero,8070f0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8070c0:	00800044 	movi	r2,1
  8070c4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  8070c8:	00000906 	br	8070f0 <OSFlagPost+0x30c>
  8070cc:	e0bff517 	ldw	r2,-44(fp)
  8070d0:	e0bff215 	stw	r2,-56(fp)
  8070d4:	e0bff217 	ldw	r2,-56(fp)
  8070d8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  8070dc:	e0fffc17 	ldw	r3,-16(fp)
  8070e0:	00801bc4 	movi	r2,111
  8070e4:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  8070e8:	e03fff15 	stw	zero,-4(fp)
  8070ec:	00002106 	br	807174 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  8070f0:	e0bff817 	ldw	r2,-32(fp)
  8070f4:	10800017 	ldw	r2,0(r2)
  8070f8:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  8070fc:	e0bff817 	ldw	r2,-32(fp)
  807100:	1004c03a 	cmpne	r2,r2,zero
  807104:	103f881e 	bne	r2,zero,806f28 <OSFlagPost+0x144>
  807108:	e0bff517 	ldw	r2,-44(fp)
  80710c:	e0bff115 	stw	r2,-60(fp)
  807110:	e0bff117 	ldw	r2,-60(fp)
  807114:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  807118:	e0bff783 	ldbu	r2,-34(fp)
  80711c:	10800058 	cmpnei	r2,r2,1
  807120:	1000011e 	bne	r2,zero,807128 <OSFlagPost+0x344>
        OS_Sched();
  807124:	08055140 	call	805514 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807128:	0005303a 	rdctl	r2,status
  80712c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807130:	e0fff017 	ldw	r3,-64(fp)
  807134:	00bfff84 	movi	r2,-2
  807138:	1884703a 	and	r2,r3,r2
  80713c:	1001703a 	wrctl	status,r2
  
  return context;
  807140:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  807144:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  807148:	e0bff917 	ldw	r2,-28(fp)
  80714c:	1080020b 	ldhu	r2,8(r2)
  807150:	e0bff70d 	sth	r2,-36(fp)
  807154:	e0bff517 	ldw	r2,-44(fp)
  807158:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80715c:	e0bfef17 	ldw	r2,-68(fp)
  807160:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  807164:	e0bffc17 	ldw	r2,-16(fp)
  807168:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  80716c:	e0bff70b 	ldhu	r2,-36(fp)
  807170:	e0bfff15 	stw	r2,-4(fp)
  807174:	e0bfff17 	ldw	r2,-4(fp)
}
  807178:	e037883a 	mov	sp,fp
  80717c:	dfc00117 	ldw	ra,4(sp)
  807180:	df000017 	ldw	fp,0(sp)
  807184:	dec00204 	addi	sp,sp,8
  807188:	f800283a 	ret

0080718c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  80718c:	defff804 	addi	sp,sp,-32
  807190:	df000715 	stw	fp,28(sp)
  807194:	df000704 	addi	fp,sp,28
  807198:	e13ffd15 	stw	r4,-12(fp)
  80719c:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  8071a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  8071a4:	e0bffe17 	ldw	r2,-8(fp)
  8071a8:	1004c03a 	cmpne	r2,r2,zero
  8071ac:	1000021e 	bne	r2,zero,8071b8 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  8071b0:	e03fff15 	stw	zero,-4(fp)
  8071b4:	00002506 	br	80724c <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  8071b8:	e0bffd17 	ldw	r2,-12(fp)
  8071bc:	1004c03a 	cmpne	r2,r2,zero
  8071c0:	1000051e 	bne	r2,zero,8071d8 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8071c4:	e0fffe17 	ldw	r3,-8(fp)
  8071c8:	00801b84 	movi	r2,110
  8071cc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8071d0:	e03fff15 	stw	zero,-4(fp)
  8071d4:	00001d06 	br	80724c <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  8071d8:	e0bffd17 	ldw	r2,-12(fp)
  8071dc:	10800003 	ldbu	r2,0(r2)
  8071e0:	10803fcc 	andi	r2,r2,255
  8071e4:	10800160 	cmpeqi	r2,r2,5
  8071e8:	1000051e 	bne	r2,zero,807200 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  8071ec:	e0fffe17 	ldw	r3,-8(fp)
  8071f0:	00800044 	movi	r2,1
  8071f4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8071f8:	e03fff15 	stw	zero,-4(fp)
  8071fc:	00001306 	br	80724c <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807200:	0005303a 	rdctl	r2,status
  807204:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807208:	e0fffa17 	ldw	r3,-24(fp)
  80720c:	00bfff84 	movi	r2,-2
  807210:	1884703a 	and	r2,r3,r2
  807214:	1001703a 	wrctl	status,r2
  
  return context;
  807218:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80721c:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  807220:	e0bffd17 	ldw	r2,-12(fp)
  807224:	1080020b 	ldhu	r2,8(r2)
  807228:	e0bffc0d 	sth	r2,-16(fp)
  80722c:	e0bffb17 	ldw	r2,-20(fp)
  807230:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807234:	e0bff917 	ldw	r2,-28(fp)
  807238:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80723c:	e0bffe17 	ldw	r2,-8(fp)
  807240:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  807244:	e0bffc0b 	ldhu	r2,-16(fp)
  807248:	e0bfff15 	stw	r2,-4(fp)
  80724c:	e0bfff17 	ldw	r2,-4(fp)
}
  807250:	e037883a 	mov	sp,fp
  807254:	df000017 	ldw	fp,0(sp)
  807258:	dec00104 	addi	sp,sp,4
  80725c:	f800283a 	ret

00807260 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  807260:	defff804 	addi	sp,sp,-32
  807264:	df000715 	stw	fp,28(sp)
  807268:	df000704 	addi	fp,sp,28
  80726c:	e13ffb15 	stw	r4,-20(fp)
  807270:	e17ffc15 	stw	r5,-16(fp)
  807274:	e0800117 	ldw	r2,4(fp)
  807278:	e1bffd0d 	sth	r6,-12(fp)
  80727c:	e1fffe05 	stb	r7,-8(fp)
  807280:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  807284:	00802074 	movhi	r2,129
  807288:	10899e04 	addi	r2,r2,9848
  80728c:	10c00017 	ldw	r3,0(r2)
  807290:	00802074 	movhi	r2,129
  807294:	10899e04 	addi	r2,r2,9848
  807298:	10800017 	ldw	r2,0(r2)
  80729c:	10800c03 	ldbu	r2,48(r2)
  8072a0:	10800814 	ori	r2,r2,32
  8072a4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  8072a8:	00802074 	movhi	r2,129
  8072ac:	10899e04 	addi	r2,r2,9848
  8072b0:	10800017 	ldw	r2,0(r2)
  8072b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  8072b8:	00802074 	movhi	r2,129
  8072bc:	10899e04 	addi	r2,r2,9848
  8072c0:	10c00017 	ldw	r3,0(r2)
  8072c4:	e0bfff0b 	ldhu	r2,-4(fp)
  8072c8:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  8072cc:	00802074 	movhi	r2,129
  8072d0:	10899e04 	addi	r2,r2,9848
  8072d4:	10c00017 	ldw	r3,0(r2)
  8072d8:	e0bffc17 	ldw	r2,-16(fp)
  8072dc:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  8072e0:	e0fffc17 	ldw	r3,-16(fp)
  8072e4:	e0bffd0b 	ldhu	r2,-12(fp)
  8072e8:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  8072ec:	e0fffc17 	ldw	r3,-16(fp)
  8072f0:	e0bffe03 	ldbu	r2,-8(fp)
  8072f4:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  8072f8:	00802074 	movhi	r2,129
  8072fc:	10899e04 	addi	r2,r2,9848
  807300:	10c00017 	ldw	r3,0(r2)
  807304:	e0bffc17 	ldw	r2,-16(fp)
  807308:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  80730c:	e0bffb17 	ldw	r2,-20(fp)
  807310:	10c00117 	ldw	r3,4(r2)
  807314:	e0bffc17 	ldw	r2,-16(fp)
  807318:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  80731c:	e0bffc17 	ldw	r2,-16(fp)
  807320:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  807324:	e0fffc17 	ldw	r3,-16(fp)
  807328:	e0bffb17 	ldw	r2,-20(fp)
  80732c:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  807330:	e0bffb17 	ldw	r2,-20(fp)
  807334:	10800117 	ldw	r2,4(r2)
  807338:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  80733c:	e0bffa17 	ldw	r2,-24(fp)
  807340:	1005003a 	cmpeq	r2,r2,zero
  807344:	1000031e 	bne	r2,zero,807354 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  807348:	e0fffa17 	ldw	r3,-24(fp)
  80734c:	e0bffc17 	ldw	r2,-16(fp)
  807350:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  807354:	e0fffb17 	ldw	r3,-20(fp)
  807358:	e0bffc17 	ldw	r2,-16(fp)
  80735c:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  807360:	00802074 	movhi	r2,129
  807364:	10899e04 	addi	r2,r2,9848
  807368:	10800017 	ldw	r2,0(r2)
  80736c:	10800d03 	ldbu	r2,52(r2)
  807370:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  807374:	e13ff903 	ldbu	r4,-28(fp)
  807378:	e0fff903 	ldbu	r3,-28(fp)
  80737c:	00802074 	movhi	r2,129
  807380:	10899b44 	addi	r2,r2,9837
  807384:	10c5883a 	add	r2,r2,r3
  807388:	10800003 	ldbu	r2,0(r2)
  80738c:	1007883a 	mov	r3,r2
  807390:	00802074 	movhi	r2,129
  807394:	10899e04 	addi	r2,r2,9848
  807398:	10800017 	ldw	r2,0(r2)
  80739c:	10800d43 	ldbu	r2,53(r2)
  8073a0:	0084303a 	nor	r2,zero,r2
  8073a4:	1884703a 	and	r2,r3,r2
  8073a8:	1007883a 	mov	r3,r2
  8073ac:	00802074 	movhi	r2,129
  8073b0:	10899b44 	addi	r2,r2,9837
  8073b4:	1105883a 	add	r2,r2,r4
  8073b8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  8073bc:	e0fff903 	ldbu	r3,-28(fp)
  8073c0:	00802074 	movhi	r2,129
  8073c4:	10899b44 	addi	r2,r2,9837
  8073c8:	10c5883a 	add	r2,r2,r3
  8073cc:	10800003 	ldbu	r2,0(r2)
  8073d0:	10803fcc 	andi	r2,r2,255
  8073d4:	1004c03a 	cmpne	r2,r2,zero
  8073d8:	10000e1e 	bne	r2,zero,807414 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  8073dc:	00802074 	movhi	r2,129
  8073e0:	10899e04 	addi	r2,r2,9848
  8073e4:	10800017 	ldw	r2,0(r2)
  8073e8:	10800d83 	ldbu	r2,54(r2)
  8073ec:	0084303a 	nor	r2,zero,r2
  8073f0:	1007883a 	mov	r3,r2
  8073f4:	00802074 	movhi	r2,129
  8073f8:	10899b04 	addi	r2,r2,9836
  8073fc:	10800003 	ldbu	r2,0(r2)
  807400:	1884703a 	and	r2,r3,r2
  807404:	1007883a 	mov	r3,r2
  807408:	00802074 	movhi	r2,129
  80740c:	10899b04 	addi	r2,r2,9836
  807410:	10c00005 	stb	r3,0(r2)
    }
}
  807414:	e037883a 	mov	sp,fp
  807418:	df000017 	ldw	fp,0(sp)
  80741c:	dec00104 	addi	sp,sp,4
  807420:	f800283a 	ret

00807424 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  807424:	defffb04 	addi	sp,sp,-20
  807428:	dfc00415 	stw	ra,16(sp)
  80742c:	df000315 	stw	fp,12(sp)
  807430:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  807434:	01002074 	movhi	r4,129
  807438:	2111b004 	addi	r4,r4,18112
  80743c:	0140dc04 	movi	r5,880
  807440:	08054540 	call	805454 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  807444:	00802074 	movhi	r2,129
  807448:	1091b004 	addi	r2,r2,18112
  80744c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  807450:	00802074 	movhi	r2,129
  807454:	1091bb04 	addi	r2,r2,18156
  807458:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80745c:	e03fff0d 	sth	zero,-4(fp)
  807460:	00001306 	br	8074b0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  807464:	e0bffe17 	ldw	r2,-8(fp)
  807468:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  80746c:	e0fffe17 	ldw	r3,-8(fp)
  807470:	e0bffd17 	ldw	r2,-12(fp)
  807474:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  807478:	e0fffe17 	ldw	r3,-8(fp)
  80747c:	00800fc4 	movi	r2,63
  807480:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  807484:	e0bffe17 	ldw	r2,-8(fp)
  807488:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  80748c:	e0bffe17 	ldw	r2,-8(fp)
  807490:	10800b04 	addi	r2,r2,44
  807494:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  807498:	e0bffd17 	ldw	r2,-12(fp)
  80749c:	10800b04 	addi	r2,r2,44
  8074a0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  8074a4:	e0bfff0b 	ldhu	r2,-4(fp)
  8074a8:	10800044 	addi	r2,r2,1
  8074ac:	e0bfff0d 	sth	r2,-4(fp)
  8074b0:	e0bfff0b 	ldhu	r2,-4(fp)
  8074b4:	108004f0 	cmpltui	r2,r2,19
  8074b8:	103fea1e 	bne	r2,zero,807464 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8074bc:	e0bffe17 	ldw	r2,-8(fp)
  8074c0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  8074c4:	e0bffe17 	ldw	r2,-8(fp)
  8074c8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  8074cc:	e0fffe17 	ldw	r3,-8(fp)
  8074d0:	00800fc4 	movi	r2,63
  8074d4:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  8074d8:	e0bffe17 	ldw	r2,-8(fp)
  8074dc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  8074e0:	00c02074 	movhi	r3,129
  8074e4:	18c9a004 	addi	r3,r3,9856
  8074e8:	00802074 	movhi	r2,129
  8074ec:	1091b004 	addi	r2,r2,18112
  8074f0:	18800015 	stw	r2,0(r3)
#endif
}
  8074f4:	e037883a 	mov	sp,fp
  8074f8:	dfc00117 	ldw	ra,4(sp)
  8074fc:	df000017 	ldw	fp,0(sp)
  807500:	dec00204 	addi	sp,sp,8
  807504:	f800283a 	ret

00807508 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  807508:	defffa04 	addi	sp,sp,-24
  80750c:	dfc00515 	stw	ra,20(sp)
  807510:	df000415 	stw	fp,16(sp)
  807514:	df000404 	addi	fp,sp,16
  807518:	e13ffe15 	stw	r4,-8(fp)
  80751c:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  807520:	e0bffe17 	ldw	r2,-8(fp)
  807524:	10800217 	ldw	r2,8(r2)
  807528:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  80752c:	e0bffd17 	ldw	r2,-12(fp)
  807530:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  807534:	e0fffd17 	ldw	r3,-12(fp)
  807538:	e0bfff0b 	ldhu	r2,-4(fp)
  80753c:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  807540:	e0bffd17 	ldw	r2,-12(fp)
  807544:	10c00c03 	ldbu	r3,48(r2)
  807548:	00bff7c4 	movi	r2,-33
  80754c:	1884703a 	and	r2,r3,r2
  807550:	1007883a 	mov	r3,r2
  807554:	e0bffd17 	ldw	r2,-12(fp)
  807558:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  80755c:	e0bffd17 	ldw	r2,-12(fp)
  807560:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  807564:	e0bffd17 	ldw	r2,-12(fp)
  807568:	10800c03 	ldbu	r2,48(r2)
  80756c:	10803fcc 	andi	r2,r2,255
  807570:	1004c03a 	cmpne	r2,r2,zero
  807574:	10001f1e 	bne	r2,zero,8075f4 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  807578:	e0bffd17 	ldw	r2,-12(fp)
  80757c:	10c00d83 	ldbu	r3,54(r2)
  807580:	00802074 	movhi	r2,129
  807584:	10899b04 	addi	r2,r2,9836
  807588:	10800003 	ldbu	r2,0(r2)
  80758c:	1884b03a 	or	r2,r3,r2
  807590:	1007883a 	mov	r3,r2
  807594:	00802074 	movhi	r2,129
  807598:	10899b04 	addi	r2,r2,9836
  80759c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8075a0:	e0bffd17 	ldw	r2,-12(fp)
  8075a4:	10800d03 	ldbu	r2,52(r2)
  8075a8:	11003fcc 	andi	r4,r2,255
  8075ac:	e0bffd17 	ldw	r2,-12(fp)
  8075b0:	10800d03 	ldbu	r2,52(r2)
  8075b4:	10c03fcc 	andi	r3,r2,255
  8075b8:	00802074 	movhi	r2,129
  8075bc:	10899b44 	addi	r2,r2,9837
  8075c0:	10c5883a 	add	r2,r2,r3
  8075c4:	10c00003 	ldbu	r3,0(r2)
  8075c8:	e0bffd17 	ldw	r2,-12(fp)
  8075cc:	10800d43 	ldbu	r2,53(r2)
  8075d0:	1884b03a 	or	r2,r3,r2
  8075d4:	1007883a 	mov	r3,r2
  8075d8:	00802074 	movhi	r2,129
  8075dc:	10899b44 	addi	r2,r2,9837
  8075e0:	1105883a 	add	r2,r2,r4
  8075e4:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  8075e8:	00800044 	movi	r2,1
  8075ec:	e0bffc05 	stb	r2,-16(fp)
  8075f0:	00000106 	br	8075f8 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  8075f4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  8075f8:	e13ffe17 	ldw	r4,-8(fp)
  8075fc:	08076180 	call	807618 <OS_FlagUnlink>
    return (sched);
  807600:	e0bffc03 	ldbu	r2,-16(fp)
}
  807604:	e037883a 	mov	sp,fp
  807608:	dfc00117 	ldw	ra,4(sp)
  80760c:	df000017 	ldw	fp,0(sp)
  807610:	dec00204 	addi	sp,sp,8
  807614:	f800283a 	ret

00807618 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  807618:	defffa04 	addi	sp,sp,-24
  80761c:	df000515 	stw	fp,20(sp)
  807620:	df000504 	addi	fp,sp,20
  807624:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  807628:	e0bfff17 	ldw	r2,-4(fp)
  80762c:	10800117 	ldw	r2,4(r2)
  807630:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  807634:	e0bfff17 	ldw	r2,-4(fp)
  807638:	10800017 	ldw	r2,0(r2)
  80763c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  807640:	e0bffc17 	ldw	r2,-16(fp)
  807644:	1004c03a 	cmpne	r2,r2,zero
  807648:	10000c1e 	bne	r2,zero,80767c <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  80764c:	e0bfff17 	ldw	r2,-4(fp)
  807650:	10800317 	ldw	r2,12(r2)
  807654:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  807658:	e0fffd17 	ldw	r3,-12(fp)
  80765c:	e0bffb17 	ldw	r2,-20(fp)
  807660:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  807664:	e0bffb17 	ldw	r2,-20(fp)
  807668:	1005003a 	cmpeq	r2,r2,zero
  80766c:	10000c1e 	bne	r2,zero,8076a0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  807670:	e0bffb17 	ldw	r2,-20(fp)
  807674:	10000115 	stw	zero,4(r2)
  807678:	00000906 	br	8076a0 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  80767c:	e0fffc17 	ldw	r3,-16(fp)
  807680:	e0bffb17 	ldw	r2,-20(fp)
  807684:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  807688:	e0bffb17 	ldw	r2,-20(fp)
  80768c:	1005003a 	cmpeq	r2,r2,zero
  807690:	1000031e 	bne	r2,zero,8076a0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  807694:	e0fffb17 	ldw	r3,-20(fp)
  807698:	e0bffc17 	ldw	r2,-16(fp)
  80769c:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  8076a0:	e0bfff17 	ldw	r2,-4(fp)
  8076a4:	10800217 	ldw	r2,8(r2)
  8076a8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  8076ac:	e0bffe17 	ldw	r2,-8(fp)
  8076b0:	10000a15 	stw	zero,40(r2)
#endif
}
  8076b4:	e037883a 	mov	sp,fp
  8076b8:	df000017 	ldw	fp,0(sp)
  8076bc:	dec00104 	addi	sp,sp,4
  8076c0:	f800283a 	ret

008076c4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  8076c4:	defff304 	addi	sp,sp,-52
  8076c8:	df000c15 	stw	fp,48(sp)
  8076cc:	df000c04 	addi	fp,sp,48
  8076d0:	e13ffb15 	stw	r4,-20(fp)
  8076d4:	e17ffc15 	stw	r5,-16(fp)
  8076d8:	e1bffd15 	stw	r6,-12(fp)
  8076dc:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8076e0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8076e4:	e0bffe17 	ldw	r2,-8(fp)
  8076e8:	1004c03a 	cmpne	r2,r2,zero
  8076ec:	1000021e 	bne	r2,zero,8076f8 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  8076f0:	e03fff15 	stw	zero,-4(fp)
  8076f4:	00007506 	br	8078cc <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  8076f8:	e0bffb17 	ldw	r2,-20(fp)
  8076fc:	1004c03a 	cmpne	r2,r2,zero
  807700:	1000051e 	bne	r2,zero,807718 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  807704:	e0fffe17 	ldw	r3,-8(fp)
  807708:	00801884 	movi	r2,98
  80770c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  807710:	e03fff15 	stw	zero,-4(fp)
  807714:	00006d06 	br	8078cc <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  807718:	e0bffb17 	ldw	r2,-20(fp)
  80771c:	108000cc 	andi	r2,r2,3
  807720:	1005003a 	cmpeq	r2,r2,zero
  807724:	1000051e 	bne	r2,zero,80773c <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  807728:	e0fffe17 	ldw	r3,-8(fp)
  80772c:	00801884 	movi	r2,98
  807730:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  807734:	e03fff15 	stw	zero,-4(fp)
  807738:	00006406 	br	8078cc <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  80773c:	e0bffc17 	ldw	r2,-16(fp)
  807740:	108000a8 	cmpgeui	r2,r2,2
  807744:	1000051e 	bne	r2,zero,80775c <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  807748:	e0fffe17 	ldw	r3,-8(fp)
  80774c:	008016c4 	movi	r2,91
  807750:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  807754:	e03fff15 	stw	zero,-4(fp)
  807758:	00005c06 	br	8078cc <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  80775c:	e0bffd17 	ldw	r2,-12(fp)
  807760:	10800128 	cmpgeui	r2,r2,4
  807764:	1000051e 	bne	r2,zero,80777c <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  807768:	e0fffe17 	ldw	r3,-8(fp)
  80776c:	00801704 	movi	r2,92
  807770:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  807774:	e03fff15 	stw	zero,-4(fp)
  807778:	00005406 	br	8078cc <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80777c:	0005303a 	rdctl	r2,status
  807780:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807784:	e0fff517 	ldw	r3,-44(fp)
  807788:	00bfff84 	movi	r2,-2
  80778c:	1884703a 	and	r2,r3,r2
  807790:	1001703a 	wrctl	status,r2
  
  return context;
  807794:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  807798:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  80779c:	00802074 	movhi	r2,129
  8077a0:	10899804 	addi	r2,r2,9824
  8077a4:	10800017 	ldw	r2,0(r2)
  8077a8:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  8077ac:	00802074 	movhi	r2,129
  8077b0:	10899804 	addi	r2,r2,9824
  8077b4:	10800017 	ldw	r2,0(r2)
  8077b8:	1005003a 	cmpeq	r2,r2,zero
  8077bc:	1000081e 	bne	r2,zero,8077e0 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  8077c0:	00802074 	movhi	r2,129
  8077c4:	10899804 	addi	r2,r2,9824
  8077c8:	10800017 	ldw	r2,0(r2)
  8077cc:	10800117 	ldw	r2,4(r2)
  8077d0:	1007883a 	mov	r3,r2
  8077d4:	00802074 	movhi	r2,129
  8077d8:	10899804 	addi	r2,r2,9824
  8077dc:	10c00015 	stw	r3,0(r2)
  8077e0:	e0bff617 	ldw	r2,-40(fp)
  8077e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8077e8:	e0bff417 	ldw	r2,-48(fp)
  8077ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  8077f0:	e0bffa17 	ldw	r2,-24(fp)
  8077f4:	1004c03a 	cmpne	r2,r2,zero
  8077f8:	1000051e 	bne	r2,zero,807810 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  8077fc:	e0fffe17 	ldw	r3,-8(fp)
  807800:	00801684 	movi	r2,90
  807804:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  807808:	e03fff15 	stw	zero,-4(fp)
  80780c:	00002f06 	br	8078cc <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  807810:	e0bffb17 	ldw	r2,-20(fp)
  807814:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  807818:	e0bffb17 	ldw	r2,-20(fp)
  80781c:	1007883a 	mov	r3,r2
  807820:	e0bffd17 	ldw	r2,-12(fp)
  807824:	1885883a 	add	r2,r3,r2
  807828:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  80782c:	e03ff715 	stw	zero,-36(fp)
  807830:	00000d06 	br	807868 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  807834:	e0fff817 	ldw	r3,-32(fp)
  807838:	e0bff917 	ldw	r2,-28(fp)
  80783c:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  807840:	e0bff917 	ldw	r2,-28(fp)
  807844:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  807848:	e0bff917 	ldw	r2,-28(fp)
  80784c:	1007883a 	mov	r3,r2
  807850:	e0bffd17 	ldw	r2,-12(fp)
  807854:	1885883a 	add	r2,r3,r2
  807858:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  80785c:	e0bff717 	ldw	r2,-36(fp)
  807860:	10800044 	addi	r2,r2,1
  807864:	e0bff715 	stw	r2,-36(fp)
  807868:	e0bffc17 	ldw	r2,-16(fp)
  80786c:	10ffffc4 	addi	r3,r2,-1
  807870:	e0bff717 	ldw	r2,-36(fp)
  807874:	10ffef36 	bltu	r2,r3,807834 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  807878:	e0bff817 	ldw	r2,-32(fp)
  80787c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  807880:	e0fffa17 	ldw	r3,-24(fp)
  807884:	e0bffb17 	ldw	r2,-20(fp)
  807888:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  80788c:	e0fffa17 	ldw	r3,-24(fp)
  807890:	e0bffb17 	ldw	r2,-20(fp)
  807894:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  807898:	e0fffa17 	ldw	r3,-24(fp)
  80789c:	e0bffc17 	ldw	r2,-16(fp)
  8078a0:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  8078a4:	e0fffa17 	ldw	r3,-24(fp)
  8078a8:	e0bffc17 	ldw	r2,-16(fp)
  8078ac:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  8078b0:	e0fffa17 	ldw	r3,-24(fp)
  8078b4:	e0bffd17 	ldw	r2,-12(fp)
  8078b8:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  8078bc:	e0bffe17 	ldw	r2,-8(fp)
  8078c0:	10000005 	stb	zero,0(r2)
    return (pmem);
  8078c4:	e0bffa17 	ldw	r2,-24(fp)
  8078c8:	e0bfff15 	stw	r2,-4(fp)
  8078cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8078d0:	e037883a 	mov	sp,fp
  8078d4:	df000017 	ldw	fp,0(sp)
  8078d8:	dec00104 	addi	sp,sp,4
  8078dc:	f800283a 	ret

008078e0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  8078e0:	defff704 	addi	sp,sp,-36
  8078e4:	df000815 	stw	fp,32(sp)
  8078e8:	df000804 	addi	fp,sp,32
  8078ec:	e13ffd15 	stw	r4,-12(fp)
  8078f0:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8078f4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8078f8:	e0bffe17 	ldw	r2,-8(fp)
  8078fc:	1004c03a 	cmpne	r2,r2,zero
  807900:	1000021e 	bne	r2,zero,80790c <OSMemGet+0x2c>
        return ((void *)0);
  807904:	e03fff15 	stw	zero,-4(fp)
  807908:	00003106 	br	8079d0 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  80790c:	e0bffd17 	ldw	r2,-12(fp)
  807910:	1004c03a 	cmpne	r2,r2,zero
  807914:	1000051e 	bne	r2,zero,80792c <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  807918:	e0fffe17 	ldw	r3,-8(fp)
  80791c:	00801804 	movi	r2,96
  807920:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  807924:	e03fff15 	stw	zero,-4(fp)
  807928:	00002906 	br	8079d0 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80792c:	0005303a 	rdctl	r2,status
  807930:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807934:	e0fffa17 	ldw	r3,-24(fp)
  807938:	00bfff84 	movi	r2,-2
  80793c:	1884703a 	and	r2,r3,r2
  807940:	1001703a 	wrctl	status,r2
  
  return context;
  807944:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  807948:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  80794c:	e0bffd17 	ldw	r2,-12(fp)
  807950:	10800417 	ldw	r2,16(r2)
  807954:	1005003a 	cmpeq	r2,r2,zero
  807958:	1000151e 	bne	r2,zero,8079b0 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  80795c:	e0bffd17 	ldw	r2,-12(fp)
  807960:	10800117 	ldw	r2,4(r2)
  807964:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  807968:	e0bffc17 	ldw	r2,-16(fp)
  80796c:	10c00017 	ldw	r3,0(r2)
  807970:	e0bffd17 	ldw	r2,-12(fp)
  807974:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  807978:	e0bffd17 	ldw	r2,-12(fp)
  80797c:	10800417 	ldw	r2,16(r2)
  807980:	10ffffc4 	addi	r3,r2,-1
  807984:	e0bffd17 	ldw	r2,-12(fp)
  807988:	10c00415 	stw	r3,16(r2)
  80798c:	e0bffb17 	ldw	r2,-20(fp)
  807990:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807994:	e0bff917 	ldw	r2,-28(fp)
  807998:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  80799c:	e0bffe17 	ldw	r2,-8(fp)
  8079a0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  8079a4:	e0bffc17 	ldw	r2,-16(fp)
  8079a8:	e0bfff15 	stw	r2,-4(fp)
  8079ac:	00000806 	br	8079d0 <OSMemGet+0xf0>
  8079b0:	e0bffb17 	ldw	r2,-20(fp)
  8079b4:	e0bff815 	stw	r2,-32(fp)
  8079b8:	e0bff817 	ldw	r2,-32(fp)
  8079bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  8079c0:	e0fffe17 	ldw	r3,-8(fp)
  8079c4:	00801744 	movi	r2,93
  8079c8:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  8079cc:	e03fff15 	stw	zero,-4(fp)
  8079d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8079d4:	e037883a 	mov	sp,fp
  8079d8:	df000017 	ldw	fp,0(sp)
  8079dc:	dec00104 	addi	sp,sp,4
  8079e0:	f800283a 	ret

008079e4 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  8079e4:	defff604 	addi	sp,sp,-40
  8079e8:	dfc00915 	stw	ra,36(sp)
  8079ec:	df000815 	stw	fp,32(sp)
  8079f0:	df000804 	addi	fp,sp,32
  8079f4:	e13ffc15 	stw	r4,-16(fp)
  8079f8:	e17ffd15 	stw	r5,-12(fp)
  8079fc:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807a00:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  807a04:	e0bffe17 	ldw	r2,-8(fp)
  807a08:	1004c03a 	cmpne	r2,r2,zero
  807a0c:	1000021e 	bne	r2,zero,807a18 <OSMemNameGet+0x34>
        return (0);
  807a10:	e03fff15 	stw	zero,-4(fp)
  807a14:	00003006 	br	807ad8 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  807a18:	e0bffc17 	ldw	r2,-16(fp)
  807a1c:	1004c03a 	cmpne	r2,r2,zero
  807a20:	1000051e 	bne	r2,zero,807a38 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  807a24:	e0fffe17 	ldw	r3,-8(fp)
  807a28:	00801804 	movi	r2,96
  807a2c:	18800005 	stb	r2,0(r3)
        return (0);
  807a30:	e03fff15 	stw	zero,-4(fp)
  807a34:	00002806 	br	807ad8 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  807a38:	e0bffd17 	ldw	r2,-12(fp)
  807a3c:	1004c03a 	cmpne	r2,r2,zero
  807a40:	1000051e 	bne	r2,zero,807a58 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  807a44:	e0fffe17 	ldw	r3,-8(fp)
  807a48:	00800304 	movi	r2,12
  807a4c:	18800005 	stb	r2,0(r3)
        return (0);
  807a50:	e03fff15 	stw	zero,-4(fp)
  807a54:	00002006 	br	807ad8 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  807a58:	00802074 	movhi	r2,129
  807a5c:	10899d04 	addi	r2,r2,9844
  807a60:	10800003 	ldbu	r2,0(r2)
  807a64:	10803fcc 	andi	r2,r2,255
  807a68:	1005003a 	cmpeq	r2,r2,zero
  807a6c:	1000051e 	bne	r2,zero,807a84 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  807a70:	e0fffe17 	ldw	r3,-8(fp)
  807a74:	00800444 	movi	r2,17
  807a78:	18800005 	stb	r2,0(r3)
        return (0);
  807a7c:	e03fff15 	stw	zero,-4(fp)
  807a80:	00001506 	br	807ad8 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807a84:	0005303a 	rdctl	r2,status
  807a88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807a8c:	e0fff917 	ldw	r3,-28(fp)
  807a90:	00bfff84 	movi	r2,-2
  807a94:	1884703a 	and	r2,r3,r2
  807a98:	1001703a 	wrctl	status,r2
  
  return context;
  807a9c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  807aa0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  807aa4:	e0bffc17 	ldw	r2,-16(fp)
  807aa8:	11400504 	addi	r5,r2,20
  807aac:	e13ffd17 	ldw	r4,-12(fp)
  807ab0:	08056580 	call	805658 <OS_StrCopy>
  807ab4:	e0bffb05 	stb	r2,-20(fp)
  807ab8:	e0bffa17 	ldw	r2,-24(fp)
  807abc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807ac0:	e0bff817 	ldw	r2,-32(fp)
  807ac4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  807ac8:	e0bffe17 	ldw	r2,-8(fp)
  807acc:	10000005 	stb	zero,0(r2)
    return (len);
  807ad0:	e0bffb03 	ldbu	r2,-20(fp)
  807ad4:	e0bfff15 	stw	r2,-4(fp)
  807ad8:	e0bfff17 	ldw	r2,-4(fp)
}
  807adc:	e037883a 	mov	sp,fp
  807ae0:	dfc00117 	ldw	ra,4(sp)
  807ae4:	df000017 	ldw	fp,0(sp)
  807ae8:	dec00204 	addi	sp,sp,8
  807aec:	f800283a 	ret

00807af0 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  807af0:	defff604 	addi	sp,sp,-40
  807af4:	dfc00915 	stw	ra,36(sp)
  807af8:	df000815 	stw	fp,32(sp)
  807afc:	df000804 	addi	fp,sp,32
  807b00:	e13ffd15 	stw	r4,-12(fp)
  807b04:	e17ffe15 	stw	r5,-8(fp)
  807b08:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807b0c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  807b10:	e0bfff17 	ldw	r2,-4(fp)
  807b14:	1005003a 	cmpeq	r2,r2,zero
  807b18:	1000381e 	bne	r2,zero,807bfc <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  807b1c:	e0bffd17 	ldw	r2,-12(fp)
  807b20:	1004c03a 	cmpne	r2,r2,zero
  807b24:	1000041e 	bne	r2,zero,807b38 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  807b28:	e0ffff17 	ldw	r3,-4(fp)
  807b2c:	00801804 	movi	r2,96
  807b30:	18800005 	stb	r2,0(r3)
        return;
  807b34:	00003106 	br	807bfc <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  807b38:	e0bffe17 	ldw	r2,-8(fp)
  807b3c:	1004c03a 	cmpne	r2,r2,zero
  807b40:	1000041e 	bne	r2,zero,807b54 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  807b44:	e0ffff17 	ldw	r3,-4(fp)
  807b48:	00800304 	movi	r2,12
  807b4c:	18800005 	stb	r2,0(r3)
        return;
  807b50:	00002a06 	br	807bfc <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  807b54:	00802074 	movhi	r2,129
  807b58:	10899d04 	addi	r2,r2,9844
  807b5c:	10800003 	ldbu	r2,0(r2)
  807b60:	10803fcc 	andi	r2,r2,255
  807b64:	1005003a 	cmpeq	r2,r2,zero
  807b68:	1000041e 	bne	r2,zero,807b7c <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  807b6c:	e0ffff17 	ldw	r3,-4(fp)
  807b70:	00800484 	movi	r2,18
  807b74:	18800005 	stb	r2,0(r3)
        return;
  807b78:	00002006 	br	807bfc <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807b7c:	0005303a 	rdctl	r2,status
  807b80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807b84:	e0fffa17 	ldw	r3,-24(fp)
  807b88:	00bfff84 	movi	r2,-2
  807b8c:	1884703a 	and	r2,r3,r2
  807b90:	1001703a 	wrctl	status,r2
  
  return context;
  807b94:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  807b98:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  807b9c:	e13ffe17 	ldw	r4,-8(fp)
  807ba0:	08056d80 	call	8056d8 <OS_StrLen>
  807ba4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  807ba8:	e0bffc03 	ldbu	r2,-16(fp)
  807bac:	10800830 	cmpltui	r2,r2,32
  807bb0:	1000081e 	bne	r2,zero,807bd4 <OSMemNameSet+0xe4>
  807bb4:	e0bffb17 	ldw	r2,-20(fp)
  807bb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807bbc:	e0bff917 	ldw	r2,-28(fp)
  807bc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  807bc4:	e0ffff17 	ldw	r3,-4(fp)
  807bc8:	008018c4 	movi	r2,99
  807bcc:	18800005 	stb	r2,0(r3)
        return;
  807bd0:	00000a06 	br	807bfc <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  807bd4:	e0bffd17 	ldw	r2,-12(fp)
  807bd8:	11000504 	addi	r4,r2,20
  807bdc:	e17ffe17 	ldw	r5,-8(fp)
  807be0:	08056580 	call	805658 <OS_StrCopy>
  807be4:	e0bffb17 	ldw	r2,-20(fp)
  807be8:	e0bff815 	stw	r2,-32(fp)
  807bec:	e0bff817 	ldw	r2,-32(fp)
  807bf0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  807bf4:	e0bfff17 	ldw	r2,-4(fp)
  807bf8:	10000005 	stb	zero,0(r2)
}
  807bfc:	e037883a 	mov	sp,fp
  807c00:	dfc00117 	ldw	ra,4(sp)
  807c04:	df000017 	ldw	fp,0(sp)
  807c08:	dec00204 	addi	sp,sp,8
  807c0c:	f800283a 	ret

00807c10 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  807c10:	defff804 	addi	sp,sp,-32
  807c14:	df000715 	stw	fp,28(sp)
  807c18:	df000704 	addi	fp,sp,28
  807c1c:	e13ffd15 	stw	r4,-12(fp)
  807c20:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807c24:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  807c28:	e0bffd17 	ldw	r2,-12(fp)
  807c2c:	1004c03a 	cmpne	r2,r2,zero
  807c30:	1000031e 	bne	r2,zero,807c40 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  807c34:	00801804 	movi	r2,96
  807c38:	e0bfff15 	stw	r2,-4(fp)
  807c3c:	00002b06 	br	807cec <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  807c40:	e0bffe17 	ldw	r2,-8(fp)
  807c44:	1004c03a 	cmpne	r2,r2,zero
  807c48:	1000031e 	bne	r2,zero,807c58 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  807c4c:	008017c4 	movi	r2,95
  807c50:	e0bfff15 	stw	r2,-4(fp)
  807c54:	00002506 	br	807cec <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807c58:	0005303a 	rdctl	r2,status
  807c5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807c60:	e0fffb17 	ldw	r3,-20(fp)
  807c64:	00bfff84 	movi	r2,-2
  807c68:	1884703a 	and	r2,r3,r2
  807c6c:	1001703a 	wrctl	status,r2
  
  return context;
  807c70:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  807c74:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  807c78:	e0bffd17 	ldw	r2,-12(fp)
  807c7c:	10c00417 	ldw	r3,16(r2)
  807c80:	e0bffd17 	ldw	r2,-12(fp)
  807c84:	10800317 	ldw	r2,12(r2)
  807c88:	18800736 	bltu	r3,r2,807ca8 <OSMemPut+0x98>
  807c8c:	e0bffc17 	ldw	r2,-16(fp)
  807c90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807c94:	e0bffa17 	ldw	r2,-24(fp)
  807c98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  807c9c:	00801784 	movi	r2,94
  807ca0:	e0bfff15 	stw	r2,-4(fp)
  807ca4:	00001106 	br	807cec <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  807ca8:	e0fffe17 	ldw	r3,-8(fp)
  807cac:	e0bffd17 	ldw	r2,-12(fp)
  807cb0:	10800117 	ldw	r2,4(r2)
  807cb4:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  807cb8:	e0fffd17 	ldw	r3,-12(fp)
  807cbc:	e0bffe17 	ldw	r2,-8(fp)
  807cc0:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  807cc4:	e0bffd17 	ldw	r2,-12(fp)
  807cc8:	10800417 	ldw	r2,16(r2)
  807ccc:	10c00044 	addi	r3,r2,1
  807cd0:	e0bffd17 	ldw	r2,-12(fp)
  807cd4:	10c00415 	stw	r3,16(r2)
  807cd8:	e0bffc17 	ldw	r2,-16(fp)
  807cdc:	e0bff915 	stw	r2,-28(fp)
  807ce0:	e0bff917 	ldw	r2,-28(fp)
  807ce4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  807ce8:	e03fff15 	stw	zero,-4(fp)
  807cec:	e0bfff17 	ldw	r2,-4(fp)
}
  807cf0:	e037883a 	mov	sp,fp
  807cf4:	df000017 	ldw	fp,0(sp)
  807cf8:	dec00104 	addi	sp,sp,4
  807cfc:	f800283a 	ret

00807d00 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  807d00:	defff904 	addi	sp,sp,-28
  807d04:	df000615 	stw	fp,24(sp)
  807d08:	df000604 	addi	fp,sp,24
  807d0c:	e13ffd15 	stw	r4,-12(fp)
  807d10:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807d14:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  807d18:	e0bffd17 	ldw	r2,-12(fp)
  807d1c:	1004c03a 	cmpne	r2,r2,zero
  807d20:	1000031e 	bne	r2,zero,807d30 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  807d24:	00801804 	movi	r2,96
  807d28:	e0bfff15 	stw	r2,-4(fp)
  807d2c:	00002e06 	br	807de8 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  807d30:	e0bffe17 	ldw	r2,-8(fp)
  807d34:	1004c03a 	cmpne	r2,r2,zero
  807d38:	1000031e 	bne	r2,zero,807d48 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  807d3c:	00801844 	movi	r2,97
  807d40:	e0bfff15 	stw	r2,-4(fp)
  807d44:	00002806 	br	807de8 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807d48:	0005303a 	rdctl	r2,status
  807d4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807d50:	e0fffb17 	ldw	r3,-20(fp)
  807d54:	00bfff84 	movi	r2,-2
  807d58:	1884703a 	and	r2,r3,r2
  807d5c:	1001703a 	wrctl	status,r2
  
  return context;
  807d60:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  807d64:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  807d68:	e0bffd17 	ldw	r2,-12(fp)
  807d6c:	10c00017 	ldw	r3,0(r2)
  807d70:	e0bffe17 	ldw	r2,-8(fp)
  807d74:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  807d78:	e0bffd17 	ldw	r2,-12(fp)
  807d7c:	10c00117 	ldw	r3,4(r2)
  807d80:	e0bffe17 	ldw	r2,-8(fp)
  807d84:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  807d88:	e0bffd17 	ldw	r2,-12(fp)
  807d8c:	10c00217 	ldw	r3,8(r2)
  807d90:	e0bffe17 	ldw	r2,-8(fp)
  807d94:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  807d98:	e0bffd17 	ldw	r2,-12(fp)
  807d9c:	10c00317 	ldw	r3,12(r2)
  807da0:	e0bffe17 	ldw	r2,-8(fp)
  807da4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  807da8:	e0bffd17 	ldw	r2,-12(fp)
  807dac:	10c00417 	ldw	r3,16(r2)
  807db0:	e0bffe17 	ldw	r2,-8(fp)
  807db4:	10c00415 	stw	r3,16(r2)
  807db8:	e0bffc17 	ldw	r2,-16(fp)
  807dbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807dc0:	e0bffa17 	ldw	r2,-24(fp)
  807dc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  807dc8:	e0bffe17 	ldw	r2,-8(fp)
  807dcc:	10c00317 	ldw	r3,12(r2)
  807dd0:	e0bffe17 	ldw	r2,-8(fp)
  807dd4:	10800417 	ldw	r2,16(r2)
  807dd8:	1887c83a 	sub	r3,r3,r2
  807ddc:	e0bffe17 	ldw	r2,-8(fp)
  807de0:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  807de4:	e03fff15 	stw	zero,-4(fp)
  807de8:	e0bfff17 	ldw	r2,-4(fp)
}
  807dec:	e037883a 	mov	sp,fp
  807df0:	df000017 	ldw	fp,0(sp)
  807df4:	dec00104 	addi	sp,sp,4
  807df8:	f800283a 	ret

00807dfc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  807dfc:	defffc04 	addi	sp,sp,-16
  807e00:	dfc00315 	stw	ra,12(sp)
  807e04:	df000215 	stw	fp,8(sp)
  807e08:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  807e0c:	01002074 	movhi	r4,129
  807e10:	21128c04 	addi	r4,r4,18992
  807e14:	01430c04 	movi	r5,3120
  807e18:	08054540 	call	805454 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  807e1c:	00802074 	movhi	r2,129
  807e20:	10928c04 	addi	r2,r2,18992
  807e24:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  807e28:	e03ffe0d 	sth	zero,-8(fp)
  807e2c:	00001406 	br	807e80 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  807e30:	e13ffe0b 	ldhu	r4,-8(fp)
  807e34:	01400d04 	movi	r5,52
  807e38:	0802c900 	call	802c90 <__mulsi3>
  807e3c:	1007883a 	mov	r3,r2
  807e40:	00802074 	movhi	r2,129
  807e44:	10929904 	addi	r2,r2,19044
  807e48:	1887883a 	add	r3,r3,r2
  807e4c:	e0bfff17 	ldw	r2,-4(fp)
  807e50:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  807e54:	e0ffff17 	ldw	r3,-4(fp)
  807e58:	00800fc4 	movi	r2,63
  807e5c:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  807e60:	e0bfff17 	ldw	r2,-4(fp)
  807e64:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  807e68:	e0bfff17 	ldw	r2,-4(fp)
  807e6c:	10800d04 	addi	r2,r2,52
  807e70:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  807e74:	e0bffe0b 	ldhu	r2,-8(fp)
  807e78:	10800044 	addi	r2,r2,1
  807e7c:	e0bffe0d 	sth	r2,-8(fp)
  807e80:	e0bffe0b 	ldhu	r2,-8(fp)
  807e84:	10800ef0 	cmpltui	r2,r2,59
  807e88:	103fe91e 	bne	r2,zero,807e30 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  807e8c:	e0bfff17 	ldw	r2,-4(fp)
  807e90:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  807e94:	e0ffff17 	ldw	r3,-4(fp)
  807e98:	00800fc4 	movi	r2,63
  807e9c:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  807ea0:	e0bfff17 	ldw	r2,-4(fp)
  807ea4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  807ea8:	00c02074 	movhi	r3,129
  807eac:	18c99804 	addi	r3,r3,9824
  807eb0:	00802074 	movhi	r2,129
  807eb4:	10928c04 	addi	r2,r2,18992
  807eb8:	18800015 	stw	r2,0(r3)
#endif
}
  807ebc:	e037883a 	mov	sp,fp
  807ec0:	dfc00117 	ldw	ra,4(sp)
  807ec4:	df000017 	ldw	fp,0(sp)
  807ec8:	dec00204 	addi	sp,sp,8
  807ecc:	f800283a 	ret

00807ed0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  807ed0:	defff704 	addi	sp,sp,-36
  807ed4:	df000815 	stw	fp,32(sp)
  807ed8:	df000804 	addi	fp,sp,32
  807edc:	e13ffd15 	stw	r4,-12(fp)
  807ee0:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807ee4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  807ee8:	e0bffe17 	ldw	r2,-8(fp)
  807eec:	1004c03a 	cmpne	r2,r2,zero
  807ef0:	1000021e 	bne	r2,zero,807efc <OSQAccept+0x2c>
        return ((void *)0);
  807ef4:	e03fff15 	stw	zero,-4(fp)
  807ef8:	00004506 	br	808010 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  807efc:	e0bffd17 	ldw	r2,-12(fp)
  807f00:	1004c03a 	cmpne	r2,r2,zero
  807f04:	1000051e 	bne	r2,zero,807f1c <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  807f08:	e0fffe17 	ldw	r3,-8(fp)
  807f0c:	00800104 	movi	r2,4
  807f10:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  807f14:	e03fff15 	stw	zero,-4(fp)
  807f18:	00003d06 	br	808010 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  807f1c:	e0bffd17 	ldw	r2,-12(fp)
  807f20:	10800003 	ldbu	r2,0(r2)
  807f24:	10803fcc 	andi	r2,r2,255
  807f28:	108000a0 	cmpeqi	r2,r2,2
  807f2c:	1000051e 	bne	r2,zero,807f44 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  807f30:	e0fffe17 	ldw	r3,-8(fp)
  807f34:	00800044 	movi	r2,1
  807f38:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  807f3c:	e03fff15 	stw	zero,-4(fp)
  807f40:	00003306 	br	808010 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807f44:	0005303a 	rdctl	r2,status
  807f48:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807f4c:	e0fff917 	ldw	r3,-28(fp)
  807f50:	00bfff84 	movi	r2,-2
  807f54:	1884703a 	and	r2,r3,r2
  807f58:	1001703a 	wrctl	status,r2
  
  return context;
  807f5c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  807f60:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  807f64:	e0bffd17 	ldw	r2,-12(fp)
  807f68:	10800117 	ldw	r2,4(r2)
  807f6c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  807f70:	e0bffb17 	ldw	r2,-20(fp)
  807f74:	1080058b 	ldhu	r2,22(r2)
  807f78:	10bfffcc 	andi	r2,r2,65535
  807f7c:	1005003a 	cmpeq	r2,r2,zero
  807f80:	1000191e 	bne	r2,zero,807fe8 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  807f84:	e0bffb17 	ldw	r2,-20(fp)
  807f88:	10c00417 	ldw	r3,16(r2)
  807f8c:	18800017 	ldw	r2,0(r3)
  807f90:	e0bffc15 	stw	r2,-16(fp)
  807f94:	18c00104 	addi	r3,r3,4
  807f98:	e0bffb17 	ldw	r2,-20(fp)
  807f9c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  807fa0:	e0bffb17 	ldw	r2,-20(fp)
  807fa4:	1080058b 	ldhu	r2,22(r2)
  807fa8:	10bfffc4 	addi	r2,r2,-1
  807fac:	1007883a 	mov	r3,r2
  807fb0:	e0bffb17 	ldw	r2,-20(fp)
  807fb4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  807fb8:	e0bffb17 	ldw	r2,-20(fp)
  807fbc:	10c00417 	ldw	r3,16(r2)
  807fc0:	e0bffb17 	ldw	r2,-20(fp)
  807fc4:	10800217 	ldw	r2,8(r2)
  807fc8:	1880041e 	bne	r3,r2,807fdc <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  807fcc:	e0bffb17 	ldw	r2,-20(fp)
  807fd0:	10c00117 	ldw	r3,4(r2)
  807fd4:	e0bffb17 	ldw	r2,-20(fp)
  807fd8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  807fdc:	e0bffe17 	ldw	r2,-8(fp)
  807fe0:	10000005 	stb	zero,0(r2)
  807fe4:	00000406 	br	807ff8 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  807fe8:	e0fffe17 	ldw	r3,-8(fp)
  807fec:	008007c4 	movi	r2,31
  807ff0:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  807ff4:	e03ffc15 	stw	zero,-16(fp)
  807ff8:	e0bffa17 	ldw	r2,-24(fp)
  807ffc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808000:	e0bff817 	ldw	r2,-32(fp)
  808004:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  808008:	e0bffc17 	ldw	r2,-16(fp)
  80800c:	e0bfff15 	stw	r2,-4(fp)
  808010:	e0bfff17 	ldw	r2,-4(fp)
}
  808014:	e037883a 	mov	sp,fp
  808018:	df000017 	ldw	fp,0(sp)
  80801c:	dec00104 	addi	sp,sp,4
  808020:	f800283a 	ret

00808024 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  808024:	defff304 	addi	sp,sp,-52
  808028:	dfc00c15 	stw	ra,48(sp)
  80802c:	df000b15 	stw	fp,44(sp)
  808030:	df000b04 	addi	fp,sp,44
  808034:	e13ffd15 	stw	r4,-12(fp)
  808038:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80803c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  808040:	00802074 	movhi	r2,129
  808044:	10899d04 	addi	r2,r2,9844
  808048:	10800003 	ldbu	r2,0(r2)
  80804c:	10803fcc 	andi	r2,r2,255
  808050:	1005003a 	cmpeq	r2,r2,zero
  808054:	1000021e 	bne	r2,zero,808060 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  808058:	e03fff15 	stw	zero,-4(fp)
  80805c:	00007006 	br	808220 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808060:	0005303a 	rdctl	r2,status
  808064:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808068:	e0fff917 	ldw	r3,-28(fp)
  80806c:	00bfff84 	movi	r2,-2
  808070:	1884703a 	and	r2,r3,r2
  808074:	1001703a 	wrctl	status,r2
  
  return context;
  808078:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80807c:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  808080:	00802074 	movhi	r2,129
  808084:	10899c04 	addi	r2,r2,9840
  808088:	10800017 	ldw	r2,0(r2)
  80808c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  808090:	00802074 	movhi	r2,129
  808094:	10899c04 	addi	r2,r2,9840
  808098:	10800017 	ldw	r2,0(r2)
  80809c:	1005003a 	cmpeq	r2,r2,zero
  8080a0:	1000081e 	bne	r2,zero,8080c4 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  8080a4:	00802074 	movhi	r2,129
  8080a8:	10899c04 	addi	r2,r2,9840
  8080ac:	10800017 	ldw	r2,0(r2)
  8080b0:	10800117 	ldw	r2,4(r2)
  8080b4:	1007883a 	mov	r3,r2
  8080b8:	00802074 	movhi	r2,129
  8080bc:	10899c04 	addi	r2,r2,9840
  8080c0:	10c00015 	stw	r3,0(r2)
  8080c4:	e0bffa17 	ldw	r2,-24(fp)
  8080c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8080cc:	e0bff817 	ldw	r2,-32(fp)
  8080d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  8080d4:	e0bffc17 	ldw	r2,-16(fp)
  8080d8:	1005003a 	cmpeq	r2,r2,zero
  8080dc:	10004e1e 	bne	r2,zero,808218 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8080e0:	0005303a 	rdctl	r2,status
  8080e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8080e8:	e0fff717 	ldw	r3,-36(fp)
  8080ec:	00bfff84 	movi	r2,-2
  8080f0:	1884703a 	and	r2,r3,r2
  8080f4:	1001703a 	wrctl	status,r2
  
  return context;
  8080f8:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  8080fc:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  808100:	00802074 	movhi	r2,129
  808104:	10899a04 	addi	r2,r2,9832
  808108:	10800017 	ldw	r2,0(r2)
  80810c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  808110:	e0bffb17 	ldw	r2,-20(fp)
  808114:	1005003a 	cmpeq	r2,r2,zero
  808118:	1000311e 	bne	r2,zero,8081e0 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  80811c:	00802074 	movhi	r2,129
  808120:	10899a04 	addi	r2,r2,9832
  808124:	10800017 	ldw	r2,0(r2)
  808128:	10c00017 	ldw	r3,0(r2)
  80812c:	00802074 	movhi	r2,129
  808130:	10899a04 	addi	r2,r2,9832
  808134:	10c00015 	stw	r3,0(r2)
  808138:	e0bffa17 	ldw	r2,-24(fp)
  80813c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808140:	e0bff617 	ldw	r2,-40(fp)
  808144:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  808148:	e0fffb17 	ldw	r3,-20(fp)
  80814c:	e0bffd17 	ldw	r2,-12(fp)
  808150:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  808154:	e0bffe0b 	ldhu	r2,-8(fp)
  808158:	1085883a 	add	r2,r2,r2
  80815c:	1085883a 	add	r2,r2,r2
  808160:	1007883a 	mov	r3,r2
  808164:	e0bffd17 	ldw	r2,-12(fp)
  808168:	1887883a 	add	r3,r3,r2
  80816c:	e0bffb17 	ldw	r2,-20(fp)
  808170:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  808174:	e0fffb17 	ldw	r3,-20(fp)
  808178:	e0bffd17 	ldw	r2,-12(fp)
  80817c:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  808180:	e0fffb17 	ldw	r3,-20(fp)
  808184:	e0bffd17 	ldw	r2,-12(fp)
  808188:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  80818c:	e0fffb17 	ldw	r3,-20(fp)
  808190:	e0bffe0b 	ldhu	r2,-8(fp)
  808194:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  808198:	e0bffb17 	ldw	r2,-20(fp)
  80819c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  8081a0:	e0fffc17 	ldw	r3,-16(fp)
  8081a4:	00800084 	movi	r2,2
  8081a8:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  8081ac:	e0bffc17 	ldw	r2,-16(fp)
  8081b0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  8081b4:	e0fffc17 	ldw	r3,-16(fp)
  8081b8:	e0bffb17 	ldw	r2,-20(fp)
  8081bc:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  8081c0:	e0fffc17 	ldw	r3,-16(fp)
  8081c4:	00800fc4 	movi	r2,63
  8081c8:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  8081cc:	e0bffc17 	ldw	r2,-16(fp)
  8081d0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  8081d4:	e13ffc17 	ldw	r4,-16(fp)
  8081d8:	08050880 	call	805088 <OS_EventWaitListInit>
  8081dc:	00000e06 	br	808218 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  8081e0:	00802074 	movhi	r2,129
  8081e4:	10899c04 	addi	r2,r2,9840
  8081e8:	10c00017 	ldw	r3,0(r2)
  8081ec:	e0bffc17 	ldw	r2,-16(fp)
  8081f0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  8081f4:	00c02074 	movhi	r3,129
  8081f8:	18c99c04 	addi	r3,r3,9840
  8081fc:	e0bffc17 	ldw	r2,-16(fp)
  808200:	18800015 	stw	r2,0(r3)
  808204:	e0bffa17 	ldw	r2,-24(fp)
  808208:	e0bff515 	stw	r2,-44(fp)
  80820c:	e0bff517 	ldw	r2,-44(fp)
  808210:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  808214:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  808218:	e0bffc17 	ldw	r2,-16(fp)
  80821c:	e0bfff15 	stw	r2,-4(fp)
  808220:	e0bfff17 	ldw	r2,-4(fp)
}
  808224:	e037883a 	mov	sp,fp
  808228:	dfc00117 	ldw	ra,4(sp)
  80822c:	df000017 	ldw	fp,0(sp)
  808230:	dec00204 	addi	sp,sp,8
  808234:	f800283a 	ret

00808238 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  808238:	defff004 	addi	sp,sp,-64
  80823c:	dfc00f15 	stw	ra,60(sp)
  808240:	df000e15 	stw	fp,56(sp)
  808244:	df000e04 	addi	fp,sp,56
  808248:	e13ffb15 	stw	r4,-20(fp)
  80824c:	e1bffd15 	stw	r6,-12(fp)
  808250:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  808254:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  808258:	e0bffd17 	ldw	r2,-12(fp)
  80825c:	1004c03a 	cmpne	r2,r2,zero
  808260:	1000031e 	bne	r2,zero,808270 <OSQDel+0x38>
        return (pevent);
  808264:	e0bffb17 	ldw	r2,-20(fp)
  808268:	e0bfff15 	stw	r2,-4(fp)
  80826c:	0000ac06 	br	808520 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  808270:	e0bffb17 	ldw	r2,-20(fp)
  808274:	1004c03a 	cmpne	r2,r2,zero
  808278:	1000061e 	bne	r2,zero,808294 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  80827c:	e0fffd17 	ldw	r3,-12(fp)
  808280:	00800104 	movi	r2,4
  808284:	18800005 	stb	r2,0(r3)
        return (pevent);
  808288:	e0fffb17 	ldw	r3,-20(fp)
  80828c:	e0ffff15 	stw	r3,-4(fp)
  808290:	0000a306 	br	808520 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  808294:	e0bffb17 	ldw	r2,-20(fp)
  808298:	10800003 	ldbu	r2,0(r2)
  80829c:	10803fcc 	andi	r2,r2,255
  8082a0:	108000a0 	cmpeqi	r2,r2,2
  8082a4:	1000061e 	bne	r2,zero,8082c0 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  8082a8:	e0fffd17 	ldw	r3,-12(fp)
  8082ac:	00800044 	movi	r2,1
  8082b0:	18800005 	stb	r2,0(r3)
        return (pevent);
  8082b4:	e0bffb17 	ldw	r2,-20(fp)
  8082b8:	e0bfff15 	stw	r2,-4(fp)
  8082bc:	00009806 	br	808520 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8082c0:	00802074 	movhi	r2,129
  8082c4:	10899d04 	addi	r2,r2,9844
  8082c8:	10800003 	ldbu	r2,0(r2)
  8082cc:	10803fcc 	andi	r2,r2,255
  8082d0:	1005003a 	cmpeq	r2,r2,zero
  8082d4:	1000061e 	bne	r2,zero,8082f0 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  8082d8:	e0fffd17 	ldw	r3,-12(fp)
  8082dc:	008003c4 	movi	r2,15
  8082e0:	18800005 	stb	r2,0(r3)
        return (pevent);
  8082e4:	e0fffb17 	ldw	r3,-20(fp)
  8082e8:	e0ffff15 	stw	r3,-4(fp)
  8082ec:	00008c06 	br	808520 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8082f0:	0005303a 	rdctl	r2,status
  8082f4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8082f8:	e0fff617 	ldw	r3,-40(fp)
  8082fc:	00bfff84 	movi	r2,-2
  808300:	1884703a 	and	r2,r3,r2
  808304:	1001703a 	wrctl	status,r2
  
  return context;
  808308:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80830c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  808310:	e0bffb17 	ldw	r2,-20(fp)
  808314:	10800283 	ldbu	r2,10(r2)
  808318:	10803fcc 	andi	r2,r2,255
  80831c:	1005003a 	cmpeq	r2,r2,zero
  808320:	1000031e 	bne	r2,zero,808330 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  808324:	00800044 	movi	r2,1
  808328:	e0bffa05 	stb	r2,-24(fp)
  80832c:	00000106 	br	808334 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  808330:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  808334:	e0bffc03 	ldbu	r2,-16(fp)
  808338:	e0bffe15 	stw	r2,-8(fp)
  80833c:	e0fffe17 	ldw	r3,-8(fp)
  808340:	1805003a 	cmpeq	r2,r3,zero
  808344:	1000041e 	bne	r2,zero,808358 <OSQDel+0x120>
  808348:	e0fffe17 	ldw	r3,-8(fp)
  80834c:	18800060 	cmpeqi	r2,r3,1
  808350:	1000391e 	bne	r2,zero,808438 <OSQDel+0x200>
  808354:	00006706 	br	8084f4 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  808358:	e0bffa03 	ldbu	r2,-24(fp)
  80835c:	1004c03a 	cmpne	r2,r2,zero
  808360:	1000261e 	bne	r2,zero,8083fc <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  808364:	e0fffb17 	ldw	r3,-20(fp)
  808368:	00800fc4 	movi	r2,63
  80836c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  808370:	e0bffb17 	ldw	r2,-20(fp)
  808374:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  808378:	e0bffb17 	ldw	r2,-20(fp)
  80837c:	10800117 	ldw	r2,4(r2)
  808380:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  808384:	00802074 	movhi	r2,129
  808388:	10899a04 	addi	r2,r2,9832
  80838c:	10c00017 	ldw	r3,0(r2)
  808390:	e0bff817 	ldw	r2,-32(fp)
  808394:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  808398:	00c02074 	movhi	r3,129
  80839c:	18c99a04 	addi	r3,r3,9832
  8083a0:	e0bff817 	ldw	r2,-32(fp)
  8083a4:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8083a8:	e0bffb17 	ldw	r2,-20(fp)
  8083ac:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  8083b0:	00802074 	movhi	r2,129
  8083b4:	10899c04 	addi	r2,r2,9840
  8083b8:	10c00017 	ldw	r3,0(r2)
  8083bc:	e0bffb17 	ldw	r2,-20(fp)
  8083c0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  8083c4:	e0bffb17 	ldw	r2,-20(fp)
  8083c8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  8083cc:	00c02074 	movhi	r3,129
  8083d0:	18c99c04 	addi	r3,r3,9840
  8083d4:	e0bffb17 	ldw	r2,-20(fp)
  8083d8:	18800015 	stw	r2,0(r3)
  8083dc:	e0bff717 	ldw	r2,-36(fp)
  8083e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8083e4:	e0bff517 	ldw	r2,-44(fp)
  8083e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  8083ec:	e0bffd17 	ldw	r2,-12(fp)
  8083f0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  8083f4:	e03ff915 	stw	zero,-28(fp)
  8083f8:	00004706 	br	808518 <OSQDel+0x2e0>
  8083fc:	e0bff717 	ldw	r2,-36(fp)
  808400:	e0bff415 	stw	r2,-48(fp)
  808404:	e0bff417 	ldw	r2,-48(fp)
  808408:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80840c:	e0fffd17 	ldw	r3,-12(fp)
  808410:	00801244 	movi	r2,73
  808414:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  808418:	e0bffb17 	ldw	r2,-20(fp)
  80841c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  808420:	00003d06 	br	808518 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  808424:	e13ffb17 	ldw	r4,-20(fp)
  808428:	000b883a 	mov	r5,zero
  80842c:	01800104 	movi	r6,4
  808430:	000f883a 	mov	r7,zero
  808434:	0804ad40 	call	804ad4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  808438:	e0bffb17 	ldw	r2,-20(fp)
  80843c:	10800283 	ldbu	r2,10(r2)
  808440:	10803fcc 	andi	r2,r2,255
  808444:	1004c03a 	cmpne	r2,r2,zero
  808448:	103ff61e 	bne	r2,zero,808424 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  80844c:	e0fffb17 	ldw	r3,-20(fp)
  808450:	00800fc4 	movi	r2,63
  808454:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  808458:	e0bffb17 	ldw	r2,-20(fp)
  80845c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  808460:	e0bffb17 	ldw	r2,-20(fp)
  808464:	10800117 	ldw	r2,4(r2)
  808468:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  80846c:	00802074 	movhi	r2,129
  808470:	10899a04 	addi	r2,r2,9832
  808474:	10c00017 	ldw	r3,0(r2)
  808478:	e0bff817 	ldw	r2,-32(fp)
  80847c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  808480:	00c02074 	movhi	r3,129
  808484:	18c99a04 	addi	r3,r3,9832
  808488:	e0bff817 	ldw	r2,-32(fp)
  80848c:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  808490:	e0bffb17 	ldw	r2,-20(fp)
  808494:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  808498:	00802074 	movhi	r2,129
  80849c:	10899c04 	addi	r2,r2,9840
  8084a0:	10c00017 	ldw	r3,0(r2)
  8084a4:	e0bffb17 	ldw	r2,-20(fp)
  8084a8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  8084ac:	e0bffb17 	ldw	r2,-20(fp)
  8084b0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  8084b4:	00c02074 	movhi	r3,129
  8084b8:	18c99c04 	addi	r3,r3,9840
  8084bc:	e0bffb17 	ldw	r2,-20(fp)
  8084c0:	18800015 	stw	r2,0(r3)
  8084c4:	e0bff717 	ldw	r2,-36(fp)
  8084c8:	e0bff315 	stw	r2,-52(fp)
  8084cc:	e0bff317 	ldw	r2,-52(fp)
  8084d0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8084d4:	e0bffa03 	ldbu	r2,-24(fp)
  8084d8:	10800058 	cmpnei	r2,r2,1
  8084dc:	1000011e 	bne	r2,zero,8084e4 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  8084e0:	08055140 	call	805514 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  8084e4:	e0bffd17 	ldw	r2,-12(fp)
  8084e8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  8084ec:	e03ff915 	stw	zero,-28(fp)
             break;
  8084f0:	00000906 	br	808518 <OSQDel+0x2e0>
  8084f4:	e0bff717 	ldw	r2,-36(fp)
  8084f8:	e0bff215 	stw	r2,-56(fp)
  8084fc:	e0bff217 	ldw	r2,-56(fp)
  808500:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  808504:	e0fffd17 	ldw	r3,-12(fp)
  808508:	008001c4 	movi	r2,7
  80850c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  808510:	e0bffb17 	ldw	r2,-20(fp)
  808514:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  808518:	e0bff917 	ldw	r2,-28(fp)
  80851c:	e0bfff15 	stw	r2,-4(fp)
  808520:	e0bfff17 	ldw	r2,-4(fp)
}
  808524:	e037883a 	mov	sp,fp
  808528:	dfc00117 	ldw	ra,4(sp)
  80852c:	df000017 	ldw	fp,0(sp)
  808530:	dec00204 	addi	sp,sp,8
  808534:	f800283a 	ret

00808538 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  808538:	defff904 	addi	sp,sp,-28
  80853c:	df000615 	stw	fp,24(sp)
  808540:	df000604 	addi	fp,sp,24
  808544:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  808548:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80854c:	e0bffe17 	ldw	r2,-8(fp)
  808550:	1004c03a 	cmpne	r2,r2,zero
  808554:	1000031e 	bne	r2,zero,808564 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  808558:	00800104 	movi	r2,4
  80855c:	e0bfff15 	stw	r2,-4(fp)
  808560:	00002206 	br	8085ec <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  808564:	e0bffe17 	ldw	r2,-8(fp)
  808568:	10800003 	ldbu	r2,0(r2)
  80856c:	10803fcc 	andi	r2,r2,255
  808570:	108000a0 	cmpeqi	r2,r2,2
  808574:	1000031e 	bne	r2,zero,808584 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  808578:	00800044 	movi	r2,1
  80857c:	e0bfff15 	stw	r2,-4(fp)
  808580:	00001a06 	br	8085ec <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808584:	0005303a 	rdctl	r2,status
  808588:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80858c:	e0fffb17 	ldw	r3,-20(fp)
  808590:	00bfff84 	movi	r2,-2
  808594:	1884703a 	and	r2,r3,r2
  808598:	1001703a 	wrctl	status,r2
  
  return context;
  80859c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8085a0:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  8085a4:	e0bffe17 	ldw	r2,-8(fp)
  8085a8:	10800117 	ldw	r2,4(r2)
  8085ac:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  8085b0:	e0bffd17 	ldw	r2,-12(fp)
  8085b4:	10c00117 	ldw	r3,4(r2)
  8085b8:	e0bffd17 	ldw	r2,-12(fp)
  8085bc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  8085c0:	e0bffd17 	ldw	r2,-12(fp)
  8085c4:	10c00117 	ldw	r3,4(r2)
  8085c8:	e0bffd17 	ldw	r2,-12(fp)
  8085cc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  8085d0:	e0bffd17 	ldw	r2,-12(fp)
  8085d4:	1000058d 	sth	zero,22(r2)
  8085d8:	e0bffc17 	ldw	r2,-16(fp)
  8085dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8085e0:	e0bffa17 	ldw	r2,-24(fp)
  8085e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8085e8:	e03fff15 	stw	zero,-4(fp)
  8085ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8085f0:	e037883a 	mov	sp,fp
  8085f4:	df000017 	ldw	fp,0(sp)
  8085f8:	dec00104 	addi	sp,sp,4
  8085fc:	f800283a 	ret

00808600 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  808600:	defff104 	addi	sp,sp,-60
  808604:	dfc00e15 	stw	ra,56(sp)
  808608:	df000d15 	stw	fp,52(sp)
  80860c:	df000d04 	addi	fp,sp,52
  808610:	e13ffb15 	stw	r4,-20(fp)
  808614:	e1bffd15 	stw	r6,-12(fp)
  808618:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80861c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  808620:	e0bffd17 	ldw	r2,-12(fp)
  808624:	1004c03a 	cmpne	r2,r2,zero
  808628:	1000021e 	bne	r2,zero,808634 <OSQPend+0x34>
        return ((void *)0);
  80862c:	e03fff15 	stw	zero,-4(fp)
  808630:	0000b506 	br	808908 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  808634:	e0bffb17 	ldw	r2,-20(fp)
  808638:	1004c03a 	cmpne	r2,r2,zero
  80863c:	1000051e 	bne	r2,zero,808654 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  808640:	e0fffd17 	ldw	r3,-12(fp)
  808644:	00800104 	movi	r2,4
  808648:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80864c:	e03fff15 	stw	zero,-4(fp)
  808650:	0000ad06 	br	808908 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  808654:	e0bffb17 	ldw	r2,-20(fp)
  808658:	10800003 	ldbu	r2,0(r2)
  80865c:	10803fcc 	andi	r2,r2,255
  808660:	108000a0 	cmpeqi	r2,r2,2
  808664:	1000051e 	bne	r2,zero,80867c <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  808668:	e0fffd17 	ldw	r3,-12(fp)
  80866c:	00800044 	movi	r2,1
  808670:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  808674:	e03fff15 	stw	zero,-4(fp)
  808678:	0000a306 	br	808908 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80867c:	00802074 	movhi	r2,129
  808680:	10899d04 	addi	r2,r2,9844
  808684:	10800003 	ldbu	r2,0(r2)
  808688:	10803fcc 	andi	r2,r2,255
  80868c:	1005003a 	cmpeq	r2,r2,zero
  808690:	1000051e 	bne	r2,zero,8086a8 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  808694:	e0fffd17 	ldw	r3,-12(fp)
  808698:	00800084 	movi	r2,2
  80869c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  8086a0:	e03fff15 	stw	zero,-4(fp)
  8086a4:	00009806 	br	808908 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  8086a8:	00802074 	movhi	r2,129
  8086ac:	10898f04 	addi	r2,r2,9788
  8086b0:	10800003 	ldbu	r2,0(r2)
  8086b4:	10803fcc 	andi	r2,r2,255
  8086b8:	1005003a 	cmpeq	r2,r2,zero
  8086bc:	1000051e 	bne	r2,zero,8086d4 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  8086c0:	e0fffd17 	ldw	r3,-12(fp)
  8086c4:	00800344 	movi	r2,13
  8086c8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  8086cc:	e03fff15 	stw	zero,-4(fp)
  8086d0:	00008d06 	br	808908 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8086d4:	0005303a 	rdctl	r2,status
  8086d8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8086dc:	e0fff717 	ldw	r3,-36(fp)
  8086e0:	00bfff84 	movi	r2,-2
  8086e4:	1884703a 	and	r2,r3,r2
  8086e8:	1001703a 	wrctl	status,r2
  
  return context;
  8086ec:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  8086f0:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  8086f4:	e0bffb17 	ldw	r2,-20(fp)
  8086f8:	10800117 	ldw	r2,4(r2)
  8086fc:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  808700:	e0bff917 	ldw	r2,-28(fp)
  808704:	1080058b 	ldhu	r2,22(r2)
  808708:	10bfffcc 	andi	r2,r2,65535
  80870c:	1005003a 	cmpeq	r2,r2,zero
  808710:	10001f1e 	bne	r2,zero,808790 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  808714:	e0bff917 	ldw	r2,-28(fp)
  808718:	10c00417 	ldw	r3,16(r2)
  80871c:	18800017 	ldw	r2,0(r3)
  808720:	e0bffa15 	stw	r2,-24(fp)
  808724:	18c00104 	addi	r3,r3,4
  808728:	e0bff917 	ldw	r2,-28(fp)
  80872c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  808730:	e0bff917 	ldw	r2,-28(fp)
  808734:	1080058b 	ldhu	r2,22(r2)
  808738:	10bfffc4 	addi	r2,r2,-1
  80873c:	1007883a 	mov	r3,r2
  808740:	e0bff917 	ldw	r2,-28(fp)
  808744:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  808748:	e0bff917 	ldw	r2,-28(fp)
  80874c:	10c00417 	ldw	r3,16(r2)
  808750:	e0bff917 	ldw	r2,-28(fp)
  808754:	10800217 	ldw	r2,8(r2)
  808758:	1880041e 	bne	r3,r2,80876c <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  80875c:	e0bff917 	ldw	r2,-28(fp)
  808760:	10c00117 	ldw	r3,4(r2)
  808764:	e0bff917 	ldw	r2,-28(fp)
  808768:	10c00415 	stw	r3,16(r2)
  80876c:	e0bff817 	ldw	r2,-32(fp)
  808770:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808774:	e0bff617 	ldw	r2,-40(fp)
  808778:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  80877c:	e0bffd17 	ldw	r2,-12(fp)
  808780:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  808784:	e0bffa17 	ldw	r2,-24(fp)
  808788:	e0bfff15 	stw	r2,-4(fp)
  80878c:	00005e06 	br	808908 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  808790:	00802074 	movhi	r2,129
  808794:	10899e04 	addi	r2,r2,9848
  808798:	10c00017 	ldw	r3,0(r2)
  80879c:	00802074 	movhi	r2,129
  8087a0:	10899e04 	addi	r2,r2,9848
  8087a4:	10800017 	ldw	r2,0(r2)
  8087a8:	10800c03 	ldbu	r2,48(r2)
  8087ac:	10800114 	ori	r2,r2,4
  8087b0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8087b4:	00802074 	movhi	r2,129
  8087b8:	10899e04 	addi	r2,r2,9848
  8087bc:	10800017 	ldw	r2,0(r2)
  8087c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  8087c4:	00802074 	movhi	r2,129
  8087c8:	10899e04 	addi	r2,r2,9848
  8087cc:	10c00017 	ldw	r3,0(r2)
  8087d0:	e0bffc0b 	ldhu	r2,-16(fp)
  8087d4:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  8087d8:	e13ffb17 	ldw	r4,-20(fp)
  8087dc:	0804c680 	call	804c68 <OS_EventTaskWait>
  8087e0:	e0bff817 	ldw	r2,-32(fp)
  8087e4:	e0bff515 	stw	r2,-44(fp)
  8087e8:	e0bff517 	ldw	r2,-44(fp)
  8087ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  8087f0:	08055140 	call	805514 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8087f4:	0005303a 	rdctl	r2,status
  8087f8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8087fc:	e0fff417 	ldw	r3,-48(fp)
  808800:	00bfff84 	movi	r2,-2
  808804:	1884703a 	and	r2,r3,r2
  808808:	1001703a 	wrctl	status,r2
  
  return context;
  80880c:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  808810:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  808814:	00802074 	movhi	r2,129
  808818:	10899e04 	addi	r2,r2,9848
  80881c:	10800017 	ldw	r2,0(r2)
  808820:	10800c43 	ldbu	r2,49(r2)
  808824:	10803fcc 	andi	r2,r2,255
  808828:	e0bffe15 	stw	r2,-8(fp)
  80882c:	e0fffe17 	ldw	r3,-8(fp)
  808830:	1805003a 	cmpeq	r2,r3,zero
  808834:	1000041e 	bne	r2,zero,808848 <OSQPend+0x248>
  808838:	e0fffe17 	ldw	r3,-8(fp)
  80883c:	188000a0 	cmpeqi	r2,r3,2
  808840:	1000091e 	bne	r2,zero,808868 <OSQPend+0x268>
  808844:	00000d06 	br	80887c <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  808848:	00802074 	movhi	r2,129
  80884c:	10899e04 	addi	r2,r2,9848
  808850:	10800017 	ldw	r2,0(r2)
  808854:	10800917 	ldw	r2,36(r2)
  808858:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  80885c:	e0bffd17 	ldw	r2,-12(fp)
  808860:	10000005 	stb	zero,0(r2)
             break;
  808864:	00000e06 	br	8088a0 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  808868:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  80886c:	e0fffd17 	ldw	r3,-12(fp)
  808870:	00800384 	movi	r2,14
  808874:	18800005 	stb	r2,0(r3)
             break;
  808878:	00000906 	br	8088a0 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  80887c:	00802074 	movhi	r2,129
  808880:	10899e04 	addi	r2,r2,9848
  808884:	11000017 	ldw	r4,0(r2)
  808888:	e17ffb17 	ldw	r5,-20(fp)
  80888c:	0804ecc0 	call	804ecc <OS_EventTaskRemove>
             pmsg = (void *)0;
  808890:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  808894:	e0fffd17 	ldw	r3,-12(fp)
  808898:	00800284 	movi	r2,10
  80889c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  8088a0:	00802074 	movhi	r2,129
  8088a4:	10899e04 	addi	r2,r2,9848
  8088a8:	10800017 	ldw	r2,0(r2)
  8088ac:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  8088b0:	00802074 	movhi	r2,129
  8088b4:	10899e04 	addi	r2,r2,9848
  8088b8:	10800017 	ldw	r2,0(r2)
  8088bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  8088c0:	00802074 	movhi	r2,129
  8088c4:	10899e04 	addi	r2,r2,9848
  8088c8:	10800017 	ldw	r2,0(r2)
  8088cc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8088d0:	00802074 	movhi	r2,129
  8088d4:	10899e04 	addi	r2,r2,9848
  8088d8:	10800017 	ldw	r2,0(r2)
  8088dc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  8088e0:	00802074 	movhi	r2,129
  8088e4:	10899e04 	addi	r2,r2,9848
  8088e8:	10800017 	ldw	r2,0(r2)
  8088ec:	10000915 	stw	zero,36(r2)
  8088f0:	e0bff817 	ldw	r2,-32(fp)
  8088f4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8088f8:	e0bff317 	ldw	r2,-52(fp)
  8088fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  808900:	e0bffa17 	ldw	r2,-24(fp)
  808904:	e0bfff15 	stw	r2,-4(fp)
  808908:	e0bfff17 	ldw	r2,-4(fp)
}
  80890c:	e037883a 	mov	sp,fp
  808910:	dfc00117 	ldw	ra,4(sp)
  808914:	df000017 	ldw	fp,0(sp)
  808918:	dec00204 	addi	sp,sp,8
  80891c:	f800283a 	ret

00808920 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  808920:	defff504 	addi	sp,sp,-44
  808924:	dfc00a15 	stw	ra,40(sp)
  808928:	df000915 	stw	fp,36(sp)
  80892c:	df000904 	addi	fp,sp,36
  808930:	e13ffc15 	stw	r4,-16(fp)
  808934:	e1bffe15 	stw	r6,-8(fp)
  808938:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80893c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  808940:	e0bffe17 	ldw	r2,-8(fp)
  808944:	1004c03a 	cmpne	r2,r2,zero
  808948:	1000021e 	bne	r2,zero,808954 <OSQPendAbort+0x34>
        return (0);
  80894c:	e03fff15 	stw	zero,-4(fp)
  808950:	00004c06 	br	808a84 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  808954:	e0bffc17 	ldw	r2,-16(fp)
  808958:	1004c03a 	cmpne	r2,r2,zero
  80895c:	1000051e 	bne	r2,zero,808974 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  808960:	e0fffe17 	ldw	r3,-8(fp)
  808964:	00800104 	movi	r2,4
  808968:	18800005 	stb	r2,0(r3)
        return (0);
  80896c:	e03fff15 	stw	zero,-4(fp)
  808970:	00004406 	br	808a84 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  808974:	e0bffc17 	ldw	r2,-16(fp)
  808978:	10800003 	ldbu	r2,0(r2)
  80897c:	10803fcc 	andi	r2,r2,255
  808980:	108000a0 	cmpeqi	r2,r2,2
  808984:	1000051e 	bne	r2,zero,80899c <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  808988:	e0fffe17 	ldw	r3,-8(fp)
  80898c:	00800044 	movi	r2,1
  808990:	18800005 	stb	r2,0(r3)
        return (0);
  808994:	e03fff15 	stw	zero,-4(fp)
  808998:	00003a06 	br	808a84 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80899c:	0005303a 	rdctl	r2,status
  8089a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8089a4:	e0fff917 	ldw	r3,-28(fp)
  8089a8:	00bfff84 	movi	r2,-2
  8089ac:	1884703a 	and	r2,r3,r2
  8089b0:	1001703a 	wrctl	status,r2
  
  return context;
  8089b4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8089b8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  8089bc:	e0bffc17 	ldw	r2,-16(fp)
  8089c0:	10800283 	ldbu	r2,10(r2)
  8089c4:	10803fcc 	andi	r2,r2,255
  8089c8:	1005003a 	cmpeq	r2,r2,zero
  8089cc:	1000261e 	bne	r2,zero,808a68 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  8089d0:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  8089d4:	e0bffd03 	ldbu	r2,-12(fp)
  8089d8:	10800060 	cmpeqi	r2,r2,1
  8089dc:	1000091e 	bne	r2,zero,808a04 <OSQPendAbort+0xe4>
  8089e0:	00000e06 	br	808a1c <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  8089e4:	e13ffc17 	ldw	r4,-16(fp)
  8089e8:	000b883a 	mov	r5,zero
  8089ec:	01800104 	movi	r6,4
  8089f0:	01c00084 	movi	r7,2
  8089f4:	0804ad40 	call	804ad4 <OS_EventTaskRdy>
                     nbr_tasks++;
  8089f8:	e0bffb03 	ldbu	r2,-20(fp)
  8089fc:	10800044 	addi	r2,r2,1
  808a00:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  808a04:	e0bffc17 	ldw	r2,-16(fp)
  808a08:	10800283 	ldbu	r2,10(r2)
  808a0c:	10803fcc 	andi	r2,r2,255
  808a10:	1004c03a 	cmpne	r2,r2,zero
  808a14:	103ff31e 	bne	r2,zero,8089e4 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  808a18:	00000806 	br	808a3c <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  808a1c:	e13ffc17 	ldw	r4,-16(fp)
  808a20:	000b883a 	mov	r5,zero
  808a24:	01800104 	movi	r6,4
  808a28:	01c00084 	movi	r7,2
  808a2c:	0804ad40 	call	804ad4 <OS_EventTaskRdy>
                 nbr_tasks++;
  808a30:	e0bffb03 	ldbu	r2,-20(fp)
  808a34:	10800044 	addi	r2,r2,1
  808a38:	e0bffb05 	stb	r2,-20(fp)
  808a3c:	e0bffa17 	ldw	r2,-24(fp)
  808a40:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808a44:	e0bff817 	ldw	r2,-32(fp)
  808a48:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  808a4c:	08055140 	call	805514 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  808a50:	e0fffe17 	ldw	r3,-8(fp)
  808a54:	00800384 	movi	r2,14
  808a58:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  808a5c:	e0bffb03 	ldbu	r2,-20(fp)
  808a60:	e0bfff15 	stw	r2,-4(fp)
  808a64:	00000706 	br	808a84 <OSQPendAbort+0x164>
  808a68:	e0bffa17 	ldw	r2,-24(fp)
  808a6c:	e0bff715 	stw	r2,-36(fp)
  808a70:	e0bff717 	ldw	r2,-36(fp)
  808a74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  808a78:	e0bffe17 	ldw	r2,-8(fp)
  808a7c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  808a80:	e03fff15 	stw	zero,-4(fp)
  808a84:	e0bfff17 	ldw	r2,-4(fp)
}
  808a88:	e037883a 	mov	sp,fp
  808a8c:	dfc00117 	ldw	ra,4(sp)
  808a90:	df000017 	ldw	fp,0(sp)
  808a94:	dec00204 	addi	sp,sp,8
  808a98:	f800283a 	ret

00808a9c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  808a9c:	defff504 	addi	sp,sp,-44
  808aa0:	dfc00a15 	stw	ra,40(sp)
  808aa4:	df000915 	stw	fp,36(sp)
  808aa8:	df000904 	addi	fp,sp,36
  808aac:	e13ffd15 	stw	r4,-12(fp)
  808ab0:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  808ab4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  808ab8:	e0bffd17 	ldw	r2,-12(fp)
  808abc:	1004c03a 	cmpne	r2,r2,zero
  808ac0:	1000031e 	bne	r2,zero,808ad0 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  808ac4:	00800104 	movi	r2,4
  808ac8:	e0bfff15 	stw	r2,-4(fp)
  808acc:	00004d06 	br	808c04 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  808ad0:	e0bffd17 	ldw	r2,-12(fp)
  808ad4:	10800003 	ldbu	r2,0(r2)
  808ad8:	10803fcc 	andi	r2,r2,255
  808adc:	108000a0 	cmpeqi	r2,r2,2
  808ae0:	1000031e 	bne	r2,zero,808af0 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  808ae4:	00800044 	movi	r2,1
  808ae8:	e0bfff15 	stw	r2,-4(fp)
  808aec:	00004506 	br	808c04 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808af0:	0005303a 	rdctl	r2,status
  808af4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808af8:	e0fffa17 	ldw	r3,-24(fp)
  808afc:	00bfff84 	movi	r2,-2
  808b00:	1884703a 	and	r2,r3,r2
  808b04:	1001703a 	wrctl	status,r2
  
  return context;
  808b08:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  808b0c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  808b10:	e0bffd17 	ldw	r2,-12(fp)
  808b14:	10800283 	ldbu	r2,10(r2)
  808b18:	10803fcc 	andi	r2,r2,255
  808b1c:	1005003a 	cmpeq	r2,r2,zero
  808b20:	10000c1e 	bne	r2,zero,808b54 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  808b24:	e13ffd17 	ldw	r4,-12(fp)
  808b28:	e17ffe17 	ldw	r5,-8(fp)
  808b2c:	01800104 	movi	r6,4
  808b30:	000f883a 	mov	r7,zero
  808b34:	0804ad40 	call	804ad4 <OS_EventTaskRdy>
  808b38:	e0bffb17 	ldw	r2,-20(fp)
  808b3c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808b40:	e0bff917 	ldw	r2,-28(fp)
  808b44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  808b48:	08055140 	call	805514 <OS_Sched>
        return (OS_ERR_NONE);
  808b4c:	e03fff15 	stw	zero,-4(fp)
  808b50:	00002c06 	br	808c04 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  808b54:	e0bffd17 	ldw	r2,-12(fp)
  808b58:	10800117 	ldw	r2,4(r2)
  808b5c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  808b60:	e0bffc17 	ldw	r2,-16(fp)
  808b64:	10c0058b 	ldhu	r3,22(r2)
  808b68:	e0bffc17 	ldw	r2,-16(fp)
  808b6c:	1080050b 	ldhu	r2,20(r2)
  808b70:	18ffffcc 	andi	r3,r3,65535
  808b74:	10bfffcc 	andi	r2,r2,65535
  808b78:	18800736 	bltu	r3,r2,808b98 <OSQPost+0xfc>
  808b7c:	e0bffb17 	ldw	r2,-20(fp)
  808b80:	e0bff815 	stw	r2,-32(fp)
  808b84:	e0bff817 	ldw	r2,-32(fp)
  808b88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  808b8c:	00800784 	movi	r2,30
  808b90:	e0bfff15 	stw	r2,-4(fp)
  808b94:	00001b06 	br	808c04 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  808b98:	e0bffc17 	ldw	r2,-16(fp)
  808b9c:	10c00317 	ldw	r3,12(r2)
  808ba0:	e0bffe17 	ldw	r2,-8(fp)
  808ba4:	18800015 	stw	r2,0(r3)
  808ba8:	18c00104 	addi	r3,r3,4
  808bac:	e0bffc17 	ldw	r2,-16(fp)
  808bb0:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  808bb4:	e0bffc17 	ldw	r2,-16(fp)
  808bb8:	1080058b 	ldhu	r2,22(r2)
  808bbc:	10800044 	addi	r2,r2,1
  808bc0:	1007883a 	mov	r3,r2
  808bc4:	e0bffc17 	ldw	r2,-16(fp)
  808bc8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  808bcc:	e0bffc17 	ldw	r2,-16(fp)
  808bd0:	10c00317 	ldw	r3,12(r2)
  808bd4:	e0bffc17 	ldw	r2,-16(fp)
  808bd8:	10800217 	ldw	r2,8(r2)
  808bdc:	1880041e 	bne	r3,r2,808bf0 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  808be0:	e0bffc17 	ldw	r2,-16(fp)
  808be4:	10c00117 	ldw	r3,4(r2)
  808be8:	e0bffc17 	ldw	r2,-16(fp)
  808bec:	10c00315 	stw	r3,12(r2)
  808bf0:	e0bffb17 	ldw	r2,-20(fp)
  808bf4:	e0bff715 	stw	r2,-36(fp)
  808bf8:	e0bff717 	ldw	r2,-36(fp)
  808bfc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  808c00:	e03fff15 	stw	zero,-4(fp)
  808c04:	e0bfff17 	ldw	r2,-4(fp)
}
  808c08:	e037883a 	mov	sp,fp
  808c0c:	dfc00117 	ldw	ra,4(sp)
  808c10:	df000017 	ldw	fp,0(sp)
  808c14:	dec00204 	addi	sp,sp,8
  808c18:	f800283a 	ret

00808c1c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  808c1c:	defff504 	addi	sp,sp,-44
  808c20:	dfc00a15 	stw	ra,40(sp)
  808c24:	df000915 	stw	fp,36(sp)
  808c28:	df000904 	addi	fp,sp,36
  808c2c:	e13ffd15 	stw	r4,-12(fp)
  808c30:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  808c34:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  808c38:	e0bffd17 	ldw	r2,-12(fp)
  808c3c:	1004c03a 	cmpne	r2,r2,zero
  808c40:	1000031e 	bne	r2,zero,808c50 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  808c44:	00800104 	movi	r2,4
  808c48:	e0bfff15 	stw	r2,-4(fp)
  808c4c:	00004f06 	br	808d8c <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  808c50:	e0bffd17 	ldw	r2,-12(fp)
  808c54:	10800003 	ldbu	r2,0(r2)
  808c58:	10803fcc 	andi	r2,r2,255
  808c5c:	108000a0 	cmpeqi	r2,r2,2
  808c60:	1000031e 	bne	r2,zero,808c70 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  808c64:	00800044 	movi	r2,1
  808c68:	e0bfff15 	stw	r2,-4(fp)
  808c6c:	00004706 	br	808d8c <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808c70:	0005303a 	rdctl	r2,status
  808c74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808c78:	e0fffa17 	ldw	r3,-24(fp)
  808c7c:	00bfff84 	movi	r2,-2
  808c80:	1884703a 	and	r2,r3,r2
  808c84:	1001703a 	wrctl	status,r2
  
  return context;
  808c88:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  808c8c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  808c90:	e0bffd17 	ldw	r2,-12(fp)
  808c94:	10800283 	ldbu	r2,10(r2)
  808c98:	10803fcc 	andi	r2,r2,255
  808c9c:	1005003a 	cmpeq	r2,r2,zero
  808ca0:	10000c1e 	bne	r2,zero,808cd4 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  808ca4:	e13ffd17 	ldw	r4,-12(fp)
  808ca8:	e17ffe17 	ldw	r5,-8(fp)
  808cac:	01800104 	movi	r6,4
  808cb0:	000f883a 	mov	r7,zero
  808cb4:	0804ad40 	call	804ad4 <OS_EventTaskRdy>
  808cb8:	e0bffb17 	ldw	r2,-20(fp)
  808cbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808cc0:	e0bff917 	ldw	r2,-28(fp)
  808cc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  808cc8:	08055140 	call	805514 <OS_Sched>
        return (OS_ERR_NONE);
  808ccc:	e03fff15 	stw	zero,-4(fp)
  808cd0:	00002e06 	br	808d8c <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  808cd4:	e0bffd17 	ldw	r2,-12(fp)
  808cd8:	10800117 	ldw	r2,4(r2)
  808cdc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  808ce0:	e0bffc17 	ldw	r2,-16(fp)
  808ce4:	10c0058b 	ldhu	r3,22(r2)
  808ce8:	e0bffc17 	ldw	r2,-16(fp)
  808cec:	1080050b 	ldhu	r2,20(r2)
  808cf0:	18ffffcc 	andi	r3,r3,65535
  808cf4:	10bfffcc 	andi	r2,r2,65535
  808cf8:	18800736 	bltu	r3,r2,808d18 <OSQPostFront+0xfc>
  808cfc:	e0bffb17 	ldw	r2,-20(fp)
  808d00:	e0bff815 	stw	r2,-32(fp)
  808d04:	e0bff817 	ldw	r2,-32(fp)
  808d08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  808d0c:	00800784 	movi	r2,30
  808d10:	e0bfff15 	stw	r2,-4(fp)
  808d14:	00001d06 	br	808d8c <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  808d18:	e0bffc17 	ldw	r2,-16(fp)
  808d1c:	10c00417 	ldw	r3,16(r2)
  808d20:	e0bffc17 	ldw	r2,-16(fp)
  808d24:	10800117 	ldw	r2,4(r2)
  808d28:	1880041e 	bne	r3,r2,808d3c <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  808d2c:	e0bffc17 	ldw	r2,-16(fp)
  808d30:	10c00217 	ldw	r3,8(r2)
  808d34:	e0bffc17 	ldw	r2,-16(fp)
  808d38:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  808d3c:	e0bffc17 	ldw	r2,-16(fp)
  808d40:	10800417 	ldw	r2,16(r2)
  808d44:	10ffff04 	addi	r3,r2,-4
  808d48:	e0bffc17 	ldw	r2,-16(fp)
  808d4c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  808d50:	e0bffc17 	ldw	r2,-16(fp)
  808d54:	10c00417 	ldw	r3,16(r2)
  808d58:	e0bffe17 	ldw	r2,-8(fp)
  808d5c:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  808d60:	e0bffc17 	ldw	r2,-16(fp)
  808d64:	1080058b 	ldhu	r2,22(r2)
  808d68:	10800044 	addi	r2,r2,1
  808d6c:	1007883a 	mov	r3,r2
  808d70:	e0bffc17 	ldw	r2,-16(fp)
  808d74:	10c0058d 	sth	r3,22(r2)
  808d78:	e0bffb17 	ldw	r2,-20(fp)
  808d7c:	e0bff715 	stw	r2,-36(fp)
  808d80:	e0bff717 	ldw	r2,-36(fp)
  808d84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  808d88:	e03fff15 	stw	zero,-4(fp)
  808d8c:	e0bfff17 	ldw	r2,-4(fp)
}
  808d90:	e037883a 	mov	sp,fp
  808d94:	dfc00117 	ldw	ra,4(sp)
  808d98:	df000017 	ldw	fp,0(sp)
  808d9c:	dec00204 	addi	sp,sp,8
  808da0:	f800283a 	ret

00808da4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  808da4:	defff404 	addi	sp,sp,-48
  808da8:	dfc00b15 	stw	ra,44(sp)
  808dac:	df000a15 	stw	fp,40(sp)
  808db0:	df000a04 	addi	fp,sp,40
  808db4:	e13ffc15 	stw	r4,-16(fp)
  808db8:	e17ffd15 	stw	r5,-12(fp)
  808dbc:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  808dc0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  808dc4:	e0bffc17 	ldw	r2,-16(fp)
  808dc8:	1004c03a 	cmpne	r2,r2,zero
  808dcc:	1000031e 	bne	r2,zero,808ddc <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  808dd0:	00800104 	movi	r2,4
  808dd4:	e0bfff15 	stw	r2,-4(fp)
  808dd8:	00007906 	br	808fc0 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  808ddc:	e0bffc17 	ldw	r2,-16(fp)
  808de0:	10800003 	ldbu	r2,0(r2)
  808de4:	10803fcc 	andi	r2,r2,255
  808de8:	108000a0 	cmpeqi	r2,r2,2
  808dec:	1000031e 	bne	r2,zero,808dfc <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  808df0:	00800044 	movi	r2,1
  808df4:	e0bfff15 	stw	r2,-4(fp)
  808df8:	00007106 	br	808fc0 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808dfc:	0005303a 	rdctl	r2,status
  808e00:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808e04:	e0fff917 	ldw	r3,-28(fp)
  808e08:	00bfff84 	movi	r2,-2
  808e0c:	1884703a 	and	r2,r3,r2
  808e10:	1001703a 	wrctl	status,r2
  
  return context;
  808e14:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  808e18:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  808e1c:	e0bffc17 	ldw	r2,-16(fp)
  808e20:	10800283 	ldbu	r2,10(r2)
  808e24:	10803fcc 	andi	r2,r2,255
  808e28:	1005003a 	cmpeq	r2,r2,zero
  808e2c:	1000211e 	bne	r2,zero,808eb4 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  808e30:	e0bffe03 	ldbu	r2,-8(fp)
  808e34:	1080004c 	andi	r2,r2,1
  808e38:	10803fcc 	andi	r2,r2,255
  808e3c:	1005003a 	cmpeq	r2,r2,zero
  808e40:	10000c1e 	bne	r2,zero,808e74 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  808e44:	00000506 	br	808e5c <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  808e48:	e13ffc17 	ldw	r4,-16(fp)
  808e4c:	e17ffd17 	ldw	r5,-12(fp)
  808e50:	01800104 	movi	r6,4
  808e54:	000f883a 	mov	r7,zero
  808e58:	0804ad40 	call	804ad4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  808e5c:	e0bffc17 	ldw	r2,-16(fp)
  808e60:	10800283 	ldbu	r2,10(r2)
  808e64:	10803fcc 	andi	r2,r2,255
  808e68:	1004c03a 	cmpne	r2,r2,zero
  808e6c:	103ff61e 	bne	r2,zero,808e48 <OSQPostOpt+0xa4>
  808e70:	00000506 	br	808e88 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  808e74:	e13ffc17 	ldw	r4,-16(fp)
  808e78:	e17ffd17 	ldw	r5,-12(fp)
  808e7c:	01800104 	movi	r6,4
  808e80:	000f883a 	mov	r7,zero
  808e84:	0804ad40 	call	804ad4 <OS_EventTaskRdy>
  808e88:	e0bffa17 	ldw	r2,-24(fp)
  808e8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808e90:	e0bff817 	ldw	r2,-32(fp)
  808e94:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  808e98:	e0bffe03 	ldbu	r2,-8(fp)
  808e9c:	1080010c 	andi	r2,r2,4
  808ea0:	1004c03a 	cmpne	r2,r2,zero
  808ea4:	1000011e 	bne	r2,zero,808eac <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  808ea8:	08055140 	call	805514 <OS_Sched>
        }
        return (OS_ERR_NONE);
  808eac:	e03fff15 	stw	zero,-4(fp)
  808eb0:	00004306 	br	808fc0 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  808eb4:	e0bffc17 	ldw	r2,-16(fp)
  808eb8:	10800117 	ldw	r2,4(r2)
  808ebc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  808ec0:	e0bffb17 	ldw	r2,-20(fp)
  808ec4:	10c0058b 	ldhu	r3,22(r2)
  808ec8:	e0bffb17 	ldw	r2,-20(fp)
  808ecc:	1080050b 	ldhu	r2,20(r2)
  808ed0:	18ffffcc 	andi	r3,r3,65535
  808ed4:	10bfffcc 	andi	r2,r2,65535
  808ed8:	18800736 	bltu	r3,r2,808ef8 <OSQPostOpt+0x154>
  808edc:	e0bffa17 	ldw	r2,-24(fp)
  808ee0:	e0bff715 	stw	r2,-36(fp)
  808ee4:	e0bff717 	ldw	r2,-36(fp)
  808ee8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  808eec:	00800784 	movi	r2,30
  808ef0:	e0bfff15 	stw	r2,-4(fp)
  808ef4:	00003206 	br	808fc0 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  808ef8:	e0bffe03 	ldbu	r2,-8(fp)
  808efc:	1080008c 	andi	r2,r2,2
  808f00:	1005003a 	cmpeq	r2,r2,zero
  808f04:	1000131e 	bne	r2,zero,808f54 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  808f08:	e0bffb17 	ldw	r2,-20(fp)
  808f0c:	10c00417 	ldw	r3,16(r2)
  808f10:	e0bffb17 	ldw	r2,-20(fp)
  808f14:	10800117 	ldw	r2,4(r2)
  808f18:	1880041e 	bne	r3,r2,808f2c <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  808f1c:	e0bffb17 	ldw	r2,-20(fp)
  808f20:	10c00217 	ldw	r3,8(r2)
  808f24:	e0bffb17 	ldw	r2,-20(fp)
  808f28:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  808f2c:	e0bffb17 	ldw	r2,-20(fp)
  808f30:	10800417 	ldw	r2,16(r2)
  808f34:	10ffff04 	addi	r3,r2,-4
  808f38:	e0bffb17 	ldw	r2,-20(fp)
  808f3c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  808f40:	e0bffb17 	ldw	r2,-20(fp)
  808f44:	10c00417 	ldw	r3,16(r2)
  808f48:	e0bffd17 	ldw	r2,-12(fp)
  808f4c:	18800015 	stw	r2,0(r3)
  808f50:	00001006 	br	808f94 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  808f54:	e0bffb17 	ldw	r2,-20(fp)
  808f58:	10c00317 	ldw	r3,12(r2)
  808f5c:	e0bffd17 	ldw	r2,-12(fp)
  808f60:	18800015 	stw	r2,0(r3)
  808f64:	18c00104 	addi	r3,r3,4
  808f68:	e0bffb17 	ldw	r2,-20(fp)
  808f6c:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  808f70:	e0bffb17 	ldw	r2,-20(fp)
  808f74:	10c00317 	ldw	r3,12(r2)
  808f78:	e0bffb17 	ldw	r2,-20(fp)
  808f7c:	10800217 	ldw	r2,8(r2)
  808f80:	1880041e 	bne	r3,r2,808f94 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  808f84:	e0bffb17 	ldw	r2,-20(fp)
  808f88:	10c00117 	ldw	r3,4(r2)
  808f8c:	e0bffb17 	ldw	r2,-20(fp)
  808f90:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  808f94:	e0bffb17 	ldw	r2,-20(fp)
  808f98:	1080058b 	ldhu	r2,22(r2)
  808f9c:	10800044 	addi	r2,r2,1
  808fa0:	1007883a 	mov	r3,r2
  808fa4:	e0bffb17 	ldw	r2,-20(fp)
  808fa8:	10c0058d 	sth	r3,22(r2)
  808fac:	e0bffa17 	ldw	r2,-24(fp)
  808fb0:	e0bff615 	stw	r2,-40(fp)
  808fb4:	e0bff617 	ldw	r2,-40(fp)
  808fb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  808fbc:	e03fff15 	stw	zero,-4(fp)
  808fc0:	e0bfff17 	ldw	r2,-4(fp)
}
  808fc4:	e037883a 	mov	sp,fp
  808fc8:	dfc00117 	ldw	ra,4(sp)
  808fcc:	df000017 	ldw	fp,0(sp)
  808fd0:	dec00204 	addi	sp,sp,8
  808fd4:	f800283a 	ret

00808fd8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  808fd8:	defff504 	addi	sp,sp,-44
  808fdc:	df000a15 	stw	fp,40(sp)
  808fe0:	df000a04 	addi	fp,sp,40
  808fe4:	e13ffd15 	stw	r4,-12(fp)
  808fe8:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  808fec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  808ff0:	e0bffd17 	ldw	r2,-12(fp)
  808ff4:	1004c03a 	cmpne	r2,r2,zero
  808ff8:	1000031e 	bne	r2,zero,809008 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  808ffc:	00800104 	movi	r2,4
  809000:	e0bfff15 	stw	r2,-4(fp)
  809004:	00004f06 	br	809144 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  809008:	e0bffe17 	ldw	r2,-8(fp)
  80900c:	1004c03a 	cmpne	r2,r2,zero
  809010:	1000031e 	bne	r2,zero,809020 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  809014:	00800244 	movi	r2,9
  809018:	e0bfff15 	stw	r2,-4(fp)
  80901c:	00004906 	br	809144 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  809020:	e0bffd17 	ldw	r2,-12(fp)
  809024:	10800003 	ldbu	r2,0(r2)
  809028:	10803fcc 	andi	r2,r2,255
  80902c:	108000a0 	cmpeqi	r2,r2,2
  809030:	1000031e 	bne	r2,zero,809040 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  809034:	00800044 	movi	r2,1
  809038:	e0bfff15 	stw	r2,-4(fp)
  80903c:	00004106 	br	809144 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809040:	0005303a 	rdctl	r2,status
  809044:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809048:	e0fff717 	ldw	r3,-36(fp)
  80904c:	00bfff84 	movi	r2,-2
  809050:	1884703a 	and	r2,r3,r2
  809054:	1001703a 	wrctl	status,r2
  
  return context;
  809058:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80905c:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  809060:	e0bffd17 	ldw	r2,-12(fp)
  809064:	10c00283 	ldbu	r3,10(r2)
  809068:	e0bffe17 	ldw	r2,-8(fp)
  80906c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  809070:	e0bffd17 	ldw	r2,-12(fp)
  809074:	108002c4 	addi	r2,r2,11
  809078:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  80907c:	e0bffe17 	ldw	r2,-8(fp)
  809080:	10800204 	addi	r2,r2,8
  809084:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  809088:	e03ffb05 	stb	zero,-20(fp)
  80908c:	00000d06 	br	8090c4 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  809090:	e0bffa17 	ldw	r2,-24(fp)
  809094:	10c00003 	ldbu	r3,0(r2)
  809098:	e0bff917 	ldw	r2,-28(fp)
  80909c:	10c00005 	stb	r3,0(r2)
  8090a0:	e0bff917 	ldw	r2,-28(fp)
  8090a4:	10800044 	addi	r2,r2,1
  8090a8:	e0bff915 	stw	r2,-28(fp)
  8090ac:	e0bffa17 	ldw	r2,-24(fp)
  8090b0:	10800044 	addi	r2,r2,1
  8090b4:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8090b8:	e0bffb03 	ldbu	r2,-20(fp)
  8090bc:	10800044 	addi	r2,r2,1
  8090c0:	e0bffb05 	stb	r2,-20(fp)
  8090c4:	e0bffb03 	ldbu	r2,-20(fp)
  8090c8:	108000f0 	cmpltui	r2,r2,3
  8090cc:	103ff01e 	bne	r2,zero,809090 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  8090d0:	e0bffd17 	ldw	r2,-12(fp)
  8090d4:	10800117 	ldw	r2,4(r2)
  8090d8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  8090dc:	e0bffc17 	ldw	r2,-16(fp)
  8090e0:	1080058b 	ldhu	r2,22(r2)
  8090e4:	10bfffcc 	andi	r2,r2,65535
  8090e8:	1005003a 	cmpeq	r2,r2,zero
  8090ec:	1000061e 	bne	r2,zero,809108 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  8090f0:	e0bffc17 	ldw	r2,-16(fp)
  8090f4:	10800417 	ldw	r2,16(r2)
  8090f8:	10c00017 	ldw	r3,0(r2)
  8090fc:	e0bffe17 	ldw	r2,-8(fp)
  809100:	10c00015 	stw	r3,0(r2)
  809104:	00000206 	br	809110 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  809108:	e0bffe17 	ldw	r2,-8(fp)
  80910c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  809110:	e0bffc17 	ldw	r2,-16(fp)
  809114:	10c0058b 	ldhu	r3,22(r2)
  809118:	e0bffe17 	ldw	r2,-8(fp)
  80911c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  809120:	e0bffc17 	ldw	r2,-16(fp)
  809124:	10c0050b 	ldhu	r3,20(r2)
  809128:	e0bffe17 	ldw	r2,-8(fp)
  80912c:	10c0018d 	sth	r3,6(r2)
  809130:	e0bff817 	ldw	r2,-32(fp)
  809134:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809138:	e0bff617 	ldw	r2,-40(fp)
  80913c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  809140:	e03fff15 	stw	zero,-4(fp)
  809144:	e0bfff17 	ldw	r2,-4(fp)
}
  809148:	e037883a 	mov	sp,fp
  80914c:	df000017 	ldw	fp,0(sp)
  809150:	dec00104 	addi	sp,sp,4
  809154:	f800283a 	ret

00809158 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  809158:	defffb04 	addi	sp,sp,-20
  80915c:	dfc00415 	stw	ra,16(sp)
  809160:	df000315 	stw	fp,12(sp)
  809164:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  809168:	01002074 	movhi	r4,129
  80916c:	21179804 	addi	r4,r4,24160
  809170:	01407804 	movi	r5,480
  809174:	08054540 	call	805454 <OS_MemClr>
    pq1 = &OSQTbl[0];
  809178:	00802074 	movhi	r2,129
  80917c:	10979804 	addi	r2,r2,24160
  809180:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  809184:	00802074 	movhi	r2,129
  809188:	10979e04 	addi	r2,r2,24184
  80918c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  809190:	e03fff0d 	sth	zero,-4(fp)
  809194:	00000c06 	br	8091c8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  809198:	e0fffe17 	ldw	r3,-8(fp)
  80919c:	e0bffd17 	ldw	r2,-12(fp)
  8091a0:	18800015 	stw	r2,0(r3)
        pq1++;
  8091a4:	e0bffe17 	ldw	r2,-8(fp)
  8091a8:	10800604 	addi	r2,r2,24
  8091ac:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  8091b0:	e0bffd17 	ldw	r2,-12(fp)
  8091b4:	10800604 	addi	r2,r2,24
  8091b8:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  8091bc:	e0bfff0b 	ldhu	r2,-4(fp)
  8091c0:	10800044 	addi	r2,r2,1
  8091c4:	e0bfff0d 	sth	r2,-4(fp)
  8091c8:	e0bfff0b 	ldhu	r2,-4(fp)
  8091cc:	108004f0 	cmpltui	r2,r2,19
  8091d0:	103ff11e 	bne	r2,zero,809198 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  8091d4:	e0bffe17 	ldw	r2,-8(fp)
  8091d8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  8091dc:	00c02074 	movhi	r3,129
  8091e0:	18c99a04 	addi	r3,r3,9832
  8091e4:	00802074 	movhi	r2,129
  8091e8:	10979804 	addi	r2,r2,24160
  8091ec:	18800015 	stw	r2,0(r3)
#endif
}
  8091f0:	e037883a 	mov	sp,fp
  8091f4:	dfc00117 	ldw	ra,4(sp)
  8091f8:	df000017 	ldw	fp,0(sp)
  8091fc:	dec00204 	addi	sp,sp,8
  809200:	f800283a 	ret

00809204 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  809204:	defff904 	addi	sp,sp,-28
  809208:	df000615 	stw	fp,24(sp)
  80920c:	df000604 	addi	fp,sp,24
  809210:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809214:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809218:	e0bffe17 	ldw	r2,-8(fp)
  80921c:	1004c03a 	cmpne	r2,r2,zero
  809220:	1000021e 	bne	r2,zero,80922c <OSSemAccept+0x28>
        return (0);
  809224:	e03fff15 	stw	zero,-4(fp)
  809228:	00002106 	br	8092b0 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80922c:	e0bffe17 	ldw	r2,-8(fp)
  809230:	10800003 	ldbu	r2,0(r2)
  809234:	10803fcc 	andi	r2,r2,255
  809238:	108000e0 	cmpeqi	r2,r2,3
  80923c:	1000021e 	bne	r2,zero,809248 <OSSemAccept+0x44>
        return (0);
  809240:	e03fff15 	stw	zero,-4(fp)
  809244:	00001a06 	br	8092b0 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809248:	0005303a 	rdctl	r2,status
  80924c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809250:	e0fffb17 	ldw	r3,-20(fp)
  809254:	00bfff84 	movi	r2,-2
  809258:	1884703a 	and	r2,r3,r2
  80925c:	1001703a 	wrctl	status,r2
  
  return context;
  809260:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  809264:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  809268:	e0bffe17 	ldw	r2,-8(fp)
  80926c:	1080020b 	ldhu	r2,8(r2)
  809270:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  809274:	e0bffd0b 	ldhu	r2,-12(fp)
  809278:	1005003a 	cmpeq	r2,r2,zero
  80927c:	1000061e 	bne	r2,zero,809298 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  809280:	e0bffe17 	ldw	r2,-8(fp)
  809284:	1080020b 	ldhu	r2,8(r2)
  809288:	10bfffc4 	addi	r2,r2,-1
  80928c:	1007883a 	mov	r3,r2
  809290:	e0bffe17 	ldw	r2,-8(fp)
  809294:	10c0020d 	sth	r3,8(r2)
  809298:	e0bffc17 	ldw	r2,-16(fp)
  80929c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8092a0:	e0bffa17 	ldw	r2,-24(fp)
  8092a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  8092a8:	e0bffd0b 	ldhu	r2,-12(fp)
  8092ac:	e0bfff15 	stw	r2,-4(fp)
  8092b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8092b4:	e037883a 	mov	sp,fp
  8092b8:	df000017 	ldw	fp,0(sp)
  8092bc:	dec00104 	addi	sp,sp,4
  8092c0:	f800283a 	ret

008092c4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  8092c4:	defff804 	addi	sp,sp,-32
  8092c8:	dfc00715 	stw	ra,28(sp)
  8092cc:	df000615 	stw	fp,24(sp)
  8092d0:	df000604 	addi	fp,sp,24
  8092d4:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8092d8:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8092dc:	00802074 	movhi	r2,129
  8092e0:	10899d04 	addi	r2,r2,9844
  8092e4:	10800003 	ldbu	r2,0(r2)
  8092e8:	10803fcc 	andi	r2,r2,255
  8092ec:	1005003a 	cmpeq	r2,r2,zero
  8092f0:	1000021e 	bne	r2,zero,8092fc <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  8092f4:	e03fff15 	stw	zero,-4(fp)
  8092f8:	00003106 	br	8093c0 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8092fc:	0005303a 	rdctl	r2,status
  809300:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809304:	e0fffb17 	ldw	r3,-20(fp)
  809308:	00bfff84 	movi	r2,-2
  80930c:	1884703a 	and	r2,r3,r2
  809310:	1001703a 	wrctl	status,r2
  
  return context;
  809314:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  809318:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  80931c:	00802074 	movhi	r2,129
  809320:	10899c04 	addi	r2,r2,9840
  809324:	10800017 	ldw	r2,0(r2)
  809328:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  80932c:	00802074 	movhi	r2,129
  809330:	10899c04 	addi	r2,r2,9840
  809334:	10800017 	ldw	r2,0(r2)
  809338:	1005003a 	cmpeq	r2,r2,zero
  80933c:	1000081e 	bne	r2,zero,809360 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  809340:	00802074 	movhi	r2,129
  809344:	10899c04 	addi	r2,r2,9840
  809348:	10800017 	ldw	r2,0(r2)
  80934c:	10800117 	ldw	r2,4(r2)
  809350:	1007883a 	mov	r3,r2
  809354:	00802074 	movhi	r2,129
  809358:	10899c04 	addi	r2,r2,9840
  80935c:	10c00015 	stw	r3,0(r2)
  809360:	e0bffc17 	ldw	r2,-16(fp)
  809364:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809368:	e0bffa17 	ldw	r2,-24(fp)
  80936c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  809370:	e0bffd17 	ldw	r2,-12(fp)
  809374:	1005003a 	cmpeq	r2,r2,zero
  809378:	10000f1e 	bne	r2,zero,8093b8 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  80937c:	e0fffd17 	ldw	r3,-12(fp)
  809380:	008000c4 	movi	r2,3
  809384:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  809388:	e0fffd17 	ldw	r3,-12(fp)
  80938c:	e0bffe0b 	ldhu	r2,-8(fp)
  809390:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  809394:	e0bffd17 	ldw	r2,-12(fp)
  809398:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  80939c:	e0fffd17 	ldw	r3,-12(fp)
  8093a0:	00800fc4 	movi	r2,63
  8093a4:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  8093a8:	e0bffd17 	ldw	r2,-12(fp)
  8093ac:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  8093b0:	e13ffd17 	ldw	r4,-12(fp)
  8093b4:	08050880 	call	805088 <OS_EventWaitListInit>
    }
    return (pevent);
  8093b8:	e0bffd17 	ldw	r2,-12(fp)
  8093bc:	e0bfff15 	stw	r2,-4(fp)
  8093c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8093c4:	e037883a 	mov	sp,fp
  8093c8:	dfc00117 	ldw	ra,4(sp)
  8093cc:	df000017 	ldw	fp,0(sp)
  8093d0:	dec00204 	addi	sp,sp,8
  8093d4:	f800283a 	ret

008093d8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8093d8:	defff104 	addi	sp,sp,-60
  8093dc:	dfc00e15 	stw	ra,56(sp)
  8093e0:	df000d15 	stw	fp,52(sp)
  8093e4:	df000d04 	addi	fp,sp,52
  8093e8:	e13ffb15 	stw	r4,-20(fp)
  8093ec:	e1bffd15 	stw	r6,-12(fp)
  8093f0:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8093f4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8093f8:	e0bffd17 	ldw	r2,-12(fp)
  8093fc:	1004c03a 	cmpne	r2,r2,zero
  809400:	1000031e 	bne	r2,zero,809410 <OSSemDel+0x38>
        return (pevent);
  809404:	e0bffb17 	ldw	r2,-20(fp)
  809408:	e0bfff15 	stw	r2,-4(fp)
  80940c:	00009406 	br	809660 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  809410:	e0bffb17 	ldw	r2,-20(fp)
  809414:	1004c03a 	cmpne	r2,r2,zero
  809418:	1000061e 	bne	r2,zero,809434 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  80941c:	e0fffd17 	ldw	r3,-12(fp)
  809420:	00800104 	movi	r2,4
  809424:	18800005 	stb	r2,0(r3)
        return (pevent);
  809428:	e0fffb17 	ldw	r3,-20(fp)
  80942c:	e0ffff15 	stw	r3,-4(fp)
  809430:	00008b06 	br	809660 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  809434:	e0bffb17 	ldw	r2,-20(fp)
  809438:	10800003 	ldbu	r2,0(r2)
  80943c:	10803fcc 	andi	r2,r2,255
  809440:	108000e0 	cmpeqi	r2,r2,3
  809444:	1000061e 	bne	r2,zero,809460 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  809448:	e0fffd17 	ldw	r3,-12(fp)
  80944c:	00800044 	movi	r2,1
  809450:	18800005 	stb	r2,0(r3)
        return (pevent);
  809454:	e0bffb17 	ldw	r2,-20(fp)
  809458:	e0bfff15 	stw	r2,-4(fp)
  80945c:	00008006 	br	809660 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  809460:	00802074 	movhi	r2,129
  809464:	10899d04 	addi	r2,r2,9844
  809468:	10800003 	ldbu	r2,0(r2)
  80946c:	10803fcc 	andi	r2,r2,255
  809470:	1005003a 	cmpeq	r2,r2,zero
  809474:	1000061e 	bne	r2,zero,809490 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  809478:	e0fffd17 	ldw	r3,-12(fp)
  80947c:	008003c4 	movi	r2,15
  809480:	18800005 	stb	r2,0(r3)
        return (pevent);
  809484:	e0fffb17 	ldw	r3,-20(fp)
  809488:	e0ffff15 	stw	r3,-4(fp)
  80948c:	00007406 	br	809660 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809490:	0005303a 	rdctl	r2,status
  809494:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809498:	e0fff717 	ldw	r3,-36(fp)
  80949c:	00bfff84 	movi	r2,-2
  8094a0:	1884703a 	and	r2,r3,r2
  8094a4:	1001703a 	wrctl	status,r2
  
  return context;
  8094a8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  8094ac:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  8094b0:	e0bffb17 	ldw	r2,-20(fp)
  8094b4:	10800283 	ldbu	r2,10(r2)
  8094b8:	10803fcc 	andi	r2,r2,255
  8094bc:	1005003a 	cmpeq	r2,r2,zero
  8094c0:	1000031e 	bne	r2,zero,8094d0 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  8094c4:	00800044 	movi	r2,1
  8094c8:	e0bffa05 	stb	r2,-24(fp)
  8094cc:	00000106 	br	8094d4 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8094d0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  8094d4:	e0bffc03 	ldbu	r2,-16(fp)
  8094d8:	e0bffe15 	stw	r2,-8(fp)
  8094dc:	e0fffe17 	ldw	r3,-8(fp)
  8094e0:	1805003a 	cmpeq	r2,r3,zero
  8094e4:	1000041e 	bne	r2,zero,8094f8 <OSSemDel+0x120>
  8094e8:	e0fffe17 	ldw	r3,-8(fp)
  8094ec:	18800060 	cmpeqi	r2,r3,1
  8094f0:	10002d1e 	bne	r2,zero,8095a8 <OSSemDel+0x1d0>
  8094f4:	00004f06 	br	809634 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  8094f8:	e0bffa03 	ldbu	r2,-24(fp)
  8094fc:	1004c03a 	cmpne	r2,r2,zero
  809500:	10001a1e 	bne	r2,zero,80956c <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  809504:	e0fffb17 	ldw	r3,-20(fp)
  809508:	00800fc4 	movi	r2,63
  80950c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  809510:	e0bffb17 	ldw	r2,-20(fp)
  809514:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  809518:	e0bffb17 	ldw	r2,-20(fp)
  80951c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  809520:	00802074 	movhi	r2,129
  809524:	10899c04 	addi	r2,r2,9840
  809528:	10c00017 	ldw	r3,0(r2)
  80952c:	e0bffb17 	ldw	r2,-20(fp)
  809530:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  809534:	e0bffb17 	ldw	r2,-20(fp)
  809538:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  80953c:	00c02074 	movhi	r3,129
  809540:	18c99c04 	addi	r3,r3,9840
  809544:	e0bffb17 	ldw	r2,-20(fp)
  809548:	18800015 	stw	r2,0(r3)
  80954c:	e0bff817 	ldw	r2,-32(fp)
  809550:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809554:	e0bff617 	ldw	r2,-40(fp)
  809558:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80955c:	e0bffd17 	ldw	r2,-12(fp)
  809560:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  809564:	e03ff915 	stw	zero,-28(fp)
  809568:	00003b06 	br	809658 <OSSemDel+0x280>
  80956c:	e0bff817 	ldw	r2,-32(fp)
  809570:	e0bff515 	stw	r2,-44(fp)
  809574:	e0bff517 	ldw	r2,-44(fp)
  809578:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80957c:	e0fffd17 	ldw	r3,-12(fp)
  809580:	00801244 	movi	r2,73
  809584:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  809588:	e0bffb17 	ldw	r2,-20(fp)
  80958c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  809590:	00003106 	br	809658 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  809594:	e13ffb17 	ldw	r4,-20(fp)
  809598:	000b883a 	mov	r5,zero
  80959c:	01800044 	movi	r6,1
  8095a0:	000f883a 	mov	r7,zero
  8095a4:	0804ad40 	call	804ad4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  8095a8:	e0bffb17 	ldw	r2,-20(fp)
  8095ac:	10800283 	ldbu	r2,10(r2)
  8095b0:	10803fcc 	andi	r2,r2,255
  8095b4:	1004c03a 	cmpne	r2,r2,zero
  8095b8:	103ff61e 	bne	r2,zero,809594 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  8095bc:	e0fffb17 	ldw	r3,-20(fp)
  8095c0:	00800fc4 	movi	r2,63
  8095c4:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  8095c8:	e0bffb17 	ldw	r2,-20(fp)
  8095cc:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8095d0:	e0bffb17 	ldw	r2,-20(fp)
  8095d4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  8095d8:	00802074 	movhi	r2,129
  8095dc:	10899c04 	addi	r2,r2,9840
  8095e0:	10c00017 	ldw	r3,0(r2)
  8095e4:	e0bffb17 	ldw	r2,-20(fp)
  8095e8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  8095ec:	e0bffb17 	ldw	r2,-20(fp)
  8095f0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  8095f4:	00c02074 	movhi	r3,129
  8095f8:	18c99c04 	addi	r3,r3,9840
  8095fc:	e0bffb17 	ldw	r2,-20(fp)
  809600:	18800015 	stw	r2,0(r3)
  809604:	e0bff817 	ldw	r2,-32(fp)
  809608:	e0bff415 	stw	r2,-48(fp)
  80960c:	e0bff417 	ldw	r2,-48(fp)
  809610:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  809614:	e0bffa03 	ldbu	r2,-24(fp)
  809618:	10800058 	cmpnei	r2,r2,1
  80961c:	1000011e 	bne	r2,zero,809624 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  809620:	08055140 	call	805514 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  809624:	e0bffd17 	ldw	r2,-12(fp)
  809628:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  80962c:	e03ff915 	stw	zero,-28(fp)
             break;
  809630:	00000906 	br	809658 <OSSemDel+0x280>
  809634:	e0bff817 	ldw	r2,-32(fp)
  809638:	e0bff315 	stw	r2,-52(fp)
  80963c:	e0bff317 	ldw	r2,-52(fp)
  809640:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  809644:	e0fffd17 	ldw	r3,-12(fp)
  809648:	008001c4 	movi	r2,7
  80964c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  809650:	e0bffb17 	ldw	r2,-20(fp)
  809654:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  809658:	e0bff917 	ldw	r2,-28(fp)
  80965c:	e0bfff15 	stw	r2,-4(fp)
  809660:	e0bfff17 	ldw	r2,-4(fp)
}
  809664:	e037883a 	mov	sp,fp
  809668:	dfc00117 	ldw	ra,4(sp)
  80966c:	df000017 	ldw	fp,0(sp)
  809670:	dec00204 	addi	sp,sp,8
  809674:	f800283a 	ret

00809678 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  809678:	defff404 	addi	sp,sp,-48
  80967c:	dfc00b15 	stw	ra,44(sp)
  809680:	df000a15 	stw	fp,40(sp)
  809684:	df000a04 	addi	fp,sp,40
  809688:	e13ffc15 	stw	r4,-16(fp)
  80968c:	e1bffe15 	stw	r6,-8(fp)
  809690:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809694:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  809698:	e0bffe17 	ldw	r2,-8(fp)
  80969c:	1005003a 	cmpeq	r2,r2,zero
  8096a0:	10008f1e 	bne	r2,zero,8098e0 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8096a4:	e0bffc17 	ldw	r2,-16(fp)
  8096a8:	1004c03a 	cmpne	r2,r2,zero
  8096ac:	1000041e 	bne	r2,zero,8096c0 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  8096b0:	e0fffe17 	ldw	r3,-8(fp)
  8096b4:	00800104 	movi	r2,4
  8096b8:	18800005 	stb	r2,0(r3)
        return;
  8096bc:	00008806 	br	8098e0 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8096c0:	e0bffc17 	ldw	r2,-16(fp)
  8096c4:	10800003 	ldbu	r2,0(r2)
  8096c8:	10803fcc 	andi	r2,r2,255
  8096cc:	108000e0 	cmpeqi	r2,r2,3
  8096d0:	1000041e 	bne	r2,zero,8096e4 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  8096d4:	e0fffe17 	ldw	r3,-8(fp)
  8096d8:	00800044 	movi	r2,1
  8096dc:	18800005 	stb	r2,0(r3)
        return;
  8096e0:	00007f06 	br	8098e0 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  8096e4:	00802074 	movhi	r2,129
  8096e8:	10899d04 	addi	r2,r2,9844
  8096ec:	10800003 	ldbu	r2,0(r2)
  8096f0:	10803fcc 	andi	r2,r2,255
  8096f4:	1005003a 	cmpeq	r2,r2,zero
  8096f8:	1000041e 	bne	r2,zero,80970c <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  8096fc:	e0fffe17 	ldw	r3,-8(fp)
  809700:	00800084 	movi	r2,2
  809704:	18800005 	stb	r2,0(r3)
        return;
  809708:	00007506 	br	8098e0 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  80970c:	00802074 	movhi	r2,129
  809710:	10898f04 	addi	r2,r2,9788
  809714:	10800003 	ldbu	r2,0(r2)
  809718:	10803fcc 	andi	r2,r2,255
  80971c:	1005003a 	cmpeq	r2,r2,zero
  809720:	1000041e 	bne	r2,zero,809734 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  809724:	e0fffe17 	ldw	r3,-8(fp)
  809728:	00800344 	movi	r2,13
  80972c:	18800005 	stb	r2,0(r3)
        return;
  809730:	00006b06 	br	8098e0 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809734:	0005303a 	rdctl	r2,status
  809738:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80973c:	e0fffa17 	ldw	r3,-24(fp)
  809740:	00bfff84 	movi	r2,-2
  809744:	1884703a 	and	r2,r3,r2
  809748:	1001703a 	wrctl	status,r2
  
  return context;
  80974c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  809750:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  809754:	e0bffc17 	ldw	r2,-16(fp)
  809758:	1080020b 	ldhu	r2,8(r2)
  80975c:	10bfffcc 	andi	r2,r2,65535
  809760:	1005003a 	cmpeq	r2,r2,zero
  809764:	10000d1e 	bne	r2,zero,80979c <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  809768:	e0bffc17 	ldw	r2,-16(fp)
  80976c:	1080020b 	ldhu	r2,8(r2)
  809770:	10bfffc4 	addi	r2,r2,-1
  809774:	1007883a 	mov	r3,r2
  809778:	e0bffc17 	ldw	r2,-16(fp)
  80977c:	10c0020d 	sth	r3,8(r2)
  809780:	e0bffb17 	ldw	r2,-20(fp)
  809784:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809788:	e0bff917 	ldw	r2,-28(fp)
  80978c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  809790:	e0bffe17 	ldw	r2,-8(fp)
  809794:	10000005 	stb	zero,0(r2)
        return;
  809798:	00005106 	br	8098e0 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  80979c:	00802074 	movhi	r2,129
  8097a0:	10899e04 	addi	r2,r2,9848
  8097a4:	10c00017 	ldw	r3,0(r2)
  8097a8:	00802074 	movhi	r2,129
  8097ac:	10899e04 	addi	r2,r2,9848
  8097b0:	10800017 	ldw	r2,0(r2)
  8097b4:	10800c03 	ldbu	r2,48(r2)
  8097b8:	10800054 	ori	r2,r2,1
  8097bc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8097c0:	00802074 	movhi	r2,129
  8097c4:	10899e04 	addi	r2,r2,9848
  8097c8:	10800017 	ldw	r2,0(r2)
  8097cc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  8097d0:	00802074 	movhi	r2,129
  8097d4:	10899e04 	addi	r2,r2,9848
  8097d8:	10c00017 	ldw	r3,0(r2)
  8097dc:	e0bffd0b 	ldhu	r2,-12(fp)
  8097e0:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  8097e4:	e13ffc17 	ldw	r4,-16(fp)
  8097e8:	0804c680 	call	804c68 <OS_EventTaskWait>
  8097ec:	e0bffb17 	ldw	r2,-20(fp)
  8097f0:	e0bff815 	stw	r2,-32(fp)
  8097f4:	e0bff817 	ldw	r2,-32(fp)
  8097f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  8097fc:	08055140 	call	805514 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809800:	0005303a 	rdctl	r2,status
  809804:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809808:	e0fff717 	ldw	r3,-36(fp)
  80980c:	00bfff84 	movi	r2,-2
  809810:	1884703a 	and	r2,r3,r2
  809814:	1001703a 	wrctl	status,r2
  
  return context;
  809818:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80981c:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  809820:	00802074 	movhi	r2,129
  809824:	10899e04 	addi	r2,r2,9848
  809828:	10800017 	ldw	r2,0(r2)
  80982c:	10800c43 	ldbu	r2,49(r2)
  809830:	10803fcc 	andi	r2,r2,255
  809834:	e0bfff15 	stw	r2,-4(fp)
  809838:	e0ffff17 	ldw	r3,-4(fp)
  80983c:	1805003a 	cmpeq	r2,r3,zero
  809840:	1000041e 	bne	r2,zero,809854 <OSSemPend+0x1dc>
  809844:	e0ffff17 	ldw	r3,-4(fp)
  809848:	188000a0 	cmpeqi	r2,r3,2
  80984c:	1000041e 	bne	r2,zero,809860 <OSSemPend+0x1e8>
  809850:	00000706 	br	809870 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  809854:	e0bffe17 	ldw	r2,-8(fp)
  809858:	10000005 	stb	zero,0(r2)
             break;
  80985c:	00000c06 	br	809890 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  809860:	e0fffe17 	ldw	r3,-8(fp)
  809864:	00800384 	movi	r2,14
  809868:	18800005 	stb	r2,0(r3)
             break;
  80986c:	00000806 	br	809890 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  809870:	00802074 	movhi	r2,129
  809874:	10899e04 	addi	r2,r2,9848
  809878:	11000017 	ldw	r4,0(r2)
  80987c:	e17ffc17 	ldw	r5,-16(fp)
  809880:	0804ecc0 	call	804ecc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  809884:	e0fffe17 	ldw	r3,-8(fp)
  809888:	00800284 	movi	r2,10
  80988c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  809890:	00802074 	movhi	r2,129
  809894:	10899e04 	addi	r2,r2,9848
  809898:	10800017 	ldw	r2,0(r2)
  80989c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  8098a0:	00802074 	movhi	r2,129
  8098a4:	10899e04 	addi	r2,r2,9848
  8098a8:	10800017 	ldw	r2,0(r2)
  8098ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  8098b0:	00802074 	movhi	r2,129
  8098b4:	10899e04 	addi	r2,r2,9848
  8098b8:	10800017 	ldw	r2,0(r2)
  8098bc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8098c0:	00802074 	movhi	r2,129
  8098c4:	10899e04 	addi	r2,r2,9848
  8098c8:	10800017 	ldw	r2,0(r2)
  8098cc:	10000815 	stw	zero,32(r2)
  8098d0:	e0bffb17 	ldw	r2,-20(fp)
  8098d4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8098d8:	e0bff617 	ldw	r2,-40(fp)
  8098dc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  8098e0:	e037883a 	mov	sp,fp
  8098e4:	dfc00117 	ldw	ra,4(sp)
  8098e8:	df000017 	ldw	fp,0(sp)
  8098ec:	dec00204 	addi	sp,sp,8
  8098f0:	f800283a 	ret

008098f4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8098f4:	defff504 	addi	sp,sp,-44
  8098f8:	dfc00a15 	stw	ra,40(sp)
  8098fc:	df000915 	stw	fp,36(sp)
  809900:	df000904 	addi	fp,sp,36
  809904:	e13ffc15 	stw	r4,-16(fp)
  809908:	e1bffe15 	stw	r6,-8(fp)
  80990c:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809910:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  809914:	e0bffe17 	ldw	r2,-8(fp)
  809918:	1004c03a 	cmpne	r2,r2,zero
  80991c:	1000021e 	bne	r2,zero,809928 <OSSemPendAbort+0x34>
        return (0);
  809920:	e03fff15 	stw	zero,-4(fp)
  809924:	00004c06 	br	809a58 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809928:	e0bffc17 	ldw	r2,-16(fp)
  80992c:	1004c03a 	cmpne	r2,r2,zero
  809930:	1000051e 	bne	r2,zero,809948 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  809934:	e0fffe17 	ldw	r3,-8(fp)
  809938:	00800104 	movi	r2,4
  80993c:	18800005 	stb	r2,0(r3)
        return (0);
  809940:	e03fff15 	stw	zero,-4(fp)
  809944:	00004406 	br	809a58 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  809948:	e0bffc17 	ldw	r2,-16(fp)
  80994c:	10800003 	ldbu	r2,0(r2)
  809950:	10803fcc 	andi	r2,r2,255
  809954:	108000e0 	cmpeqi	r2,r2,3
  809958:	1000051e 	bne	r2,zero,809970 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80995c:	e0fffe17 	ldw	r3,-8(fp)
  809960:	00800044 	movi	r2,1
  809964:	18800005 	stb	r2,0(r3)
        return (0);
  809968:	e03fff15 	stw	zero,-4(fp)
  80996c:	00003a06 	br	809a58 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809970:	0005303a 	rdctl	r2,status
  809974:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809978:	e0fff917 	ldw	r3,-28(fp)
  80997c:	00bfff84 	movi	r2,-2
  809980:	1884703a 	and	r2,r3,r2
  809984:	1001703a 	wrctl	status,r2
  
  return context;
  809988:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80998c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  809990:	e0bffc17 	ldw	r2,-16(fp)
  809994:	10800283 	ldbu	r2,10(r2)
  809998:	10803fcc 	andi	r2,r2,255
  80999c:	1005003a 	cmpeq	r2,r2,zero
  8099a0:	1000261e 	bne	r2,zero,809a3c <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  8099a4:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  8099a8:	e0bffd03 	ldbu	r2,-12(fp)
  8099ac:	10800060 	cmpeqi	r2,r2,1
  8099b0:	1000091e 	bne	r2,zero,8099d8 <OSSemPendAbort+0xe4>
  8099b4:	00000e06 	br	8099f0 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8099b8:	e13ffc17 	ldw	r4,-16(fp)
  8099bc:	000b883a 	mov	r5,zero
  8099c0:	01800044 	movi	r6,1
  8099c4:	01c00084 	movi	r7,2
  8099c8:	0804ad40 	call	804ad4 <OS_EventTaskRdy>
                     nbr_tasks++;
  8099cc:	e0bffb03 	ldbu	r2,-20(fp)
  8099d0:	10800044 	addi	r2,r2,1
  8099d4:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  8099d8:	e0bffc17 	ldw	r2,-16(fp)
  8099dc:	10800283 	ldbu	r2,10(r2)
  8099e0:	10803fcc 	andi	r2,r2,255
  8099e4:	1004c03a 	cmpne	r2,r2,zero
  8099e8:	103ff31e 	bne	r2,zero,8099b8 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  8099ec:	00000806 	br	809a10 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8099f0:	e13ffc17 	ldw	r4,-16(fp)
  8099f4:	000b883a 	mov	r5,zero
  8099f8:	01800044 	movi	r6,1
  8099fc:	01c00084 	movi	r7,2
  809a00:	0804ad40 	call	804ad4 <OS_EventTaskRdy>
                 nbr_tasks++;
  809a04:	e0bffb03 	ldbu	r2,-20(fp)
  809a08:	10800044 	addi	r2,r2,1
  809a0c:	e0bffb05 	stb	r2,-20(fp)
  809a10:	e0bffa17 	ldw	r2,-24(fp)
  809a14:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809a18:	e0bff817 	ldw	r2,-32(fp)
  809a1c:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  809a20:	08055140 	call	805514 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  809a24:	e0fffe17 	ldw	r3,-8(fp)
  809a28:	00800384 	movi	r2,14
  809a2c:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  809a30:	e0bffb03 	ldbu	r2,-20(fp)
  809a34:	e0bfff15 	stw	r2,-4(fp)
  809a38:	00000706 	br	809a58 <OSSemPendAbort+0x164>
  809a3c:	e0bffa17 	ldw	r2,-24(fp)
  809a40:	e0bff715 	stw	r2,-36(fp)
  809a44:	e0bff717 	ldw	r2,-36(fp)
  809a48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  809a4c:	e0bffe17 	ldw	r2,-8(fp)
  809a50:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  809a54:	e03fff15 	stw	zero,-4(fp)
  809a58:	e0bfff17 	ldw	r2,-4(fp)
}
  809a5c:	e037883a 	mov	sp,fp
  809a60:	dfc00117 	ldw	ra,4(sp)
  809a64:	df000017 	ldw	fp,0(sp)
  809a68:	dec00204 	addi	sp,sp,8
  809a6c:	f800283a 	ret

00809a70 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  809a70:	defff704 	addi	sp,sp,-36
  809a74:	dfc00815 	stw	ra,32(sp)
  809a78:	df000715 	stw	fp,28(sp)
  809a7c:	df000704 	addi	fp,sp,28
  809a80:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809a84:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809a88:	e0bffe17 	ldw	r2,-8(fp)
  809a8c:	1004c03a 	cmpne	r2,r2,zero
  809a90:	1000031e 	bne	r2,zero,809aa0 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  809a94:	00800104 	movi	r2,4
  809a98:	e0bfff15 	stw	r2,-4(fp)
  809a9c:	00003806 	br	809b80 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  809aa0:	e0bffe17 	ldw	r2,-8(fp)
  809aa4:	10800003 	ldbu	r2,0(r2)
  809aa8:	10803fcc 	andi	r2,r2,255
  809aac:	108000e0 	cmpeqi	r2,r2,3
  809ab0:	1000031e 	bne	r2,zero,809ac0 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  809ab4:	00800044 	movi	r2,1
  809ab8:	e0bfff15 	stw	r2,-4(fp)
  809abc:	00003006 	br	809b80 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809ac0:	0005303a 	rdctl	r2,status
  809ac4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809ac8:	e0fffc17 	ldw	r3,-16(fp)
  809acc:	00bfff84 	movi	r2,-2
  809ad0:	1884703a 	and	r2,r3,r2
  809ad4:	1001703a 	wrctl	status,r2
  
  return context;
  809ad8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  809adc:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  809ae0:	e0bffe17 	ldw	r2,-8(fp)
  809ae4:	10800283 	ldbu	r2,10(r2)
  809ae8:	10803fcc 	andi	r2,r2,255
  809aec:	1005003a 	cmpeq	r2,r2,zero
  809af0:	10000c1e 	bne	r2,zero,809b24 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  809af4:	e13ffe17 	ldw	r4,-8(fp)
  809af8:	000b883a 	mov	r5,zero
  809afc:	01800044 	movi	r6,1
  809b00:	000f883a 	mov	r7,zero
  809b04:	0804ad40 	call	804ad4 <OS_EventTaskRdy>
  809b08:	e0bffd17 	ldw	r2,-12(fp)
  809b0c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809b10:	e0bffb17 	ldw	r2,-20(fp)
  809b14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  809b18:	08055140 	call	805514 <OS_Sched>
        return (OS_ERR_NONE);
  809b1c:	e03fff15 	stw	zero,-4(fp)
  809b20:	00001706 	br	809b80 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  809b24:	e0bffe17 	ldw	r2,-8(fp)
  809b28:	1080020b 	ldhu	r2,8(r2)
  809b2c:	10ffffcc 	andi	r3,r2,65535
  809b30:	00bfffd4 	movui	r2,65535
  809b34:	18800c26 	beq	r3,r2,809b68 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  809b38:	e0bffe17 	ldw	r2,-8(fp)
  809b3c:	1080020b 	ldhu	r2,8(r2)
  809b40:	10800044 	addi	r2,r2,1
  809b44:	1007883a 	mov	r3,r2
  809b48:	e0bffe17 	ldw	r2,-8(fp)
  809b4c:	10c0020d 	sth	r3,8(r2)
  809b50:	e0bffd17 	ldw	r2,-12(fp)
  809b54:	e0bffa15 	stw	r2,-24(fp)
  809b58:	e0bffa17 	ldw	r2,-24(fp)
  809b5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  809b60:	e03fff15 	stw	zero,-4(fp)
  809b64:	00000606 	br	809b80 <OSSemPost+0x110>
  809b68:	e0bffd17 	ldw	r2,-12(fp)
  809b6c:	e0bff915 	stw	r2,-28(fp)
  809b70:	e0bff917 	ldw	r2,-28(fp)
  809b74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  809b78:	00800c84 	movi	r2,50
  809b7c:	e0bfff15 	stw	r2,-4(fp)
  809b80:	e0bfff17 	ldw	r2,-4(fp)
}
  809b84:	e037883a 	mov	sp,fp
  809b88:	dfc00117 	ldw	ra,4(sp)
  809b8c:	df000017 	ldw	fp,0(sp)
  809b90:	dec00204 	addi	sp,sp,8
  809b94:	f800283a 	ret

00809b98 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  809b98:	defff604 	addi	sp,sp,-40
  809b9c:	df000915 	stw	fp,36(sp)
  809ba0:	df000904 	addi	fp,sp,36
  809ba4:	e13ffd15 	stw	r4,-12(fp)
  809ba8:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  809bac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  809bb0:	e0bffd17 	ldw	r2,-12(fp)
  809bb4:	1004c03a 	cmpne	r2,r2,zero
  809bb8:	1000031e 	bne	r2,zero,809bc8 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  809bbc:	00800104 	movi	r2,4
  809bc0:	e0bfff15 	stw	r2,-4(fp)
  809bc4:	00003b06 	br	809cb4 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  809bc8:	e0bffe17 	ldw	r2,-8(fp)
  809bcc:	1004c03a 	cmpne	r2,r2,zero
  809bd0:	1000031e 	bne	r2,zero,809be0 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  809bd4:	00800244 	movi	r2,9
  809bd8:	e0bfff15 	stw	r2,-4(fp)
  809bdc:	00003506 	br	809cb4 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  809be0:	e0bffd17 	ldw	r2,-12(fp)
  809be4:	10800003 	ldbu	r2,0(r2)
  809be8:	10803fcc 	andi	r2,r2,255
  809bec:	108000e0 	cmpeqi	r2,r2,3
  809bf0:	1000031e 	bne	r2,zero,809c00 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  809bf4:	00800044 	movi	r2,1
  809bf8:	e0bfff15 	stw	r2,-4(fp)
  809bfc:	00002d06 	br	809cb4 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809c00:	0005303a 	rdctl	r2,status
  809c04:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809c08:	e0fff817 	ldw	r3,-32(fp)
  809c0c:	00bfff84 	movi	r2,-2
  809c10:	1884703a 	and	r2,r3,r2
  809c14:	1001703a 	wrctl	status,r2
  
  return context;
  809c18:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  809c1c:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  809c20:	e0bffd17 	ldw	r2,-12(fp)
  809c24:	10c00283 	ldbu	r3,10(r2)
  809c28:	e0bffe17 	ldw	r2,-8(fp)
  809c2c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  809c30:	e0bffd17 	ldw	r2,-12(fp)
  809c34:	108002c4 	addi	r2,r2,11
  809c38:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  809c3c:	e0bffe17 	ldw	r2,-8(fp)
  809c40:	10800084 	addi	r2,r2,2
  809c44:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  809c48:	e03ffa05 	stb	zero,-24(fp)
  809c4c:	00000d06 	br	809c84 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  809c50:	e0bffc17 	ldw	r2,-16(fp)
  809c54:	10c00003 	ldbu	r3,0(r2)
  809c58:	e0bffb17 	ldw	r2,-20(fp)
  809c5c:	10c00005 	stb	r3,0(r2)
  809c60:	e0bffb17 	ldw	r2,-20(fp)
  809c64:	10800044 	addi	r2,r2,1
  809c68:	e0bffb15 	stw	r2,-20(fp)
  809c6c:	e0bffc17 	ldw	r2,-16(fp)
  809c70:	10800044 	addi	r2,r2,1
  809c74:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  809c78:	e0bffa03 	ldbu	r2,-24(fp)
  809c7c:	10800044 	addi	r2,r2,1
  809c80:	e0bffa05 	stb	r2,-24(fp)
  809c84:	e0bffa03 	ldbu	r2,-24(fp)
  809c88:	108000f0 	cmpltui	r2,r2,3
  809c8c:	103ff01e 	bne	r2,zero,809c50 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  809c90:	e0bffd17 	ldw	r2,-12(fp)
  809c94:	10c0020b 	ldhu	r3,8(r2)
  809c98:	e0bffe17 	ldw	r2,-8(fp)
  809c9c:	10c0000d 	sth	r3,0(r2)
  809ca0:	e0bff917 	ldw	r2,-28(fp)
  809ca4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809ca8:	e0bff717 	ldw	r2,-36(fp)
  809cac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  809cb0:	e03fff15 	stw	zero,-4(fp)
  809cb4:	e0bfff17 	ldw	r2,-4(fp)
}
  809cb8:	e037883a 	mov	sp,fp
  809cbc:	df000017 	ldw	fp,0(sp)
  809cc0:	dec00104 	addi	sp,sp,4
  809cc4:	f800283a 	ret

00809cc8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  809cc8:	defff904 	addi	sp,sp,-28
  809ccc:	df000615 	stw	fp,24(sp)
  809cd0:	df000604 	addi	fp,sp,24
  809cd4:	e13ffd15 	stw	r4,-12(fp)
  809cd8:	e1bfff15 	stw	r6,-4(fp)
  809cdc:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809ce0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  809ce4:	e0bfff17 	ldw	r2,-4(fp)
  809ce8:	1005003a 	cmpeq	r2,r2,zero
  809cec:	1000331e 	bne	r2,zero,809dbc <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809cf0:	e0bffd17 	ldw	r2,-12(fp)
  809cf4:	1004c03a 	cmpne	r2,r2,zero
  809cf8:	1000041e 	bne	r2,zero,809d0c <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  809cfc:	e0ffff17 	ldw	r3,-4(fp)
  809d00:	00800104 	movi	r2,4
  809d04:	18800005 	stb	r2,0(r3)
        return;
  809d08:	00002c06 	br	809dbc <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  809d0c:	e0bffd17 	ldw	r2,-12(fp)
  809d10:	10800003 	ldbu	r2,0(r2)
  809d14:	10803fcc 	andi	r2,r2,255
  809d18:	108000e0 	cmpeqi	r2,r2,3
  809d1c:	1000041e 	bne	r2,zero,809d30 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  809d20:	e0ffff17 	ldw	r3,-4(fp)
  809d24:	00800044 	movi	r2,1
  809d28:	18800005 	stb	r2,0(r3)
        return;
  809d2c:	00002306 	br	809dbc <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809d30:	0005303a 	rdctl	r2,status
  809d34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809d38:	e0fffb17 	ldw	r3,-20(fp)
  809d3c:	00bfff84 	movi	r2,-2
  809d40:	1884703a 	and	r2,r3,r2
  809d44:	1001703a 	wrctl	status,r2
  
  return context;
  809d48:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  809d4c:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  809d50:	e0bfff17 	ldw	r2,-4(fp)
  809d54:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  809d58:	e0bffd17 	ldw	r2,-12(fp)
  809d5c:	1080020b 	ldhu	r2,8(r2)
  809d60:	10bfffcc 	andi	r2,r2,65535
  809d64:	1005003a 	cmpeq	r2,r2,zero
  809d68:	1000041e 	bne	r2,zero,809d7c <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  809d6c:	e0fffd17 	ldw	r3,-12(fp)
  809d70:	e0bffe0b 	ldhu	r2,-8(fp)
  809d74:	1880020d 	sth	r2,8(r3)
  809d78:	00000c06 	br	809dac <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  809d7c:	e0bffd17 	ldw	r2,-12(fp)
  809d80:	10800283 	ldbu	r2,10(r2)
  809d84:	10803fcc 	andi	r2,r2,255
  809d88:	1004c03a 	cmpne	r2,r2,zero
  809d8c:	1000041e 	bne	r2,zero,809da0 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  809d90:	e0fffd17 	ldw	r3,-12(fp)
  809d94:	e0bffe0b 	ldhu	r2,-8(fp)
  809d98:	1880020d 	sth	r2,8(r3)
  809d9c:	00000306 	br	809dac <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  809da0:	e0ffff17 	ldw	r3,-4(fp)
  809da4:	00801244 	movi	r2,73
  809da8:	18800005 	stb	r2,0(r3)
  809dac:	e0bffc17 	ldw	r2,-16(fp)
  809db0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809db4:	e0bffa17 	ldw	r2,-24(fp)
  809db8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  809dbc:	e037883a 	mov	sp,fp
  809dc0:	df000017 	ldw	fp,0(sp)
  809dc4:	dec00104 	addi	sp,sp,4
  809dc8:	f800283a 	ret

00809dcc <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  809dcc:	defff004 	addi	sp,sp,-64
  809dd0:	dfc00f15 	stw	ra,60(sp)
  809dd4:	df000e15 	stw	fp,56(sp)
  809dd8:	df000e04 	addi	fp,sp,56
  809ddc:	e13ffd05 	stb	r4,-12(fp)
  809de0:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  809de4:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  809de8:	e0bffd03 	ldbu	r2,-12(fp)
  809dec:	10800530 	cmpltui	r2,r2,20
  809df0:	1000061e 	bne	r2,zero,809e0c <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  809df4:	e0bffd03 	ldbu	r2,-12(fp)
  809df8:	10803fe0 	cmpeqi	r2,r2,255
  809dfc:	1000031e 	bne	r2,zero,809e0c <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  809e00:	00800a84 	movi	r2,42
  809e04:	e0bfff15 	stw	r2,-4(fp)
  809e08:	00014706 	br	80a328 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  809e0c:	e0bffe03 	ldbu	r2,-8(fp)
  809e10:	10800530 	cmpltui	r2,r2,20
  809e14:	1000031e 	bne	r2,zero,809e24 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  809e18:	00800a84 	movi	r2,42
  809e1c:	e0bfff15 	stw	r2,-4(fp)
  809e20:	00014106 	br	80a328 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809e24:	0005303a 	rdctl	r2,status
  809e28:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809e2c:	e0fff617 	ldw	r3,-40(fp)
  809e30:	00bfff84 	movi	r2,-2
  809e34:	1884703a 	and	r2,r3,r2
  809e38:	1001703a 	wrctl	status,r2
  
  return context;
  809e3c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  809e40:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  809e44:	e0bffe03 	ldbu	r2,-8(fp)
  809e48:	00c02074 	movhi	r3,129
  809e4c:	18de2404 	addi	r3,r3,30864
  809e50:	1085883a 	add	r2,r2,r2
  809e54:	1085883a 	add	r2,r2,r2
  809e58:	10c5883a 	add	r2,r2,r3
  809e5c:	10800017 	ldw	r2,0(r2)
  809e60:	1005003a 	cmpeq	r2,r2,zero
  809e64:	1000071e 	bne	r2,zero,809e84 <OSTaskChangePrio+0xb8>
  809e68:	e0bff717 	ldw	r2,-36(fp)
  809e6c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809e70:	e0bff517 	ldw	r2,-44(fp)
  809e74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  809e78:	00800a04 	movi	r2,40
  809e7c:	e0bfff15 	stw	r2,-4(fp)
  809e80:	00012906 	br	80a328 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  809e84:	e0bffd03 	ldbu	r2,-12(fp)
  809e88:	10803fd8 	cmpnei	r2,r2,255
  809e8c:	1000051e 	bne	r2,zero,809ea4 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  809e90:	00802074 	movhi	r2,129
  809e94:	10899e04 	addi	r2,r2,9848
  809e98:	10800017 	ldw	r2,0(r2)
  809e9c:	10800c83 	ldbu	r2,50(r2)
  809ea0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  809ea4:	e0bffd03 	ldbu	r2,-12(fp)
  809ea8:	00c02074 	movhi	r3,129
  809eac:	18de2404 	addi	r3,r3,30864
  809eb0:	1085883a 	add	r2,r2,r2
  809eb4:	1085883a 	add	r2,r2,r2
  809eb8:	10c5883a 	add	r2,r2,r3
  809ebc:	10800017 	ldw	r2,0(r2)
  809ec0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  809ec4:	e0bffa17 	ldw	r2,-24(fp)
  809ec8:	1004c03a 	cmpne	r2,r2,zero
  809ecc:	1000071e 	bne	r2,zero,809eec <OSTaskChangePrio+0x120>
  809ed0:	e0bff717 	ldw	r2,-36(fp)
  809ed4:	e0bff415 	stw	r2,-48(fp)
  809ed8:	e0bff417 	ldw	r2,-48(fp)
  809edc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  809ee0:	00800a44 	movi	r2,41
  809ee4:	e0bfff15 	stw	r2,-4(fp)
  809ee8:	00010f06 	br	80a328 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  809eec:	e0bffa17 	ldw	r2,-24(fp)
  809ef0:	10800058 	cmpnei	r2,r2,1
  809ef4:	1000071e 	bne	r2,zero,809f14 <OSTaskChangePrio+0x148>
  809ef8:	e0bff717 	ldw	r2,-36(fp)
  809efc:	e0bff315 	stw	r2,-52(fp)
  809f00:	e0bff317 	ldw	r2,-52(fp)
  809f04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  809f08:	008010c4 	movi	r2,67
  809f0c:	e0bfff15 	stw	r2,-4(fp)
  809f10:	00010506 	br	80a328 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  809f14:	e0bffe03 	ldbu	r2,-8(fp)
  809f18:	1004d0fa 	srli	r2,r2,3
  809f1c:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  809f20:	e0bffe03 	ldbu	r2,-8(fp)
  809f24:	108001cc 	andi	r2,r2,7
  809f28:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  809f2c:	e0fff983 	ldbu	r3,-26(fp)
  809f30:	00800044 	movi	r2,1
  809f34:	10c4983a 	sll	r2,r2,r3
  809f38:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  809f3c:	e0fff943 	ldbu	r3,-27(fp)
  809f40:	00800044 	movi	r2,1
  809f44:	10c4983a 	sll	r2,r2,r3
  809f48:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  809f4c:	e0bffd03 	ldbu	r2,-12(fp)
  809f50:	00c02074 	movhi	r3,129
  809f54:	18de2404 	addi	r3,r3,30864
  809f58:	1085883a 	add	r2,r2,r2
  809f5c:	1085883a 	add	r2,r2,r2
  809f60:	10c5883a 	add	r2,r2,r3
  809f64:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  809f68:	e0bffe03 	ldbu	r2,-8(fp)
  809f6c:	00c02074 	movhi	r3,129
  809f70:	18de2404 	addi	r3,r3,30864
  809f74:	1085883a 	add	r2,r2,r2
  809f78:	1085883a 	add	r2,r2,r2
  809f7c:	10c7883a 	add	r3,r2,r3
  809f80:	e0bffa17 	ldw	r2,-24(fp)
  809f84:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  809f88:	e0bffa17 	ldw	r2,-24(fp)
  809f8c:	10800d03 	ldbu	r2,52(r2)
  809f90:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  809f94:	e0bffa17 	ldw	r2,-24(fp)
  809f98:	10800d83 	ldbu	r2,54(r2)
  809f9c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  809fa0:	e0bffa17 	ldw	r2,-24(fp)
  809fa4:	10800d43 	ldbu	r2,53(r2)
  809fa8:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  809fac:	e0fff903 	ldbu	r3,-28(fp)
  809fb0:	00802074 	movhi	r2,129
  809fb4:	10899b44 	addi	r2,r2,9837
  809fb8:	10c5883a 	add	r2,r2,r3
  809fbc:	10c00003 	ldbu	r3,0(r2)
  809fc0:	e0bff803 	ldbu	r2,-32(fp)
  809fc4:	1884703a 	and	r2,r3,r2
  809fc8:	10803fcc 	andi	r2,r2,255
  809fcc:	1005003a 	cmpeq	r2,r2,zero
  809fd0:	1000381e 	bne	r2,zero,80a0b4 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  809fd4:	e13ff903 	ldbu	r4,-28(fp)
  809fd8:	e0fff903 	ldbu	r3,-28(fp)
  809fdc:	00802074 	movhi	r2,129
  809fe0:	10899b44 	addi	r2,r2,9837
  809fe4:	10c5883a 	add	r2,r2,r3
  809fe8:	10800003 	ldbu	r2,0(r2)
  809fec:	1007883a 	mov	r3,r2
  809ff0:	e0bff803 	ldbu	r2,-32(fp)
  809ff4:	0084303a 	nor	r2,zero,r2
  809ff8:	1884703a 	and	r2,r3,r2
  809ffc:	1007883a 	mov	r3,r2
  80a000:	00802074 	movhi	r2,129
  80a004:	10899b44 	addi	r2,r2,9837
  80a008:	1105883a 	add	r2,r2,r4
  80a00c:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  80a010:	e0fff903 	ldbu	r3,-28(fp)
  80a014:	00802074 	movhi	r2,129
  80a018:	10899b44 	addi	r2,r2,9837
  80a01c:	10c5883a 	add	r2,r2,r3
  80a020:	10800003 	ldbu	r2,0(r2)
  80a024:	10803fcc 	andi	r2,r2,255
  80a028:	1004c03a 	cmpne	r2,r2,zero
  80a02c:	10000b1e 	bne	r2,zero,80a05c <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  80a030:	e0bff843 	ldbu	r2,-31(fp)
  80a034:	0084303a 	nor	r2,zero,r2
  80a038:	1007883a 	mov	r3,r2
  80a03c:	00802074 	movhi	r2,129
  80a040:	10899b04 	addi	r2,r2,9836
  80a044:	10800003 	ldbu	r2,0(r2)
  80a048:	1884703a 	and	r2,r3,r2
  80a04c:	1007883a 	mov	r3,r2
  80a050:	00802074 	movhi	r2,129
  80a054:	10899b04 	addi	r2,r2,9836
  80a058:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  80a05c:	00802074 	movhi	r2,129
  80a060:	10899b04 	addi	r2,r2,9836
  80a064:	10c00003 	ldbu	r3,0(r2)
  80a068:	e0bff8c3 	ldbu	r2,-29(fp)
  80a06c:	1884b03a 	or	r2,r3,r2
  80a070:	1007883a 	mov	r3,r2
  80a074:	00802074 	movhi	r2,129
  80a078:	10899b04 	addi	r2,r2,9836
  80a07c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  80a080:	e13ff983 	ldbu	r4,-26(fp)
  80a084:	e0fff983 	ldbu	r3,-26(fp)
  80a088:	00802074 	movhi	r2,129
  80a08c:	10899b44 	addi	r2,r2,9837
  80a090:	10c5883a 	add	r2,r2,r3
  80a094:	10c00003 	ldbu	r3,0(r2)
  80a098:	e0bff883 	ldbu	r2,-30(fp)
  80a09c:	1884b03a 	or	r2,r3,r2
  80a0a0:	1007883a 	mov	r3,r2
  80a0a4:	00802074 	movhi	r2,129
  80a0a8:	10899b44 	addi	r2,r2,9837
  80a0ac:	1105883a 	add	r2,r2,r4
  80a0b0:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  80a0b4:	e0bffa17 	ldw	r2,-24(fp)
  80a0b8:	10800717 	ldw	r2,28(r2)
  80a0bc:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  80a0c0:	e0bffc17 	ldw	r2,-16(fp)
  80a0c4:	1005003a 	cmpeq	r2,r2,zero
  80a0c8:	1000341e 	bne	r2,zero,80a19c <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  80a0cc:	e13ff903 	ldbu	r4,-28(fp)
  80a0d0:	e0fff903 	ldbu	r3,-28(fp)
  80a0d4:	e0bffc17 	ldw	r2,-16(fp)
  80a0d8:	1885883a 	add	r2,r3,r2
  80a0dc:	10800204 	addi	r2,r2,8
  80a0e0:	108000c3 	ldbu	r2,3(r2)
  80a0e4:	1007883a 	mov	r3,r2
  80a0e8:	e0bff803 	ldbu	r2,-32(fp)
  80a0ec:	0084303a 	nor	r2,zero,r2
  80a0f0:	1884703a 	and	r2,r3,r2
  80a0f4:	1007883a 	mov	r3,r2
  80a0f8:	e0bffc17 	ldw	r2,-16(fp)
  80a0fc:	2085883a 	add	r2,r4,r2
  80a100:	10800204 	addi	r2,r2,8
  80a104:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  80a108:	e0fff903 	ldbu	r3,-28(fp)
  80a10c:	e0bffc17 	ldw	r2,-16(fp)
  80a110:	1885883a 	add	r2,r3,r2
  80a114:	10800204 	addi	r2,r2,8
  80a118:	108000c3 	ldbu	r2,3(r2)
  80a11c:	10803fcc 	andi	r2,r2,255
  80a120:	1004c03a 	cmpne	r2,r2,zero
  80a124:	1000091e 	bne	r2,zero,80a14c <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  80a128:	e0bffc17 	ldw	r2,-16(fp)
  80a12c:	10800283 	ldbu	r2,10(r2)
  80a130:	1007883a 	mov	r3,r2
  80a134:	e0bff843 	ldbu	r2,-31(fp)
  80a138:	0084303a 	nor	r2,zero,r2
  80a13c:	1884703a 	and	r2,r3,r2
  80a140:	1007883a 	mov	r3,r2
  80a144:	e0bffc17 	ldw	r2,-16(fp)
  80a148:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  80a14c:	e0bffc17 	ldw	r2,-16(fp)
  80a150:	10c00283 	ldbu	r3,10(r2)
  80a154:	e0bff8c3 	ldbu	r2,-29(fp)
  80a158:	1884b03a 	or	r2,r3,r2
  80a15c:	1007883a 	mov	r3,r2
  80a160:	e0bffc17 	ldw	r2,-16(fp)
  80a164:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  80a168:	e13ff983 	ldbu	r4,-26(fp)
  80a16c:	e0fff983 	ldbu	r3,-26(fp)
  80a170:	e0bffc17 	ldw	r2,-16(fp)
  80a174:	1885883a 	add	r2,r3,r2
  80a178:	10800204 	addi	r2,r2,8
  80a17c:	10c000c3 	ldbu	r3,3(r2)
  80a180:	e0bff883 	ldbu	r2,-30(fp)
  80a184:	1884b03a 	or	r2,r3,r2
  80a188:	1007883a 	mov	r3,r2
  80a18c:	e0bffc17 	ldw	r2,-16(fp)
  80a190:	2085883a 	add	r2,r4,r2
  80a194:	10800204 	addi	r2,r2,8
  80a198:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  80a19c:	e0bffa17 	ldw	r2,-24(fp)
  80a1a0:	10800817 	ldw	r2,32(r2)
  80a1a4:	1005003a 	cmpeq	r2,r2,zero
  80a1a8:	1000441e 	bne	r2,zero,80a2bc <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  80a1ac:	e0bffa17 	ldw	r2,-24(fp)
  80a1b0:	10800817 	ldw	r2,32(r2)
  80a1b4:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  80a1b8:	e0bffb17 	ldw	r2,-20(fp)
  80a1bc:	10800017 	ldw	r2,0(r2)
  80a1c0:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  80a1c4:	00003a06 	br	80a2b0 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  80a1c8:	e13ff903 	ldbu	r4,-28(fp)
  80a1cc:	e0fff903 	ldbu	r3,-28(fp)
  80a1d0:	e0bffc17 	ldw	r2,-16(fp)
  80a1d4:	1885883a 	add	r2,r3,r2
  80a1d8:	10800204 	addi	r2,r2,8
  80a1dc:	108000c3 	ldbu	r2,3(r2)
  80a1e0:	1007883a 	mov	r3,r2
  80a1e4:	e0bff803 	ldbu	r2,-32(fp)
  80a1e8:	0084303a 	nor	r2,zero,r2
  80a1ec:	1884703a 	and	r2,r3,r2
  80a1f0:	1007883a 	mov	r3,r2
  80a1f4:	e0bffc17 	ldw	r2,-16(fp)
  80a1f8:	2085883a 	add	r2,r4,r2
  80a1fc:	10800204 	addi	r2,r2,8
  80a200:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  80a204:	e0fff903 	ldbu	r3,-28(fp)
  80a208:	e0bffc17 	ldw	r2,-16(fp)
  80a20c:	1885883a 	add	r2,r3,r2
  80a210:	10800204 	addi	r2,r2,8
  80a214:	108000c3 	ldbu	r2,3(r2)
  80a218:	10803fcc 	andi	r2,r2,255
  80a21c:	1004c03a 	cmpne	r2,r2,zero
  80a220:	1000091e 	bne	r2,zero,80a248 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  80a224:	e0bffc17 	ldw	r2,-16(fp)
  80a228:	10800283 	ldbu	r2,10(r2)
  80a22c:	1007883a 	mov	r3,r2
  80a230:	e0bff843 	ldbu	r2,-31(fp)
  80a234:	0084303a 	nor	r2,zero,r2
  80a238:	1884703a 	and	r2,r3,r2
  80a23c:	1007883a 	mov	r3,r2
  80a240:	e0bffc17 	ldw	r2,-16(fp)
  80a244:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  80a248:	e0bffc17 	ldw	r2,-16(fp)
  80a24c:	10c00283 	ldbu	r3,10(r2)
  80a250:	e0bff8c3 	ldbu	r2,-29(fp)
  80a254:	1884b03a 	or	r2,r3,r2
  80a258:	1007883a 	mov	r3,r2
  80a25c:	e0bffc17 	ldw	r2,-16(fp)
  80a260:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  80a264:	e13ff983 	ldbu	r4,-26(fp)
  80a268:	e0fff983 	ldbu	r3,-26(fp)
  80a26c:	e0bffc17 	ldw	r2,-16(fp)
  80a270:	1885883a 	add	r2,r3,r2
  80a274:	10800204 	addi	r2,r2,8
  80a278:	10c000c3 	ldbu	r3,3(r2)
  80a27c:	e0bff883 	ldbu	r2,-30(fp)
  80a280:	1884b03a 	or	r2,r3,r2
  80a284:	1007883a 	mov	r3,r2
  80a288:	e0bffc17 	ldw	r2,-16(fp)
  80a28c:	2085883a 	add	r2,r4,r2
  80a290:	10800204 	addi	r2,r2,8
  80a294:	10c000c5 	stb	r3,3(r2)
            pevents++;
  80a298:	e0bffb17 	ldw	r2,-20(fp)
  80a29c:	10800104 	addi	r2,r2,4
  80a2a0:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  80a2a4:	e0bffb17 	ldw	r2,-20(fp)
  80a2a8:	10800017 	ldw	r2,0(r2)
  80a2ac:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  80a2b0:	e0bffc17 	ldw	r2,-16(fp)
  80a2b4:	1004c03a 	cmpne	r2,r2,zero
  80a2b8:	103fc31e 	bne	r2,zero,80a1c8 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  80a2bc:	e0fffa17 	ldw	r3,-24(fp)
  80a2c0:	e0bffe03 	ldbu	r2,-8(fp)
  80a2c4:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  80a2c8:	e0fffa17 	ldw	r3,-24(fp)
  80a2cc:	e0bff983 	ldbu	r2,-26(fp)
  80a2d0:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  80a2d4:	e0fffa17 	ldw	r3,-24(fp)
  80a2d8:	e0bff943 	ldbu	r2,-27(fp)
  80a2dc:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  80a2e0:	e0fffa17 	ldw	r3,-24(fp)
  80a2e4:	e0bff8c3 	ldbu	r2,-29(fp)
  80a2e8:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  80a2ec:	e0fffa17 	ldw	r3,-24(fp)
  80a2f0:	e0bff883 	ldbu	r2,-30(fp)
  80a2f4:	18800d45 	stb	r2,53(r3)
  80a2f8:	e0bff717 	ldw	r2,-36(fp)
  80a2fc:	e0bff215 	stw	r2,-56(fp)
  80a300:	e0bff217 	ldw	r2,-56(fp)
  80a304:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80a308:	00802074 	movhi	r2,129
  80a30c:	10898f44 	addi	r2,r2,9789
  80a310:	10800003 	ldbu	r2,0(r2)
  80a314:	10803fcc 	andi	r2,r2,255
  80a318:	10800058 	cmpnei	r2,r2,1
  80a31c:	1000011e 	bne	r2,zero,80a324 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  80a320:	08055140 	call	805514 <OS_Sched>
    }
    return (OS_ERR_NONE);
  80a324:	e03fff15 	stw	zero,-4(fp)
  80a328:	e0bfff17 	ldw	r2,-4(fp)
}
  80a32c:	e037883a 	mov	sp,fp
  80a330:	dfc00117 	ldw	ra,4(sp)
  80a334:	df000017 	ldw	fp,0(sp)
  80a338:	dec00204 	addi	sp,sp,8
  80a33c:	f800283a 	ret

0080a340 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  80a340:	deffed04 	addi	sp,sp,-76
  80a344:	dfc01215 	stw	ra,72(sp)
  80a348:	df001115 	stw	fp,68(sp)
  80a34c:	df001104 	addi	fp,sp,68
  80a350:	e13ffb15 	stw	r4,-20(fp)
  80a354:	e17ffc15 	stw	r5,-16(fp)
  80a358:	e1bffd15 	stw	r6,-12(fp)
  80a35c:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  80a360:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  80a364:	e0bffe03 	ldbu	r2,-8(fp)
  80a368:	10800570 	cmpltui	r2,r2,21
  80a36c:	1000031e 	bne	r2,zero,80a37c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  80a370:	00800a84 	movi	r2,42
  80a374:	e0bfff15 	stw	r2,-4(fp)
  80a378:	00006006 	br	80a4fc <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a37c:	0005303a 	rdctl	r2,status
  80a380:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a384:	e0fff717 	ldw	r3,-36(fp)
  80a388:	00bfff84 	movi	r2,-2
  80a38c:	1884703a 	and	r2,r3,r2
  80a390:	1001703a 	wrctl	status,r2
  
  return context;
  80a394:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80a398:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  80a39c:	00802074 	movhi	r2,129
  80a3a0:	10899d04 	addi	r2,r2,9844
  80a3a4:	10800003 	ldbu	r2,0(r2)
  80a3a8:	10803fcc 	andi	r2,r2,255
  80a3ac:	1005003a 	cmpeq	r2,r2,zero
  80a3b0:	1000071e 	bne	r2,zero,80a3d0 <OSTaskCreate+0x90>
  80a3b4:	e0bff817 	ldw	r2,-32(fp)
  80a3b8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a3bc:	e0bff617 	ldw	r2,-40(fp)
  80a3c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  80a3c4:	00800f04 	movi	r2,60
  80a3c8:	e0bfff15 	stw	r2,-4(fp)
  80a3cc:	00004b06 	br	80a4fc <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  80a3d0:	e0bffe03 	ldbu	r2,-8(fp)
  80a3d4:	00c02074 	movhi	r3,129
  80a3d8:	18de2404 	addi	r3,r3,30864
  80a3dc:	1085883a 	add	r2,r2,r2
  80a3e0:	1085883a 	add	r2,r2,r2
  80a3e4:	10c5883a 	add	r2,r2,r3
  80a3e8:	10800017 	ldw	r2,0(r2)
  80a3ec:	1004c03a 	cmpne	r2,r2,zero
  80a3f0:	10003c1e 	bne	r2,zero,80a4e4 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  80a3f4:	e0bffe03 	ldbu	r2,-8(fp)
  80a3f8:	00c02074 	movhi	r3,129
  80a3fc:	18de2404 	addi	r3,r3,30864
  80a400:	1085883a 	add	r2,r2,r2
  80a404:	1085883a 	add	r2,r2,r2
  80a408:	10c7883a 	add	r3,r2,r3
  80a40c:	00800044 	movi	r2,1
  80a410:	18800015 	stw	r2,0(r3)
  80a414:	e0bff817 	ldw	r2,-32(fp)
  80a418:	e0bff515 	stw	r2,-44(fp)
  80a41c:	e0bff517 	ldw	r2,-44(fp)
  80a420:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  80a424:	e13ffb17 	ldw	r4,-20(fp)
  80a428:	e17ffc17 	ldw	r5,-16(fp)
  80a42c:	e1bffd17 	ldw	r6,-12(fp)
  80a430:	000f883a 	mov	r7,zero
  80a434:	080e2500 	call	80e250 <OSTaskStkInit>
  80a438:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  80a43c:	e13ffe03 	ldbu	r4,-8(fp)
  80a440:	d8000015 	stw	zero,0(sp)
  80a444:	d8000115 	stw	zero,4(sp)
  80a448:	d8000215 	stw	zero,8(sp)
  80a44c:	e17ffa17 	ldw	r5,-24(fp)
  80a450:	000d883a 	mov	r6,zero
  80a454:	000f883a 	mov	r7,zero
  80a458:	080591c0 	call	80591c <OS_TCBInit>
  80a45c:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  80a460:	e0bff903 	ldbu	r2,-28(fp)
  80a464:	1004c03a 	cmpne	r2,r2,zero
  80a468:	1000081e 	bne	r2,zero,80a48c <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  80a46c:	00802074 	movhi	r2,129
  80a470:	10898f44 	addi	r2,r2,9789
  80a474:	10800003 	ldbu	r2,0(r2)
  80a478:	10803fcc 	andi	r2,r2,255
  80a47c:	10800058 	cmpnei	r2,r2,1
  80a480:	1000151e 	bne	r2,zero,80a4d8 <OSTaskCreate+0x198>
                OS_Sched();
  80a484:	08055140 	call	805514 <OS_Sched>
  80a488:	00001306 	br	80a4d8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a48c:	0005303a 	rdctl	r2,status
  80a490:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a494:	e0fff417 	ldw	r3,-48(fp)
  80a498:	00bfff84 	movi	r2,-2
  80a49c:	1884703a 	and	r2,r3,r2
  80a4a0:	1001703a 	wrctl	status,r2
  
  return context;
  80a4a4:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  80a4a8:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  80a4ac:	e0bffe03 	ldbu	r2,-8(fp)
  80a4b0:	00c02074 	movhi	r3,129
  80a4b4:	18de2404 	addi	r3,r3,30864
  80a4b8:	1085883a 	add	r2,r2,r2
  80a4bc:	1085883a 	add	r2,r2,r2
  80a4c0:	10c5883a 	add	r2,r2,r3
  80a4c4:	10000015 	stw	zero,0(r2)
  80a4c8:	e0bff817 	ldw	r2,-32(fp)
  80a4cc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a4d0:	e0bff317 	ldw	r2,-52(fp)
  80a4d4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  80a4d8:	e0bff903 	ldbu	r2,-28(fp)
  80a4dc:	e0bfff15 	stw	r2,-4(fp)
  80a4e0:	00000606 	br	80a4fc <OSTaskCreate+0x1bc>
  80a4e4:	e0bff817 	ldw	r2,-32(fp)
  80a4e8:	e0bff215 	stw	r2,-56(fp)
  80a4ec:	e0bff217 	ldw	r2,-56(fp)
  80a4f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  80a4f4:	00800a04 	movi	r2,40
  80a4f8:	e0bfff15 	stw	r2,-4(fp)
  80a4fc:	e0bfff17 	ldw	r2,-4(fp)
}
  80a500:	e037883a 	mov	sp,fp
  80a504:	dfc00117 	ldw	ra,4(sp)
  80a508:	df000017 	ldw	fp,0(sp)
  80a50c:	dec00204 	addi	sp,sp,8
  80a510:	f800283a 	ret

0080a514 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  80a514:	deffeb04 	addi	sp,sp,-84
  80a518:	dfc01415 	stw	ra,80(sp)
  80a51c:	df001315 	stw	fp,76(sp)
  80a520:	df001304 	addi	fp,sp,76
  80a524:	e13ff915 	stw	r4,-28(fp)
  80a528:	e17ffa15 	stw	r5,-24(fp)
  80a52c:	e1bffb15 	stw	r6,-20(fp)
  80a530:	e0800217 	ldw	r2,8(fp)
  80a534:	e0c00617 	ldw	r3,24(fp)
  80a538:	e1fffc05 	stb	r7,-16(fp)
  80a53c:	e0bffd0d 	sth	r2,-12(fp)
  80a540:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  80a544:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  80a548:	e0bffc03 	ldbu	r2,-16(fp)
  80a54c:	10800570 	cmpltui	r2,r2,21
  80a550:	1000031e 	bne	r2,zero,80a560 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  80a554:	00800a84 	movi	r2,42
  80a558:	e0bfff15 	stw	r2,-4(fp)
  80a55c:	00006706 	br	80a6fc <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a560:	0005303a 	rdctl	r2,status
  80a564:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a568:	e0fff517 	ldw	r3,-44(fp)
  80a56c:	00bfff84 	movi	r2,-2
  80a570:	1884703a 	and	r2,r3,r2
  80a574:	1001703a 	wrctl	status,r2
  
  return context;
  80a578:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80a57c:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  80a580:	00802074 	movhi	r2,129
  80a584:	10899d04 	addi	r2,r2,9844
  80a588:	10800003 	ldbu	r2,0(r2)
  80a58c:	10803fcc 	andi	r2,r2,255
  80a590:	1005003a 	cmpeq	r2,r2,zero
  80a594:	1000071e 	bne	r2,zero,80a5b4 <OSTaskCreateExt+0xa0>
  80a598:	e0bff617 	ldw	r2,-40(fp)
  80a59c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a5a0:	e0bff417 	ldw	r2,-48(fp)
  80a5a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  80a5a8:	00800f04 	movi	r2,60
  80a5ac:	e0bfff15 	stw	r2,-4(fp)
  80a5b0:	00005206 	br	80a6fc <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  80a5b4:	e0bffc03 	ldbu	r2,-16(fp)
  80a5b8:	00c02074 	movhi	r3,129
  80a5bc:	18de2404 	addi	r3,r3,30864
  80a5c0:	1085883a 	add	r2,r2,r2
  80a5c4:	1085883a 	add	r2,r2,r2
  80a5c8:	10c5883a 	add	r2,r2,r3
  80a5cc:	10800017 	ldw	r2,0(r2)
  80a5d0:	1004c03a 	cmpne	r2,r2,zero
  80a5d4:	1000431e 	bne	r2,zero,80a6e4 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  80a5d8:	e0bffc03 	ldbu	r2,-16(fp)
  80a5dc:	00c02074 	movhi	r3,129
  80a5e0:	18de2404 	addi	r3,r3,30864
  80a5e4:	1085883a 	add	r2,r2,r2
  80a5e8:	1085883a 	add	r2,r2,r2
  80a5ec:	10c7883a 	add	r3,r2,r3
  80a5f0:	00800044 	movi	r2,1
  80a5f4:	18800015 	stw	r2,0(r3)
  80a5f8:	e0bff617 	ldw	r2,-40(fp)
  80a5fc:	e0bff315 	stw	r2,-52(fp)
  80a600:	e0bff317 	ldw	r2,-52(fp)
  80a604:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  80a608:	e1bffe0b 	ldhu	r6,-8(fp)
  80a60c:	e1000317 	ldw	r4,12(fp)
  80a610:	e1400417 	ldw	r5,16(fp)
  80a614:	080b7900 	call	80b790 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  80a618:	e1fffe0b 	ldhu	r7,-8(fp)
  80a61c:	e13ff917 	ldw	r4,-28(fp)
  80a620:	e17ffa17 	ldw	r5,-24(fp)
  80a624:	e1bffb17 	ldw	r6,-20(fp)
  80a628:	080e2500 	call	80e250 <OSTaskStkInit>
  80a62c:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  80a630:	e13ffc03 	ldbu	r4,-16(fp)
  80a634:	e1fffd0b 	ldhu	r7,-12(fp)
  80a638:	e0fffe0b 	ldhu	r3,-8(fp)
  80a63c:	e0800417 	ldw	r2,16(fp)
  80a640:	d8800015 	stw	r2,0(sp)
  80a644:	e0800517 	ldw	r2,20(fp)
  80a648:	d8800115 	stw	r2,4(sp)
  80a64c:	d8c00215 	stw	r3,8(sp)
  80a650:	e17ff817 	ldw	r5,-32(fp)
  80a654:	e1800317 	ldw	r6,12(fp)
  80a658:	080591c0 	call	80591c <OS_TCBInit>
  80a65c:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  80a660:	e0bff703 	ldbu	r2,-36(fp)
  80a664:	1004c03a 	cmpne	r2,r2,zero
  80a668:	1000081e 	bne	r2,zero,80a68c <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  80a66c:	00802074 	movhi	r2,129
  80a670:	10898f44 	addi	r2,r2,9789
  80a674:	10800003 	ldbu	r2,0(r2)
  80a678:	10803fcc 	andi	r2,r2,255
  80a67c:	10800058 	cmpnei	r2,r2,1
  80a680:	1000151e 	bne	r2,zero,80a6d8 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  80a684:	08055140 	call	805514 <OS_Sched>
  80a688:	00001306 	br	80a6d8 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a68c:	0005303a 	rdctl	r2,status
  80a690:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a694:	e0fff217 	ldw	r3,-56(fp)
  80a698:	00bfff84 	movi	r2,-2
  80a69c:	1884703a 	and	r2,r3,r2
  80a6a0:	1001703a 	wrctl	status,r2
  
  return context;
  80a6a4:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  80a6a8:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  80a6ac:	e0bffc03 	ldbu	r2,-16(fp)
  80a6b0:	00c02074 	movhi	r3,129
  80a6b4:	18de2404 	addi	r3,r3,30864
  80a6b8:	1085883a 	add	r2,r2,r2
  80a6bc:	1085883a 	add	r2,r2,r2
  80a6c0:	10c5883a 	add	r2,r2,r3
  80a6c4:	10000015 	stw	zero,0(r2)
  80a6c8:	e0bff617 	ldw	r2,-40(fp)
  80a6cc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a6d0:	e0bff117 	ldw	r2,-60(fp)
  80a6d4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  80a6d8:	e0bff703 	ldbu	r2,-36(fp)
  80a6dc:	e0bfff15 	stw	r2,-4(fp)
  80a6e0:	00000606 	br	80a6fc <OSTaskCreateExt+0x1e8>
  80a6e4:	e0bff617 	ldw	r2,-40(fp)
  80a6e8:	e0bff015 	stw	r2,-64(fp)
  80a6ec:	e0bff017 	ldw	r2,-64(fp)
  80a6f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  80a6f4:	00800a04 	movi	r2,40
  80a6f8:	e0bfff15 	stw	r2,-4(fp)
  80a6fc:	e0bfff17 	ldw	r2,-4(fp)
}
  80a700:	e037883a 	mov	sp,fp
  80a704:	dfc00117 	ldw	ra,4(sp)
  80a708:	df000017 	ldw	fp,0(sp)
  80a70c:	dec00204 	addi	sp,sp,8
  80a710:	f800283a 	ret

0080a714 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  80a714:	defff304 	addi	sp,sp,-52
  80a718:	dfc00c15 	stw	ra,48(sp)
  80a71c:	df000b15 	stw	fp,44(sp)
  80a720:	df000b04 	addi	fp,sp,44
  80a724:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  80a728:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  80a72c:	00802074 	movhi	r2,129
  80a730:	10899d04 	addi	r2,r2,9844
  80a734:	10800003 	ldbu	r2,0(r2)
  80a738:	10803fcc 	andi	r2,r2,255
  80a73c:	1005003a 	cmpeq	r2,r2,zero
  80a740:	1000031e 	bne	r2,zero,80a750 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  80a744:	00801004 	movi	r2,64
  80a748:	e0bfff15 	stw	r2,-4(fp)
  80a74c:	0000ee06 	br	80ab08 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  80a750:	e0bffe03 	ldbu	r2,-8(fp)
  80a754:	10800518 	cmpnei	r2,r2,20
  80a758:	1000031e 	bne	r2,zero,80a768 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  80a75c:	00800f84 	movi	r2,62
  80a760:	e0bfff15 	stw	r2,-4(fp)
  80a764:	0000e806 	br	80ab08 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  80a768:	e0bffe03 	ldbu	r2,-8(fp)
  80a76c:	10800530 	cmpltui	r2,r2,20
  80a770:	1000061e 	bne	r2,zero,80a78c <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  80a774:	e0bffe03 	ldbu	r2,-8(fp)
  80a778:	10803fe0 	cmpeqi	r2,r2,255
  80a77c:	1000031e 	bne	r2,zero,80a78c <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  80a780:	00800a84 	movi	r2,42
  80a784:	e0bfff15 	stw	r2,-4(fp)
  80a788:	0000df06 	br	80ab08 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a78c:	0005303a 	rdctl	r2,status
  80a790:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a794:	e0fffa17 	ldw	r3,-24(fp)
  80a798:	00bfff84 	movi	r2,-2
  80a79c:	1884703a 	and	r2,r3,r2
  80a7a0:	1001703a 	wrctl	status,r2
  
  return context;
  80a7a4:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80a7a8:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  80a7ac:	e0bffe03 	ldbu	r2,-8(fp)
  80a7b0:	10803fd8 	cmpnei	r2,r2,255
  80a7b4:	1000051e 	bne	r2,zero,80a7cc <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  80a7b8:	00802074 	movhi	r2,129
  80a7bc:	10899e04 	addi	r2,r2,9848
  80a7c0:	10800017 	ldw	r2,0(r2)
  80a7c4:	10800c83 	ldbu	r2,50(r2)
  80a7c8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80a7cc:	e0bffe03 	ldbu	r2,-8(fp)
  80a7d0:	00c02074 	movhi	r3,129
  80a7d4:	18de2404 	addi	r3,r3,30864
  80a7d8:	1085883a 	add	r2,r2,r2
  80a7dc:	1085883a 	add	r2,r2,r2
  80a7e0:	10c5883a 	add	r2,r2,r3
  80a7e4:	10800017 	ldw	r2,0(r2)
  80a7e8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  80a7ec:	e0bffc17 	ldw	r2,-16(fp)
  80a7f0:	1004c03a 	cmpne	r2,r2,zero
  80a7f4:	1000071e 	bne	r2,zero,80a814 <OSTaskDel+0x100>
  80a7f8:	e0bffb17 	ldw	r2,-20(fp)
  80a7fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a800:	e0bff917 	ldw	r2,-28(fp)
  80a804:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80a808:	008010c4 	movi	r2,67
  80a80c:	e0bfff15 	stw	r2,-4(fp)
  80a810:	0000bd06 	br	80ab08 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  80a814:	e0bffc17 	ldw	r2,-16(fp)
  80a818:	10800058 	cmpnei	r2,r2,1
  80a81c:	1000071e 	bne	r2,zero,80a83c <OSTaskDel+0x128>
  80a820:	e0bffb17 	ldw	r2,-20(fp)
  80a824:	e0bff815 	stw	r2,-32(fp)
  80a828:	e0bff817 	ldw	r2,-32(fp)
  80a82c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80a830:	00800f44 	movi	r2,61
  80a834:	e0bfff15 	stw	r2,-4(fp)
  80a838:	0000b306 	br	80ab08 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  80a83c:	e0bffc17 	ldw	r2,-16(fp)
  80a840:	10800d03 	ldbu	r2,52(r2)
  80a844:	11003fcc 	andi	r4,r2,255
  80a848:	e0bffc17 	ldw	r2,-16(fp)
  80a84c:	10800d03 	ldbu	r2,52(r2)
  80a850:	10c03fcc 	andi	r3,r2,255
  80a854:	00802074 	movhi	r2,129
  80a858:	10899b44 	addi	r2,r2,9837
  80a85c:	10c5883a 	add	r2,r2,r3
  80a860:	10800003 	ldbu	r2,0(r2)
  80a864:	1007883a 	mov	r3,r2
  80a868:	e0bffc17 	ldw	r2,-16(fp)
  80a86c:	10800d43 	ldbu	r2,53(r2)
  80a870:	0084303a 	nor	r2,zero,r2
  80a874:	1884703a 	and	r2,r3,r2
  80a878:	1007883a 	mov	r3,r2
  80a87c:	00802074 	movhi	r2,129
  80a880:	10899b44 	addi	r2,r2,9837
  80a884:	1105883a 	add	r2,r2,r4
  80a888:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  80a88c:	e0bffc17 	ldw	r2,-16(fp)
  80a890:	10800d03 	ldbu	r2,52(r2)
  80a894:	10c03fcc 	andi	r3,r2,255
  80a898:	00802074 	movhi	r2,129
  80a89c:	10899b44 	addi	r2,r2,9837
  80a8a0:	10c5883a 	add	r2,r2,r3
  80a8a4:	10800003 	ldbu	r2,0(r2)
  80a8a8:	10803fcc 	andi	r2,r2,255
  80a8ac:	1004c03a 	cmpne	r2,r2,zero
  80a8b0:	10000c1e 	bne	r2,zero,80a8e4 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  80a8b4:	e0bffc17 	ldw	r2,-16(fp)
  80a8b8:	10800d83 	ldbu	r2,54(r2)
  80a8bc:	0084303a 	nor	r2,zero,r2
  80a8c0:	1007883a 	mov	r3,r2
  80a8c4:	00802074 	movhi	r2,129
  80a8c8:	10899b04 	addi	r2,r2,9836
  80a8cc:	10800003 	ldbu	r2,0(r2)
  80a8d0:	1884703a 	and	r2,r3,r2
  80a8d4:	1007883a 	mov	r3,r2
  80a8d8:	00802074 	movhi	r2,129
  80a8dc:	10899b04 	addi	r2,r2,9836
  80a8e0:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  80a8e4:	e0bffc17 	ldw	r2,-16(fp)
  80a8e8:	10800717 	ldw	r2,28(r2)
  80a8ec:	1005003a 	cmpeq	r2,r2,zero
  80a8f0:	1000041e 	bne	r2,zero,80a904 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  80a8f4:	e0bffc17 	ldw	r2,-16(fp)
  80a8f8:	11400717 	ldw	r5,28(r2)
  80a8fc:	e13ffc17 	ldw	r4,-16(fp)
  80a900:	0804ecc0 	call	804ecc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  80a904:	e0bffc17 	ldw	r2,-16(fp)
  80a908:	10800817 	ldw	r2,32(r2)
  80a90c:	1005003a 	cmpeq	r2,r2,zero
  80a910:	1000041e 	bne	r2,zero,80a924 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80a914:	e0bffc17 	ldw	r2,-16(fp)
  80a918:	11400817 	ldw	r5,32(r2)
  80a91c:	e13ffc17 	ldw	r4,-16(fp)
  80a920:	0804f840 	call	804f84 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  80a924:	e0bffc17 	ldw	r2,-16(fp)
  80a928:	10800a17 	ldw	r2,40(r2)
  80a92c:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  80a930:	e0bffd17 	ldw	r2,-12(fp)
  80a934:	1005003a 	cmpeq	r2,r2,zero
  80a938:	1000021e 	bne	r2,zero,80a944 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  80a93c:	e13ffd17 	ldw	r4,-12(fp)
  80a940:	08076180 	call	807618 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  80a944:	e0bffc17 	ldw	r2,-16(fp)
  80a948:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  80a94c:	e0bffc17 	ldw	r2,-16(fp)
  80a950:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80a954:	e0bffc17 	ldw	r2,-16(fp)
  80a958:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  80a95c:	00802074 	movhi	r2,129
  80a960:	10898f04 	addi	r2,r2,9788
  80a964:	10800003 	ldbu	r2,0(r2)
  80a968:	10803fcc 	andi	r2,r2,255
  80a96c:	10803fe0 	cmpeqi	r2,r2,255
  80a970:	1000081e 	bne	r2,zero,80a994 <OSTaskDel+0x280>
        OSLockNesting++;
  80a974:	00802074 	movhi	r2,129
  80a978:	10898f04 	addi	r2,r2,9788
  80a97c:	10800003 	ldbu	r2,0(r2)
  80a980:	10800044 	addi	r2,r2,1
  80a984:	1007883a 	mov	r3,r2
  80a988:	00802074 	movhi	r2,129
  80a98c:	10898f04 	addi	r2,r2,9788
  80a990:	10c00005 	stb	r3,0(r2)
  80a994:	e0bffb17 	ldw	r2,-20(fp)
  80a998:	e0bff715 	stw	r2,-36(fp)
  80a99c:	e0bff717 	ldw	r2,-36(fp)
  80a9a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  80a9a4:	0804ab80 	call	804ab8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a9a8:	0005303a 	rdctl	r2,status
  80a9ac:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a9b0:	e0fff617 	ldw	r3,-40(fp)
  80a9b4:	00bfff84 	movi	r2,-2
  80a9b8:	1884703a 	and	r2,r3,r2
  80a9bc:	1001703a 	wrctl	status,r2
  
  return context;
  80a9c0:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  80a9c4:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  80a9c8:	00802074 	movhi	r2,129
  80a9cc:	10898f04 	addi	r2,r2,9788
  80a9d0:	10800003 	ldbu	r2,0(r2)
  80a9d4:	10803fcc 	andi	r2,r2,255
  80a9d8:	1005003a 	cmpeq	r2,r2,zero
  80a9dc:	1000081e 	bne	r2,zero,80aa00 <OSTaskDel+0x2ec>
        OSLockNesting--;
  80a9e0:	00802074 	movhi	r2,129
  80a9e4:	10898f04 	addi	r2,r2,9788
  80a9e8:	10800003 	ldbu	r2,0(r2)
  80a9ec:	10bfffc4 	addi	r2,r2,-1
  80a9f0:	1007883a 	mov	r3,r2
  80a9f4:	00802074 	movhi	r2,129
  80a9f8:	10898f04 	addi	r2,r2,9788
  80a9fc:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  80aa00:	e13ffc17 	ldw	r4,-16(fp)
  80aa04:	080e5800 	call	80e580 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  80aa08:	00802074 	movhi	r2,129
  80aa0c:	10899744 	addi	r2,r2,9821
  80aa10:	10800003 	ldbu	r2,0(r2)
  80aa14:	10bfffc4 	addi	r2,r2,-1
  80aa18:	1007883a 	mov	r3,r2
  80aa1c:	00802074 	movhi	r2,129
  80aa20:	10899744 	addi	r2,r2,9821
  80aa24:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  80aa28:	e0bffe03 	ldbu	r2,-8(fp)
  80aa2c:	00c02074 	movhi	r3,129
  80aa30:	18de2404 	addi	r3,r3,30864
  80aa34:	1085883a 	add	r2,r2,r2
  80aa38:	1085883a 	add	r2,r2,r2
  80aa3c:	10c5883a 	add	r2,r2,r3
  80aa40:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  80aa44:	e0bffc17 	ldw	r2,-16(fp)
  80aa48:	10800617 	ldw	r2,24(r2)
  80aa4c:	1004c03a 	cmpne	r2,r2,zero
  80aa50:	1000091e 	bne	r2,zero,80aa78 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  80aa54:	e0bffc17 	ldw	r2,-16(fp)
  80aa58:	10800517 	ldw	r2,20(r2)
  80aa5c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  80aa60:	e0bffc17 	ldw	r2,-16(fp)
  80aa64:	10c00517 	ldw	r3,20(r2)
  80aa68:	00802074 	movhi	r2,129
  80aa6c:	10899204 	addi	r2,r2,9800
  80aa70:	10c00015 	stw	r3,0(r2)
  80aa74:	00000a06 	br	80aaa0 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  80aa78:	e0bffc17 	ldw	r2,-16(fp)
  80aa7c:	10c00617 	ldw	r3,24(r2)
  80aa80:	e0bffc17 	ldw	r2,-16(fp)
  80aa84:	10800517 	ldw	r2,20(r2)
  80aa88:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  80aa8c:	e0bffc17 	ldw	r2,-16(fp)
  80aa90:	10c00517 	ldw	r3,20(r2)
  80aa94:	e0bffc17 	ldw	r2,-16(fp)
  80aa98:	10800617 	ldw	r2,24(r2)
  80aa9c:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  80aaa0:	00802074 	movhi	r2,129
  80aaa4:	10899604 	addi	r2,r2,9816
  80aaa8:	10c00017 	ldw	r3,0(r2)
  80aaac:	e0bffc17 	ldw	r2,-16(fp)
  80aab0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  80aab4:	00c02074 	movhi	r3,129
  80aab8:	18c99604 	addi	r3,r3,9816
  80aabc:	e0bffc17 	ldw	r2,-16(fp)
  80aac0:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  80aac4:	e0fffc17 	ldw	r3,-16(fp)
  80aac8:	00800fc4 	movi	r2,63
  80aacc:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80aad0:	e0bffc17 	ldw	r2,-16(fp)
  80aad4:	10001345 	stb	zero,77(r2)
  80aad8:	e0bffb17 	ldw	r2,-20(fp)
  80aadc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aae0:	e0bff517 	ldw	r2,-44(fp)
  80aae4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80aae8:	00802074 	movhi	r2,129
  80aaec:	10898f44 	addi	r2,r2,9789
  80aaf0:	10800003 	ldbu	r2,0(r2)
  80aaf4:	10803fcc 	andi	r2,r2,255
  80aaf8:	10800058 	cmpnei	r2,r2,1
  80aafc:	1000011e 	bne	r2,zero,80ab04 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  80ab00:	08055140 	call	805514 <OS_Sched>
    }
    return (OS_ERR_NONE);
  80ab04:	e03fff15 	stw	zero,-4(fp)
  80ab08:	e0bfff17 	ldw	r2,-4(fp)
}
  80ab0c:	e037883a 	mov	sp,fp
  80ab10:	dfc00117 	ldw	ra,4(sp)
  80ab14:	df000017 	ldw	fp,0(sp)
  80ab18:	dec00204 	addi	sp,sp,8
  80ab1c:	f800283a 	ret

0080ab20 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  80ab20:	defff404 	addi	sp,sp,-48
  80ab24:	df000b15 	stw	fp,44(sp)
  80ab28:	df000b04 	addi	fp,sp,44
  80ab2c:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ab30:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  80ab34:	e0bffe03 	ldbu	r2,-8(fp)
  80ab38:	10800518 	cmpnei	r2,r2,20
  80ab3c:	1000031e 	bne	r2,zero,80ab4c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  80ab40:	00800f84 	movi	r2,62
  80ab44:	e0bfff15 	stw	r2,-4(fp)
  80ab48:	00004c06 	br	80ac7c <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80ab4c:	e0bffe03 	ldbu	r2,-8(fp)
  80ab50:	10800530 	cmpltui	r2,r2,20
  80ab54:	1000061e 	bne	r2,zero,80ab70 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  80ab58:	e0bffe03 	ldbu	r2,-8(fp)
  80ab5c:	10803fe0 	cmpeqi	r2,r2,255
  80ab60:	1000031e 	bne	r2,zero,80ab70 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  80ab64:	00800a84 	movi	r2,42
  80ab68:	e0bfff15 	stw	r2,-4(fp)
  80ab6c:	00004306 	br	80ac7c <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  80ab70:	e0bffe03 	ldbu	r2,-8(fp)
  80ab74:	10803fd8 	cmpnei	r2,r2,255
  80ab78:	1000141e 	bne	r2,zero,80abcc <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ab7c:	0005303a 	rdctl	r2,status
  80ab80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ab84:	e0fffa17 	ldw	r3,-24(fp)
  80ab88:	00bfff84 	movi	r2,-2
  80ab8c:	1884703a 	and	r2,r3,r2
  80ab90:	1001703a 	wrctl	status,r2
  
  return context;
  80ab94:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  80ab98:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  80ab9c:	00802074 	movhi	r2,129
  80aba0:	10899e04 	addi	r2,r2,9848
  80aba4:	10800017 	ldw	r2,0(r2)
  80aba8:	10800dc3 	ldbu	r2,55(r2)
  80abac:	e0bffd05 	stb	r2,-12(fp)
  80abb0:	e0bffb17 	ldw	r2,-20(fp)
  80abb4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80abb8:	e0bff917 	ldw	r2,-28(fp)
  80abbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  80abc0:	e0bffd03 	ldbu	r2,-12(fp)
  80abc4:	e0bfff15 	stw	r2,-4(fp)
  80abc8:	00002c06 	br	80ac7c <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80abcc:	0005303a 	rdctl	r2,status
  80abd0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80abd4:	e0fff817 	ldw	r3,-32(fp)
  80abd8:	00bfff84 	movi	r2,-2
  80abdc:	1884703a 	and	r2,r3,r2
  80abe0:	1001703a 	wrctl	status,r2
  
  return context;
  80abe4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  80abe8:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  80abec:	e0bffe03 	ldbu	r2,-8(fp)
  80abf0:	00c02074 	movhi	r3,129
  80abf4:	18de2404 	addi	r3,r3,30864
  80abf8:	1085883a 	add	r2,r2,r2
  80abfc:	1085883a 	add	r2,r2,r2
  80ac00:	10c5883a 	add	r2,r2,r3
  80ac04:	10800017 	ldw	r2,0(r2)
  80ac08:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  80ac0c:	e0bffc17 	ldw	r2,-16(fp)
  80ac10:	1004c03a 	cmpne	r2,r2,zero
  80ac14:	1000071e 	bne	r2,zero,80ac34 <OSTaskDelReq+0x114>
  80ac18:	e0bffb17 	ldw	r2,-20(fp)
  80ac1c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ac20:	e0bff717 	ldw	r2,-36(fp)
  80ac24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  80ac28:	008010c4 	movi	r2,67
  80ac2c:	e0bfff15 	stw	r2,-4(fp)
  80ac30:	00001206 	br	80ac7c <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  80ac34:	e0bffc17 	ldw	r2,-16(fp)
  80ac38:	10800058 	cmpnei	r2,r2,1
  80ac3c:	1000071e 	bne	r2,zero,80ac5c <OSTaskDelReq+0x13c>
  80ac40:	e0bffb17 	ldw	r2,-20(fp)
  80ac44:	e0bff615 	stw	r2,-40(fp)
  80ac48:	e0bff617 	ldw	r2,-40(fp)
  80ac4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80ac50:	00800f44 	movi	r2,61
  80ac54:	e0bfff15 	stw	r2,-4(fp)
  80ac58:	00000806 	br	80ac7c <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  80ac5c:	e0fffc17 	ldw	r3,-16(fp)
  80ac60:	00800fc4 	movi	r2,63
  80ac64:	18800dc5 	stb	r2,55(r3)
  80ac68:	e0bffb17 	ldw	r2,-20(fp)
  80ac6c:	e0bff515 	stw	r2,-44(fp)
  80ac70:	e0bff517 	ldw	r2,-44(fp)
  80ac74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80ac78:	e03fff15 	stw	zero,-4(fp)
  80ac7c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ac80:	e037883a 	mov	sp,fp
  80ac84:	df000017 	ldw	fp,0(sp)
  80ac88:	dec00104 	addi	sp,sp,4
  80ac8c:	f800283a 	ret

0080ac90 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  80ac90:	defff304 	addi	sp,sp,-52
  80ac94:	dfc00c15 	stw	ra,48(sp)
  80ac98:	df000b15 	stw	fp,44(sp)
  80ac9c:	df000b04 	addi	fp,sp,44
  80aca0:	e17ffd15 	stw	r5,-12(fp)
  80aca4:	e1bffe15 	stw	r6,-8(fp)
  80aca8:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  80acac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  80acb0:	e0bffe17 	ldw	r2,-8(fp)
  80acb4:	1004c03a 	cmpne	r2,r2,zero
  80acb8:	1000021e 	bne	r2,zero,80acc4 <OSTaskNameGet+0x34>
        return (0);
  80acbc:	e03fff15 	stw	zero,-4(fp)
  80acc0:	00005b06 	br	80ae30 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  80acc4:	e0bffc03 	ldbu	r2,-16(fp)
  80acc8:	10800570 	cmpltui	r2,r2,21
  80accc:	1000081e 	bne	r2,zero,80acf0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  80acd0:	e0bffc03 	ldbu	r2,-16(fp)
  80acd4:	10803fe0 	cmpeqi	r2,r2,255
  80acd8:	1000051e 	bne	r2,zero,80acf0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  80acdc:	e0fffe17 	ldw	r3,-8(fp)
  80ace0:	00800a84 	movi	r2,42
  80ace4:	18800005 	stb	r2,0(r3)
            return (0);
  80ace8:	e03fff15 	stw	zero,-4(fp)
  80acec:	00005006 	br	80ae30 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  80acf0:	e0bffd17 	ldw	r2,-12(fp)
  80acf4:	1004c03a 	cmpne	r2,r2,zero
  80acf8:	1000051e 	bne	r2,zero,80ad10 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  80acfc:	e0fffe17 	ldw	r3,-8(fp)
  80ad00:	00800304 	movi	r2,12
  80ad04:	18800005 	stb	r2,0(r3)
        return (0);
  80ad08:	e03fff15 	stw	zero,-4(fp)
  80ad0c:	00004806 	br	80ae30 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  80ad10:	00802074 	movhi	r2,129
  80ad14:	10899d04 	addi	r2,r2,9844
  80ad18:	10800003 	ldbu	r2,0(r2)
  80ad1c:	10803fcc 	andi	r2,r2,255
  80ad20:	1005003a 	cmpeq	r2,r2,zero
  80ad24:	1000051e 	bne	r2,zero,80ad3c <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  80ad28:	e0fffe17 	ldw	r3,-8(fp)
  80ad2c:	00800444 	movi	r2,17
  80ad30:	18800005 	stb	r2,0(r3)
        return (0);
  80ad34:	e03fff15 	stw	zero,-4(fp)
  80ad38:	00003d06 	br	80ae30 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ad3c:	0005303a 	rdctl	r2,status
  80ad40:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ad44:	e0fff817 	ldw	r3,-32(fp)
  80ad48:	00bfff84 	movi	r2,-2
  80ad4c:	1884703a 	and	r2,r3,r2
  80ad50:	1001703a 	wrctl	status,r2
  
  return context;
  80ad54:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  80ad58:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  80ad5c:	e0bffc03 	ldbu	r2,-16(fp)
  80ad60:	10803fd8 	cmpnei	r2,r2,255
  80ad64:	1000051e 	bne	r2,zero,80ad7c <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  80ad68:	00802074 	movhi	r2,129
  80ad6c:	10899e04 	addi	r2,r2,9848
  80ad70:	10800017 	ldw	r2,0(r2)
  80ad74:	10800c83 	ldbu	r2,50(r2)
  80ad78:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80ad7c:	e0bffc03 	ldbu	r2,-16(fp)
  80ad80:	00c02074 	movhi	r3,129
  80ad84:	18de2404 	addi	r3,r3,30864
  80ad88:	1085883a 	add	r2,r2,r2
  80ad8c:	1085883a 	add	r2,r2,r2
  80ad90:	10c5883a 	add	r2,r2,r3
  80ad94:	10800017 	ldw	r2,0(r2)
  80ad98:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  80ad9c:	e0bffb17 	ldw	r2,-20(fp)
  80ada0:	1004c03a 	cmpne	r2,r2,zero
  80ada4:	1000091e 	bne	r2,zero,80adcc <OSTaskNameGet+0x13c>
  80ada8:	e0bff917 	ldw	r2,-28(fp)
  80adac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80adb0:	e0bff717 	ldw	r2,-36(fp)
  80adb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80adb8:	e0fffe17 	ldw	r3,-8(fp)
  80adbc:	008010c4 	movi	r2,67
  80adc0:	18800005 	stb	r2,0(r3)
        return (0);
  80adc4:	e03fff15 	stw	zero,-4(fp)
  80adc8:	00001906 	br	80ae30 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  80adcc:	e0bffb17 	ldw	r2,-20(fp)
  80add0:	10800058 	cmpnei	r2,r2,1
  80add4:	1000091e 	bne	r2,zero,80adfc <OSTaskNameGet+0x16c>
  80add8:	e0bff917 	ldw	r2,-28(fp)
  80addc:	e0bff615 	stw	r2,-40(fp)
  80ade0:	e0bff617 	ldw	r2,-40(fp)
  80ade4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80ade8:	e0fffe17 	ldw	r3,-8(fp)
  80adec:	008010c4 	movi	r2,67
  80adf0:	18800005 	stb	r2,0(r3)
        return (0);
  80adf4:	e03fff15 	stw	zero,-4(fp)
  80adf8:	00000d06 	br	80ae30 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  80adfc:	e0bffb17 	ldw	r2,-20(fp)
  80ae00:	11401304 	addi	r5,r2,76
  80ae04:	e13ffd17 	ldw	r4,-12(fp)
  80ae08:	08056580 	call	805658 <OS_StrCopy>
  80ae0c:	e0bffa05 	stb	r2,-24(fp)
  80ae10:	e0bff917 	ldw	r2,-28(fp)
  80ae14:	e0bff515 	stw	r2,-44(fp)
  80ae18:	e0bff517 	ldw	r2,-44(fp)
  80ae1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80ae20:	e0bffe17 	ldw	r2,-8(fp)
  80ae24:	10000005 	stb	zero,0(r2)
    return (len);
  80ae28:	e0bffa03 	ldbu	r2,-24(fp)
  80ae2c:	e0bfff15 	stw	r2,-4(fp)
  80ae30:	e0bfff17 	ldw	r2,-4(fp)
}
  80ae34:	e037883a 	mov	sp,fp
  80ae38:	dfc00117 	ldw	ra,4(sp)
  80ae3c:	df000017 	ldw	fp,0(sp)
  80ae40:	dec00204 	addi	sp,sp,8
  80ae44:	f800283a 	ret

0080ae48 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  80ae48:	defff304 	addi	sp,sp,-52
  80ae4c:	dfc00c15 	stw	ra,48(sp)
  80ae50:	df000b15 	stw	fp,44(sp)
  80ae54:	df000b04 	addi	fp,sp,44
  80ae58:	e17ffe15 	stw	r5,-8(fp)
  80ae5c:	e1bfff15 	stw	r6,-4(fp)
  80ae60:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  80ae64:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80ae68:	e0bfff17 	ldw	r2,-4(fp)
  80ae6c:	1005003a 	cmpeq	r2,r2,zero
  80ae70:	1000611e 	bne	r2,zero,80aff8 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  80ae74:	e0bffd03 	ldbu	r2,-12(fp)
  80ae78:	10800570 	cmpltui	r2,r2,21
  80ae7c:	1000071e 	bne	r2,zero,80ae9c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  80ae80:	e0bffd03 	ldbu	r2,-12(fp)
  80ae84:	10803fe0 	cmpeqi	r2,r2,255
  80ae88:	1000041e 	bne	r2,zero,80ae9c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  80ae8c:	e0ffff17 	ldw	r3,-4(fp)
  80ae90:	00800a84 	movi	r2,42
  80ae94:	18800005 	stb	r2,0(r3)
            return;
  80ae98:	00005706 	br	80aff8 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  80ae9c:	e0bffe17 	ldw	r2,-8(fp)
  80aea0:	1004c03a 	cmpne	r2,r2,zero
  80aea4:	1000041e 	bne	r2,zero,80aeb8 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  80aea8:	e0ffff17 	ldw	r3,-4(fp)
  80aeac:	00800304 	movi	r2,12
  80aeb0:	18800005 	stb	r2,0(r3)
        return;
  80aeb4:	00005006 	br	80aff8 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  80aeb8:	00802074 	movhi	r2,129
  80aebc:	10899d04 	addi	r2,r2,9844
  80aec0:	10800003 	ldbu	r2,0(r2)
  80aec4:	10803fcc 	andi	r2,r2,255
  80aec8:	1005003a 	cmpeq	r2,r2,zero
  80aecc:	1000041e 	bne	r2,zero,80aee0 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  80aed0:	e0ffff17 	ldw	r3,-4(fp)
  80aed4:	00800484 	movi	r2,18
  80aed8:	18800005 	stb	r2,0(r3)
        return;
  80aedc:	00004606 	br	80aff8 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aee0:	0005303a 	rdctl	r2,status
  80aee4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aee8:	e0fff917 	ldw	r3,-28(fp)
  80aeec:	00bfff84 	movi	r2,-2
  80aef0:	1884703a 	and	r2,r3,r2
  80aef4:	1001703a 	wrctl	status,r2
  
  return context;
  80aef8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80aefc:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  80af00:	e0bffd03 	ldbu	r2,-12(fp)
  80af04:	10803fd8 	cmpnei	r2,r2,255
  80af08:	1000051e 	bne	r2,zero,80af20 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  80af0c:	00802074 	movhi	r2,129
  80af10:	10899e04 	addi	r2,r2,9848
  80af14:	10800017 	ldw	r2,0(r2)
  80af18:	10800c83 	ldbu	r2,50(r2)
  80af1c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80af20:	e0bffd03 	ldbu	r2,-12(fp)
  80af24:	00c02074 	movhi	r3,129
  80af28:	18de2404 	addi	r3,r3,30864
  80af2c:	1085883a 	add	r2,r2,r2
  80af30:	1085883a 	add	r2,r2,r2
  80af34:	10c5883a 	add	r2,r2,r3
  80af38:	10800017 	ldw	r2,0(r2)
  80af3c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  80af40:	e0bffb17 	ldw	r2,-20(fp)
  80af44:	1004c03a 	cmpne	r2,r2,zero
  80af48:	1000081e 	bne	r2,zero,80af6c <OSTaskNameSet+0x124>
  80af4c:	e0bffa17 	ldw	r2,-24(fp)
  80af50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80af54:	e0bff817 	ldw	r2,-32(fp)
  80af58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80af5c:	e0ffff17 	ldw	r3,-4(fp)
  80af60:	008010c4 	movi	r2,67
  80af64:	18800005 	stb	r2,0(r3)
        return;
  80af68:	00002306 	br	80aff8 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  80af6c:	e0bffb17 	ldw	r2,-20(fp)
  80af70:	10800058 	cmpnei	r2,r2,1
  80af74:	1000081e 	bne	r2,zero,80af98 <OSTaskNameSet+0x150>
  80af78:	e0bffa17 	ldw	r2,-24(fp)
  80af7c:	e0bff715 	stw	r2,-36(fp)
  80af80:	e0bff717 	ldw	r2,-36(fp)
  80af84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80af88:	e0ffff17 	ldw	r3,-4(fp)
  80af8c:	008010c4 	movi	r2,67
  80af90:	18800005 	stb	r2,0(r3)
        return;
  80af94:	00001806 	br	80aff8 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  80af98:	e13ffe17 	ldw	r4,-8(fp)
  80af9c:	08056d80 	call	8056d8 <OS_StrLen>
  80afa0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  80afa4:	e0bffc03 	ldbu	r2,-16(fp)
  80afa8:	10800830 	cmpltui	r2,r2,32
  80afac:	1000081e 	bne	r2,zero,80afd0 <OSTaskNameSet+0x188>
  80afb0:	e0bffa17 	ldw	r2,-24(fp)
  80afb4:	e0bff615 	stw	r2,-40(fp)
  80afb8:	e0bff617 	ldw	r2,-40(fp)
  80afbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  80afc0:	e0ffff17 	ldw	r3,-4(fp)
  80afc4:	00801044 	movi	r2,65
  80afc8:	18800005 	stb	r2,0(r3)
        return;
  80afcc:	00000a06 	br	80aff8 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  80afd0:	e0bffb17 	ldw	r2,-20(fp)
  80afd4:	11001304 	addi	r4,r2,76
  80afd8:	e17ffe17 	ldw	r5,-8(fp)
  80afdc:	08056580 	call	805658 <OS_StrCopy>
  80afe0:	e0bffa17 	ldw	r2,-24(fp)
  80afe4:	e0bff515 	stw	r2,-44(fp)
  80afe8:	e0bff517 	ldw	r2,-44(fp)
  80afec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80aff0:	e0bfff17 	ldw	r2,-4(fp)
  80aff4:	10000005 	stb	zero,0(r2)
}
  80aff8:	e037883a 	mov	sp,fp
  80affc:	dfc00117 	ldw	ra,4(sp)
  80b000:	df000017 	ldw	fp,0(sp)
  80b004:	dec00204 	addi	sp,sp,8
  80b008:	f800283a 	ret

0080b00c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  80b00c:	defff304 	addi	sp,sp,-52
  80b010:	dfc00c15 	stw	ra,48(sp)
  80b014:	df000b15 	stw	fp,44(sp)
  80b018:	df000b04 	addi	fp,sp,44
  80b01c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  80b020:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  80b024:	e0bffe03 	ldbu	r2,-8(fp)
  80b028:	10800530 	cmpltui	r2,r2,20
  80b02c:	1000031e 	bne	r2,zero,80b03c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  80b030:	00800a84 	movi	r2,42
  80b034:	e0bfff15 	stw	r2,-4(fp)
  80b038:	00007406 	br	80b20c <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b03c:	0005303a 	rdctl	r2,status
  80b040:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b044:	e0fffb17 	ldw	r3,-20(fp)
  80b048:	00bfff84 	movi	r2,-2
  80b04c:	1884703a 	and	r2,r3,r2
  80b050:	1001703a 	wrctl	status,r2
  
  return context;
  80b054:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80b058:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  80b05c:	e0bffe03 	ldbu	r2,-8(fp)
  80b060:	00c02074 	movhi	r3,129
  80b064:	18de2404 	addi	r3,r3,30864
  80b068:	1085883a 	add	r2,r2,r2
  80b06c:	1085883a 	add	r2,r2,r2
  80b070:	10c5883a 	add	r2,r2,r3
  80b074:	10800017 	ldw	r2,0(r2)
  80b078:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  80b07c:	e0bffd17 	ldw	r2,-12(fp)
  80b080:	1004c03a 	cmpne	r2,r2,zero
  80b084:	1000071e 	bne	r2,zero,80b0a4 <OSTaskResume+0x98>
  80b088:	e0bffc17 	ldw	r2,-16(fp)
  80b08c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b090:	e0bffa17 	ldw	r2,-24(fp)
  80b094:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  80b098:	00801184 	movi	r2,70
  80b09c:	e0bfff15 	stw	r2,-4(fp)
  80b0a0:	00005a06 	br	80b20c <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  80b0a4:	e0bffd17 	ldw	r2,-12(fp)
  80b0a8:	10800058 	cmpnei	r2,r2,1
  80b0ac:	1000071e 	bne	r2,zero,80b0cc <OSTaskResume+0xc0>
  80b0b0:	e0bffc17 	ldw	r2,-16(fp)
  80b0b4:	e0bff915 	stw	r2,-28(fp)
  80b0b8:	e0bff917 	ldw	r2,-28(fp)
  80b0bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80b0c0:	008010c4 	movi	r2,67
  80b0c4:	e0bfff15 	stw	r2,-4(fp)
  80b0c8:	00005006 	br	80b20c <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  80b0cc:	e0bffd17 	ldw	r2,-12(fp)
  80b0d0:	10800c03 	ldbu	r2,48(r2)
  80b0d4:	10803fcc 	andi	r2,r2,255
  80b0d8:	1080020c 	andi	r2,r2,8
  80b0dc:	1005003a 	cmpeq	r2,r2,zero
  80b0e0:	1000441e 	bne	r2,zero,80b1f4 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  80b0e4:	e0bffd17 	ldw	r2,-12(fp)
  80b0e8:	10c00c03 	ldbu	r3,48(r2)
  80b0ec:	00bffdc4 	movi	r2,-9
  80b0f0:	1884703a 	and	r2,r3,r2
  80b0f4:	1007883a 	mov	r3,r2
  80b0f8:	e0bffd17 	ldw	r2,-12(fp)
  80b0fc:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  80b100:	e0bffd17 	ldw	r2,-12(fp)
  80b104:	10800c03 	ldbu	r2,48(r2)
  80b108:	10803fcc 	andi	r2,r2,255
  80b10c:	1004c03a 	cmpne	r2,r2,zero
  80b110:	1000321e 	bne	r2,zero,80b1dc <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  80b114:	e0bffd17 	ldw	r2,-12(fp)
  80b118:	10800b8b 	ldhu	r2,46(r2)
  80b11c:	10bfffcc 	andi	r2,r2,65535
  80b120:	1004c03a 	cmpne	r2,r2,zero
  80b124:	1000281e 	bne	r2,zero,80b1c8 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  80b128:	e0bffd17 	ldw	r2,-12(fp)
  80b12c:	10c00d83 	ldbu	r3,54(r2)
  80b130:	00802074 	movhi	r2,129
  80b134:	10899b04 	addi	r2,r2,9836
  80b138:	10800003 	ldbu	r2,0(r2)
  80b13c:	1884b03a 	or	r2,r3,r2
  80b140:	1007883a 	mov	r3,r2
  80b144:	00802074 	movhi	r2,129
  80b148:	10899b04 	addi	r2,r2,9836
  80b14c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80b150:	e0bffd17 	ldw	r2,-12(fp)
  80b154:	10800d03 	ldbu	r2,52(r2)
  80b158:	11003fcc 	andi	r4,r2,255
  80b15c:	e0bffd17 	ldw	r2,-12(fp)
  80b160:	10800d03 	ldbu	r2,52(r2)
  80b164:	10c03fcc 	andi	r3,r2,255
  80b168:	00802074 	movhi	r2,129
  80b16c:	10899b44 	addi	r2,r2,9837
  80b170:	10c5883a 	add	r2,r2,r3
  80b174:	10c00003 	ldbu	r3,0(r2)
  80b178:	e0bffd17 	ldw	r2,-12(fp)
  80b17c:	10800d43 	ldbu	r2,53(r2)
  80b180:	1884b03a 	or	r2,r3,r2
  80b184:	1007883a 	mov	r3,r2
  80b188:	00802074 	movhi	r2,129
  80b18c:	10899b44 	addi	r2,r2,9837
  80b190:	1105883a 	add	r2,r2,r4
  80b194:	10c00005 	stb	r3,0(r2)
  80b198:	e0bffc17 	ldw	r2,-16(fp)
  80b19c:	e0bff815 	stw	r2,-32(fp)
  80b1a0:	e0bff817 	ldw	r2,-32(fp)
  80b1a4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  80b1a8:	00802074 	movhi	r2,129
  80b1ac:	10898f44 	addi	r2,r2,9789
  80b1b0:	10800003 	ldbu	r2,0(r2)
  80b1b4:	10803fcc 	andi	r2,r2,255
  80b1b8:	10800058 	cmpnei	r2,r2,1
  80b1bc:	10000b1e 	bne	r2,zero,80b1ec <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  80b1c0:	08055140 	call	805514 <OS_Sched>
  80b1c4:	00000906 	br	80b1ec <OSTaskResume+0x1e0>
  80b1c8:	e0bffc17 	ldw	r2,-16(fp)
  80b1cc:	e0bff715 	stw	r2,-36(fp)
  80b1d0:	e0bff717 	ldw	r2,-36(fp)
  80b1d4:	1001703a 	wrctl	status,r2
  80b1d8:	00000406 	br	80b1ec <OSTaskResume+0x1e0>
  80b1dc:	e0bffc17 	ldw	r2,-16(fp)
  80b1e0:	e0bff615 	stw	r2,-40(fp)
  80b1e4:	e0bff617 	ldw	r2,-40(fp)
  80b1e8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  80b1ec:	e03fff15 	stw	zero,-4(fp)
  80b1f0:	00000606 	br	80b20c <OSTaskResume+0x200>
  80b1f4:	e0bffc17 	ldw	r2,-16(fp)
  80b1f8:	e0bff515 	stw	r2,-44(fp)
  80b1fc:	e0bff517 	ldw	r2,-44(fp)
  80b200:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  80b204:	00801104 	movi	r2,68
  80b208:	e0bfff15 	stw	r2,-4(fp)
  80b20c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b210:	e037883a 	mov	sp,fp
  80b214:	dfc00117 	ldw	ra,4(sp)
  80b218:	df000017 	ldw	fp,0(sp)
  80b21c:	dec00204 	addi	sp,sp,8
  80b220:	f800283a 	ret

0080b224 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  80b224:	defff204 	addi	sp,sp,-56
  80b228:	df000d15 	stw	fp,52(sp)
  80b22c:	df000d04 	addi	fp,sp,52
  80b230:	e17ffe15 	stw	r5,-8(fp)
  80b234:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80b238:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  80b23c:	e0bffd03 	ldbu	r2,-12(fp)
  80b240:	10800570 	cmpltui	r2,r2,21
  80b244:	1000061e 	bne	r2,zero,80b260 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  80b248:	e0bffd03 	ldbu	r2,-12(fp)
  80b24c:	10803fe0 	cmpeqi	r2,r2,255
  80b250:	1000031e 	bne	r2,zero,80b260 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  80b254:	00800a84 	movi	r2,42
  80b258:	e0bfff15 	stw	r2,-4(fp)
  80b25c:	00006b06 	br	80b40c <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  80b260:	e0bffe17 	ldw	r2,-8(fp)
  80b264:	1004c03a 	cmpne	r2,r2,zero
  80b268:	1000031e 	bne	r2,zero,80b278 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  80b26c:	00800244 	movi	r2,9
  80b270:	e0bfff15 	stw	r2,-4(fp)
  80b274:	00006506 	br	80b40c <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  80b278:	e0bffe17 	ldw	r2,-8(fp)
  80b27c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  80b280:	e0bffe17 	ldw	r2,-8(fp)
  80b284:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b288:	0005303a 	rdctl	r2,status
  80b28c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b290:	e0fff717 	ldw	r3,-36(fp)
  80b294:	00bfff84 	movi	r2,-2
  80b298:	1884703a 	and	r2,r3,r2
  80b29c:	1001703a 	wrctl	status,r2
  
  return context;
  80b2a0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80b2a4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  80b2a8:	e0bffd03 	ldbu	r2,-12(fp)
  80b2ac:	10803fd8 	cmpnei	r2,r2,255
  80b2b0:	1000051e 	bne	r2,zero,80b2c8 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  80b2b4:	00802074 	movhi	r2,129
  80b2b8:	10899e04 	addi	r2,r2,9848
  80b2bc:	10800017 	ldw	r2,0(r2)
  80b2c0:	10800c83 	ldbu	r2,50(r2)
  80b2c4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80b2c8:	e0bffd03 	ldbu	r2,-12(fp)
  80b2cc:	00c02074 	movhi	r3,129
  80b2d0:	18de2404 	addi	r3,r3,30864
  80b2d4:	1085883a 	add	r2,r2,r2
  80b2d8:	1085883a 	add	r2,r2,r2
  80b2dc:	10c5883a 	add	r2,r2,r3
  80b2e0:	10800017 	ldw	r2,0(r2)
  80b2e4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  80b2e8:	e0bffc17 	ldw	r2,-16(fp)
  80b2ec:	1004c03a 	cmpne	r2,r2,zero
  80b2f0:	1000071e 	bne	r2,zero,80b310 <OSTaskStkChk+0xec>
  80b2f4:	e0bff817 	ldw	r2,-32(fp)
  80b2f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b2fc:	e0bff617 	ldw	r2,-40(fp)
  80b300:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80b304:	008010c4 	movi	r2,67
  80b308:	e0bfff15 	stw	r2,-4(fp)
  80b30c:	00003f06 	br	80b40c <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  80b310:	e0bffc17 	ldw	r2,-16(fp)
  80b314:	10800058 	cmpnei	r2,r2,1
  80b318:	1000071e 	bne	r2,zero,80b338 <OSTaskStkChk+0x114>
  80b31c:	e0bff817 	ldw	r2,-32(fp)
  80b320:	e0bff515 	stw	r2,-44(fp)
  80b324:	e0bff517 	ldw	r2,-44(fp)
  80b328:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80b32c:	008010c4 	movi	r2,67
  80b330:	e0bfff15 	stw	r2,-4(fp)
  80b334:	00003506 	br	80b40c <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  80b338:	e0bffc17 	ldw	r2,-16(fp)
  80b33c:	1080040b 	ldhu	r2,16(r2)
  80b340:	10bfffcc 	andi	r2,r2,65535
  80b344:	1080004c 	andi	r2,r2,1
  80b348:	1004c03a 	cmpne	r2,r2,zero
  80b34c:	1000071e 	bne	r2,zero,80b36c <OSTaskStkChk+0x148>
  80b350:	e0bff817 	ldw	r2,-32(fp)
  80b354:	e0bff415 	stw	r2,-48(fp)
  80b358:	e0bff417 	ldw	r2,-48(fp)
  80b35c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  80b360:	00801144 	movi	r2,69
  80b364:	e0bfff15 	stw	r2,-4(fp)
  80b368:	00002806 	br	80b40c <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  80b36c:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  80b370:	e0bffc17 	ldw	r2,-16(fp)
  80b374:	10800317 	ldw	r2,12(r2)
  80b378:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  80b37c:	e0bffc17 	ldw	r2,-16(fp)
  80b380:	10800217 	ldw	r2,8(r2)
  80b384:	e0bffb15 	stw	r2,-20(fp)
  80b388:	e0bff817 	ldw	r2,-32(fp)
  80b38c:	e0bff315 	stw	r2,-52(fp)
  80b390:	e0bff317 	ldw	r2,-52(fp)
  80b394:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80b398:	00000306 	br	80b3a8 <OSTaskStkChk+0x184>
        nfree++;
  80b39c:	e0bffa17 	ldw	r2,-24(fp)
  80b3a0:	10800044 	addi	r2,r2,1
  80b3a4:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80b3a8:	e0bffb17 	ldw	r2,-20(fp)
  80b3ac:	10800017 	ldw	r2,0(r2)
  80b3b0:	1005003a 	cmpeq	r2,r2,zero
  80b3b4:	1007883a 	mov	r3,r2
  80b3b8:	e0bffb17 	ldw	r2,-20(fp)
  80b3bc:	10800104 	addi	r2,r2,4
  80b3c0:	e0bffb15 	stw	r2,-20(fp)
  80b3c4:	18803fcc 	andi	r2,r3,255
  80b3c8:	1004c03a 	cmpne	r2,r2,zero
  80b3cc:	103ff31e 	bne	r2,zero,80b39c <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  80b3d0:	e0bffa17 	ldw	r2,-24(fp)
  80b3d4:	1085883a 	add	r2,r2,r2
  80b3d8:	1085883a 	add	r2,r2,r2
  80b3dc:	1007883a 	mov	r3,r2
  80b3e0:	e0bffe17 	ldw	r2,-8(fp)
  80b3e4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  80b3e8:	e0fff917 	ldw	r3,-28(fp)
  80b3ec:	e0bffa17 	ldw	r2,-24(fp)
  80b3f0:	1885c83a 	sub	r2,r3,r2
  80b3f4:	1085883a 	add	r2,r2,r2
  80b3f8:	1085883a 	add	r2,r2,r2
  80b3fc:	1007883a 	mov	r3,r2
  80b400:	e0bffe17 	ldw	r2,-8(fp)
  80b404:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  80b408:	e03fff15 	stw	zero,-4(fp)
  80b40c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b410:	e037883a 	mov	sp,fp
  80b414:	df000017 	ldw	fp,0(sp)
  80b418:	dec00104 	addi	sp,sp,4
  80b41c:	f800283a 	ret

0080b420 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  80b420:	defff404 	addi	sp,sp,-48
  80b424:	dfc00b15 	stw	ra,44(sp)
  80b428:	df000a15 	stw	fp,40(sp)
  80b42c:	df000a04 	addi	fp,sp,40
  80b430:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b434:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  80b438:	e0bffe03 	ldbu	r2,-8(fp)
  80b43c:	10800518 	cmpnei	r2,r2,20
  80b440:	1000031e 	bne	r2,zero,80b450 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  80b444:	008011c4 	movi	r2,71
  80b448:	e0bfff15 	stw	r2,-4(fp)
  80b44c:	00007906 	br	80b634 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80b450:	e0bffe03 	ldbu	r2,-8(fp)
  80b454:	10800530 	cmpltui	r2,r2,20
  80b458:	1000061e 	bne	r2,zero,80b474 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  80b45c:	e0bffe03 	ldbu	r2,-8(fp)
  80b460:	10803fe0 	cmpeqi	r2,r2,255
  80b464:	1000031e 	bne	r2,zero,80b474 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  80b468:	00800a84 	movi	r2,42
  80b46c:	e0bfff15 	stw	r2,-4(fp)
  80b470:	00007006 	br	80b634 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b474:	0005303a 	rdctl	r2,status
  80b478:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b47c:	e0fff917 	ldw	r3,-28(fp)
  80b480:	00bfff84 	movi	r2,-2
  80b484:	1884703a 	and	r2,r3,r2
  80b488:	1001703a 	wrctl	status,r2
  
  return context;
  80b48c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  80b490:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  80b494:	e0bffe03 	ldbu	r2,-8(fp)
  80b498:	10803fd8 	cmpnei	r2,r2,255
  80b49c:	1000081e 	bne	r2,zero,80b4c0 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  80b4a0:	00802074 	movhi	r2,129
  80b4a4:	10899e04 	addi	r2,r2,9848
  80b4a8:	10800017 	ldw	r2,0(r2)
  80b4ac:	10800c83 	ldbu	r2,50(r2)
  80b4b0:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  80b4b4:	00800044 	movi	r2,1
  80b4b8:	e0bffd05 	stb	r2,-12(fp)
  80b4bc:	00000b06 	br	80b4ec <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  80b4c0:	00802074 	movhi	r2,129
  80b4c4:	10899e04 	addi	r2,r2,9848
  80b4c8:	10800017 	ldw	r2,0(r2)
  80b4cc:	10800c83 	ldbu	r2,50(r2)
  80b4d0:	10c03fcc 	andi	r3,r2,255
  80b4d4:	e0bffe03 	ldbu	r2,-8(fp)
  80b4d8:	1880031e 	bne	r3,r2,80b4e8 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  80b4dc:	00800044 	movi	r2,1
  80b4e0:	e0bffd05 	stb	r2,-12(fp)
  80b4e4:	00000106 	br	80b4ec <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  80b4e8:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80b4ec:	e0bffe03 	ldbu	r2,-8(fp)
  80b4f0:	00c02074 	movhi	r3,129
  80b4f4:	18de2404 	addi	r3,r3,30864
  80b4f8:	1085883a 	add	r2,r2,r2
  80b4fc:	1085883a 	add	r2,r2,r2
  80b500:	10c5883a 	add	r2,r2,r3
  80b504:	10800017 	ldw	r2,0(r2)
  80b508:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  80b50c:	e0bffc17 	ldw	r2,-16(fp)
  80b510:	1004c03a 	cmpne	r2,r2,zero
  80b514:	1000071e 	bne	r2,zero,80b534 <OSTaskSuspend+0x114>
  80b518:	e0bffa17 	ldw	r2,-24(fp)
  80b51c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b520:	e0bff817 	ldw	r2,-32(fp)
  80b524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  80b528:	00801204 	movi	r2,72
  80b52c:	e0bfff15 	stw	r2,-4(fp)
  80b530:	00004006 	br	80b634 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  80b534:	e0bffc17 	ldw	r2,-16(fp)
  80b538:	10800058 	cmpnei	r2,r2,1
  80b53c:	1000071e 	bne	r2,zero,80b55c <OSTaskSuspend+0x13c>
  80b540:	e0bffa17 	ldw	r2,-24(fp)
  80b544:	e0bff715 	stw	r2,-36(fp)
  80b548:	e0bff717 	ldw	r2,-36(fp)
  80b54c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80b550:	008010c4 	movi	r2,67
  80b554:	e0bfff15 	stw	r2,-4(fp)
  80b558:	00003606 	br	80b634 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  80b55c:	e0bffc17 	ldw	r2,-16(fp)
  80b560:	10800d03 	ldbu	r2,52(r2)
  80b564:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  80b568:	e13ffb03 	ldbu	r4,-20(fp)
  80b56c:	e0fffb03 	ldbu	r3,-20(fp)
  80b570:	00802074 	movhi	r2,129
  80b574:	10899b44 	addi	r2,r2,9837
  80b578:	10c5883a 	add	r2,r2,r3
  80b57c:	10800003 	ldbu	r2,0(r2)
  80b580:	1007883a 	mov	r3,r2
  80b584:	e0bffc17 	ldw	r2,-16(fp)
  80b588:	10800d43 	ldbu	r2,53(r2)
  80b58c:	0084303a 	nor	r2,zero,r2
  80b590:	1884703a 	and	r2,r3,r2
  80b594:	1007883a 	mov	r3,r2
  80b598:	00802074 	movhi	r2,129
  80b59c:	10899b44 	addi	r2,r2,9837
  80b5a0:	1105883a 	add	r2,r2,r4
  80b5a4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80b5a8:	e0fffb03 	ldbu	r3,-20(fp)
  80b5ac:	00802074 	movhi	r2,129
  80b5b0:	10899b44 	addi	r2,r2,9837
  80b5b4:	10c5883a 	add	r2,r2,r3
  80b5b8:	10800003 	ldbu	r2,0(r2)
  80b5bc:	10803fcc 	andi	r2,r2,255
  80b5c0:	1004c03a 	cmpne	r2,r2,zero
  80b5c4:	10000c1e 	bne	r2,zero,80b5f8 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  80b5c8:	e0bffc17 	ldw	r2,-16(fp)
  80b5cc:	10800d83 	ldbu	r2,54(r2)
  80b5d0:	0084303a 	nor	r2,zero,r2
  80b5d4:	1007883a 	mov	r3,r2
  80b5d8:	00802074 	movhi	r2,129
  80b5dc:	10899b04 	addi	r2,r2,9836
  80b5e0:	10800003 	ldbu	r2,0(r2)
  80b5e4:	1884703a 	and	r2,r3,r2
  80b5e8:	1007883a 	mov	r3,r2
  80b5ec:	00802074 	movhi	r2,129
  80b5f0:	10899b04 	addi	r2,r2,9836
  80b5f4:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  80b5f8:	e0bffc17 	ldw	r2,-16(fp)
  80b5fc:	10800c03 	ldbu	r2,48(r2)
  80b600:	10800214 	ori	r2,r2,8
  80b604:	1007883a 	mov	r3,r2
  80b608:	e0bffc17 	ldw	r2,-16(fp)
  80b60c:	10c00c05 	stb	r3,48(r2)
  80b610:	e0bffa17 	ldw	r2,-24(fp)
  80b614:	e0bff615 	stw	r2,-40(fp)
  80b618:	e0bff617 	ldw	r2,-40(fp)
  80b61c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  80b620:	e0bffd03 	ldbu	r2,-12(fp)
  80b624:	10800058 	cmpnei	r2,r2,1
  80b628:	1000011e 	bne	r2,zero,80b630 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  80b62c:	08055140 	call	805514 <OS_Sched>
    }
    return (OS_ERR_NONE);
  80b630:	e03fff15 	stw	zero,-4(fp)
  80b634:	e0bfff17 	ldw	r2,-4(fp)
}
  80b638:	e037883a 	mov	sp,fp
  80b63c:	dfc00117 	ldw	ra,4(sp)
  80b640:	df000017 	ldw	fp,0(sp)
  80b644:	dec00204 	addi	sp,sp,8
  80b648:	f800283a 	ret

0080b64c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  80b64c:	defff504 	addi	sp,sp,-44
  80b650:	dfc00a15 	stw	ra,40(sp)
  80b654:	df000915 	stw	fp,36(sp)
  80b658:	df000904 	addi	fp,sp,36
  80b65c:	e17ffe15 	stw	r5,-8(fp)
  80b660:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b664:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  80b668:	e0bffd03 	ldbu	r2,-12(fp)
  80b66c:	10800570 	cmpltui	r2,r2,21
  80b670:	1000061e 	bne	r2,zero,80b68c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  80b674:	e0bffd03 	ldbu	r2,-12(fp)
  80b678:	10803fe0 	cmpeqi	r2,r2,255
  80b67c:	1000031e 	bne	r2,zero,80b68c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  80b680:	00800a84 	movi	r2,42
  80b684:	e0bfff15 	stw	r2,-4(fp)
  80b688:	00003b06 	br	80b778 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  80b68c:	e0bffe17 	ldw	r2,-8(fp)
  80b690:	1004c03a 	cmpne	r2,r2,zero
  80b694:	1000031e 	bne	r2,zero,80b6a4 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  80b698:	00800244 	movi	r2,9
  80b69c:	e0bfff15 	stw	r2,-4(fp)
  80b6a0:	00003506 	br	80b778 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b6a4:	0005303a 	rdctl	r2,status
  80b6a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b6ac:	e0fffa17 	ldw	r3,-24(fp)
  80b6b0:	00bfff84 	movi	r2,-2
  80b6b4:	1884703a 	and	r2,r3,r2
  80b6b8:	1001703a 	wrctl	status,r2
  
  return context;
  80b6bc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80b6c0:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  80b6c4:	e0bffd03 	ldbu	r2,-12(fp)
  80b6c8:	10803fd8 	cmpnei	r2,r2,255
  80b6cc:	1000051e 	bne	r2,zero,80b6e4 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  80b6d0:	00802074 	movhi	r2,129
  80b6d4:	10899e04 	addi	r2,r2,9848
  80b6d8:	10800017 	ldw	r2,0(r2)
  80b6dc:	10800c83 	ldbu	r2,50(r2)
  80b6e0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80b6e4:	e0bffd03 	ldbu	r2,-12(fp)
  80b6e8:	00c02074 	movhi	r3,129
  80b6ec:	18de2404 	addi	r3,r3,30864
  80b6f0:	1085883a 	add	r2,r2,r2
  80b6f4:	1085883a 	add	r2,r2,r2
  80b6f8:	10c5883a 	add	r2,r2,r3
  80b6fc:	10800017 	ldw	r2,0(r2)
  80b700:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  80b704:	e0bffc17 	ldw	r2,-16(fp)
  80b708:	1004c03a 	cmpne	r2,r2,zero
  80b70c:	1000071e 	bne	r2,zero,80b72c <OSTaskQuery+0xe0>
  80b710:	e0bffb17 	ldw	r2,-20(fp)
  80b714:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b718:	e0bff917 	ldw	r2,-28(fp)
  80b71c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  80b720:	00800a44 	movi	r2,41
  80b724:	e0bfff15 	stw	r2,-4(fp)
  80b728:	00001306 	br	80b778 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  80b72c:	e0bffc17 	ldw	r2,-16(fp)
  80b730:	10800058 	cmpnei	r2,r2,1
  80b734:	1000071e 	bne	r2,zero,80b754 <OSTaskQuery+0x108>
  80b738:	e0bffb17 	ldw	r2,-20(fp)
  80b73c:	e0bff815 	stw	r2,-32(fp)
  80b740:	e0bff817 	ldw	r2,-32(fp)
  80b744:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80b748:	008010c4 	movi	r2,67
  80b74c:	e0bfff15 	stw	r2,-4(fp)
  80b750:	00000906 	br	80b778 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  80b754:	e13ffe17 	ldw	r4,-8(fp)
  80b758:	e17ffc17 	ldw	r5,-16(fp)
  80b75c:	01801b04 	movi	r6,108
  80b760:	08054a80 	call	8054a8 <OS_MemCopy>
  80b764:	e0bffb17 	ldw	r2,-20(fp)
  80b768:	e0bff715 	stw	r2,-36(fp)
  80b76c:	e0bff717 	ldw	r2,-36(fp)
  80b770:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80b774:	e03fff15 	stw	zero,-4(fp)
  80b778:	e0bfff17 	ldw	r2,-4(fp)
}
  80b77c:	e037883a 	mov	sp,fp
  80b780:	dfc00117 	ldw	ra,4(sp)
  80b784:	df000017 	ldw	fp,0(sp)
  80b788:	dec00204 	addi	sp,sp,8
  80b78c:	f800283a 	ret

0080b790 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  80b790:	defffc04 	addi	sp,sp,-16
  80b794:	df000315 	stw	fp,12(sp)
  80b798:	df000304 	addi	fp,sp,12
  80b79c:	e13ffd15 	stw	r4,-12(fp)
  80b7a0:	e17ffe15 	stw	r5,-8(fp)
  80b7a4:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  80b7a8:	e0bfff0b 	ldhu	r2,-4(fp)
  80b7ac:	1080004c 	andi	r2,r2,1
  80b7b0:	10803fcc 	andi	r2,r2,255
  80b7b4:	1005003a 	cmpeq	r2,r2,zero
  80b7b8:	1000101e 	bne	r2,zero,80b7fc <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  80b7bc:	e0bfff0b 	ldhu	r2,-4(fp)
  80b7c0:	1080008c 	andi	r2,r2,2
  80b7c4:	1005003a 	cmpeq	r2,r2,zero
  80b7c8:	10000c1e 	bne	r2,zero,80b7fc <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  80b7cc:	00000806 	br	80b7f0 <OS_TaskStkClr+0x60>
                size--;
  80b7d0:	e0bffe17 	ldw	r2,-8(fp)
  80b7d4:	10bfffc4 	addi	r2,r2,-1
  80b7d8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  80b7dc:	e0bffd17 	ldw	r2,-12(fp)
  80b7e0:	10000015 	stw	zero,0(r2)
  80b7e4:	e0bffd17 	ldw	r2,-12(fp)
  80b7e8:	10800104 	addi	r2,r2,4
  80b7ec:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  80b7f0:	e0bffe17 	ldw	r2,-8(fp)
  80b7f4:	1004c03a 	cmpne	r2,r2,zero
  80b7f8:	103ff51e 	bne	r2,zero,80b7d0 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  80b7fc:	e037883a 	mov	sp,fp
  80b800:	df000017 	ldw	fp,0(sp)
  80b804:	dec00104 	addi	sp,sp,4
  80b808:	f800283a 	ret

0080b80c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  80b80c:	defff904 	addi	sp,sp,-28
  80b810:	dfc00615 	stw	ra,24(sp)
  80b814:	df000515 	stw	fp,20(sp)
  80b818:	df000504 	addi	fp,sp,20
  80b81c:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b820:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80b824:	00802074 	movhi	r2,129
  80b828:	10899d04 	addi	r2,r2,9844
  80b82c:	10800003 	ldbu	r2,0(r2)
  80b830:	10803fcc 	andi	r2,r2,255
  80b834:	1004c03a 	cmpne	r2,r2,zero
  80b838:	1000421e 	bne	r2,zero,80b944 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  80b83c:	e0bfff0b 	ldhu	r2,-4(fp)
  80b840:	1005003a 	cmpeq	r2,r2,zero
  80b844:	10003f1e 	bne	r2,zero,80b944 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b848:	0005303a 	rdctl	r2,status
  80b84c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b850:	e0fffc17 	ldw	r3,-16(fp)
  80b854:	00bfff84 	movi	r2,-2
  80b858:	1884703a 	and	r2,r3,r2
  80b85c:	1001703a 	wrctl	status,r2
  
  return context;
  80b860:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  80b864:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  80b868:	00802074 	movhi	r2,129
  80b86c:	10899e04 	addi	r2,r2,9848
  80b870:	10800017 	ldw	r2,0(r2)
  80b874:	10800d03 	ldbu	r2,52(r2)
  80b878:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  80b87c:	e13ffe03 	ldbu	r4,-8(fp)
  80b880:	e0fffe03 	ldbu	r3,-8(fp)
  80b884:	00802074 	movhi	r2,129
  80b888:	10899b44 	addi	r2,r2,9837
  80b88c:	10c5883a 	add	r2,r2,r3
  80b890:	10800003 	ldbu	r2,0(r2)
  80b894:	1007883a 	mov	r3,r2
  80b898:	00802074 	movhi	r2,129
  80b89c:	10899e04 	addi	r2,r2,9848
  80b8a0:	10800017 	ldw	r2,0(r2)
  80b8a4:	10800d43 	ldbu	r2,53(r2)
  80b8a8:	0084303a 	nor	r2,zero,r2
  80b8ac:	1884703a 	and	r2,r3,r2
  80b8b0:	1007883a 	mov	r3,r2
  80b8b4:	00802074 	movhi	r2,129
  80b8b8:	10899b44 	addi	r2,r2,9837
  80b8bc:	1105883a 	add	r2,r2,r4
  80b8c0:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  80b8c4:	e0fffe03 	ldbu	r3,-8(fp)
  80b8c8:	00802074 	movhi	r2,129
  80b8cc:	10899b44 	addi	r2,r2,9837
  80b8d0:	10c5883a 	add	r2,r2,r3
  80b8d4:	10800003 	ldbu	r2,0(r2)
  80b8d8:	10803fcc 	andi	r2,r2,255
  80b8dc:	1004c03a 	cmpne	r2,r2,zero
  80b8e0:	10000e1e 	bne	r2,zero,80b91c <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80b8e4:	00802074 	movhi	r2,129
  80b8e8:	10899e04 	addi	r2,r2,9848
  80b8ec:	10800017 	ldw	r2,0(r2)
  80b8f0:	10800d83 	ldbu	r2,54(r2)
  80b8f4:	0084303a 	nor	r2,zero,r2
  80b8f8:	1007883a 	mov	r3,r2
  80b8fc:	00802074 	movhi	r2,129
  80b900:	10899b04 	addi	r2,r2,9836
  80b904:	10800003 	ldbu	r2,0(r2)
  80b908:	1884703a 	and	r2,r3,r2
  80b90c:	1007883a 	mov	r3,r2
  80b910:	00802074 	movhi	r2,129
  80b914:	10899b04 	addi	r2,r2,9836
  80b918:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  80b91c:	00802074 	movhi	r2,129
  80b920:	10899e04 	addi	r2,r2,9848
  80b924:	10c00017 	ldw	r3,0(r2)
  80b928:	e0bfff0b 	ldhu	r2,-4(fp)
  80b92c:	18800b8d 	sth	r2,46(r3)
  80b930:	e0bffd17 	ldw	r2,-12(fp)
  80b934:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b938:	e0bffb17 	ldw	r2,-20(fp)
  80b93c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  80b940:	08055140 	call	805514 <OS_Sched>
    }
}
  80b944:	e037883a 	mov	sp,fp
  80b948:	dfc00117 	ldw	ra,4(sp)
  80b94c:	df000017 	ldw	fp,0(sp)
  80b950:	dec00204 	addi	sp,sp,8
  80b954:	f800283a 	ret

0080b958 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  80b958:	defff604 	addi	sp,sp,-40
  80b95c:	dfc00915 	stw	ra,36(sp)
  80b960:	df000815 	stw	fp,32(sp)
  80b964:	dc000715 	stw	r16,28(sp)
  80b968:	df000704 	addi	fp,sp,28
  80b96c:	e13ffb05 	stb	r4,-20(fp)
  80b970:	e17ffc05 	stb	r5,-16(fp)
  80b974:	e1bffd05 	stb	r6,-12(fp)
  80b978:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80b97c:	00802074 	movhi	r2,129
  80b980:	10899d04 	addi	r2,r2,9844
  80b984:	10800003 	ldbu	r2,0(r2)
  80b988:	10803fcc 	andi	r2,r2,255
  80b98c:	1005003a 	cmpeq	r2,r2,zero
  80b990:	1000031e 	bne	r2,zero,80b9a0 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  80b994:	00801544 	movi	r2,85
  80b998:	e0bfff15 	stw	r2,-4(fp)
  80b99c:	00004b06 	br	80bacc <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  80b9a0:	e0bffb03 	ldbu	r2,-20(fp)
  80b9a4:	1004c03a 	cmpne	r2,r2,zero
  80b9a8:	10000c1e 	bne	r2,zero,80b9dc <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  80b9ac:	e0bffc03 	ldbu	r2,-16(fp)
  80b9b0:	1004c03a 	cmpne	r2,r2,zero
  80b9b4:	1000091e 	bne	r2,zero,80b9dc <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  80b9b8:	e0bffd03 	ldbu	r2,-12(fp)
  80b9bc:	1004c03a 	cmpne	r2,r2,zero
  80b9c0:	1000061e 	bne	r2,zero,80b9dc <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  80b9c4:	e0bffe0b 	ldhu	r2,-8(fp)
  80b9c8:	1004c03a 	cmpne	r2,r2,zero
  80b9cc:	1000031e 	bne	r2,zero,80b9dc <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  80b9d0:	00801504 	movi	r2,84
  80b9d4:	e0bfff15 	stw	r2,-4(fp)
  80b9d8:	00003c06 	br	80bacc <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
  80b9dc:	e0bffc03 	ldbu	r2,-16(fp)
  80b9e0:	10800f30 	cmpltui	r2,r2,60
  80b9e4:	1000031e 	bne	r2,zero,80b9f4 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  80b9e8:	00801444 	movi	r2,81
  80b9ec:	e0bfff15 	stw	r2,-4(fp)
  80b9f0:	00003606 	br	80bacc <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
  80b9f4:	e0bffd03 	ldbu	r2,-12(fp)
  80b9f8:	10800f30 	cmpltui	r2,r2,60
  80b9fc:	1000031e 	bne	r2,zero,80ba0c <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  80ba00:	00801484 	movi	r2,82
  80ba04:	e0bfff15 	stw	r2,-4(fp)
  80ba08:	00003006 	br	80bacc <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
  80ba0c:	e0bffe0b 	ldhu	r2,-8(fp)
  80ba10:	1080fa30 	cmpltui	r2,r2,1000
  80ba14:	1000031e 	bne	r2,zero,80ba24 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  80ba18:	008014c4 	movi	r2,83
  80ba1c:	e0bfff15 	stw	r2,-4(fp)
  80ba20:	00002a06 	br	80bacc <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  80ba24:	e13ffb03 	ldbu	r4,-20(fp)
  80ba28:	01438404 	movi	r5,3600
  80ba2c:	0802c900 	call	802c90 <__mulsi3>
  80ba30:	1021883a 	mov	r16,r2
  80ba34:	e13ffc03 	ldbu	r4,-16(fp)
  80ba38:	01400f04 	movi	r5,60
  80ba3c:	0802c900 	call	802c90 <__mulsi3>
  80ba40:	8087883a 	add	r3,r16,r2
  80ba44:	e0bffd03 	ldbu	r2,-12(fp)
  80ba48:	1889883a 	add	r4,r3,r2
  80ba4c:	0140fa04 	movi	r5,1000
  80ba50:	0802c900 	call	802c90 <__mulsi3>
  80ba54:	1021883a 	mov	r16,r2
  80ba58:	e13ffe0b 	ldhu	r4,-8(fp)
  80ba5c:	0140fa04 	movi	r5,1000
  80ba60:	0802c900 	call	802c90 <__mulsi3>
  80ba64:	1009883a 	mov	r4,r2
  80ba68:	0140fa04 	movi	r5,1000
  80ba6c:	080ed700 	call	80ed70 <__udivsi3>
  80ba70:	8085883a 	add	r2,r16,r2
  80ba74:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  80ba78:	e0bffa17 	ldw	r2,-24(fp)
  80ba7c:	1004d43a 	srli	r2,r2,16
  80ba80:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  80ba84:	e0bffa17 	ldw	r2,-24(fp)
  80ba88:	10bfffcc 	andi	r2,r2,65535
  80ba8c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  80ba90:	e0bffa17 	ldw	r2,-24(fp)
  80ba94:	113fffcc 	andi	r4,r2,65535
  80ba98:	080b80c0 	call	80b80c <OSTimeDly>
    while (loops > 0) {
  80ba9c:	00000706 	br	80babc <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
  80baa0:	01200014 	movui	r4,32768
  80baa4:	080b80c0 	call	80b80c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  80baa8:	01200014 	movui	r4,32768
  80baac:	080b80c0 	call	80b80c <OSTimeDly>
        loops--;
  80bab0:	e0bff90b 	ldhu	r2,-28(fp)
  80bab4:	10bfffc4 	addi	r2,r2,-1
  80bab8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  80babc:	e0bff90b 	ldhu	r2,-28(fp)
  80bac0:	1004c03a 	cmpne	r2,r2,zero
  80bac4:	103ff61e 	bne	r2,zero,80baa0 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  80bac8:	e03fff15 	stw	zero,-4(fp)
  80bacc:	e0bfff17 	ldw	r2,-4(fp)
}
  80bad0:	e037883a 	mov	sp,fp
  80bad4:	dfc00217 	ldw	ra,8(sp)
  80bad8:	df000117 	ldw	fp,4(sp)
  80badc:	dc000017 	ldw	r16,0(sp)
  80bae0:	dec00304 	addi	sp,sp,12
  80bae4:	f800283a 	ret

0080bae8 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  80bae8:	defff404 	addi	sp,sp,-48
  80baec:	dfc00b15 	stw	ra,44(sp)
  80baf0:	df000a15 	stw	fp,40(sp)
  80baf4:	df000a04 	addi	fp,sp,40
  80baf8:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80bafc:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  80bb00:	e0bffe03 	ldbu	r2,-8(fp)
  80bb04:	10800530 	cmpltui	r2,r2,20
  80bb08:	1000031e 	bne	r2,zero,80bb18 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  80bb0c:	00800a84 	movi	r2,42
  80bb10:	e0bfff15 	stw	r2,-4(fp)
  80bb14:	00007206 	br	80bce0 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bb18:	0005303a 	rdctl	r2,status
  80bb1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bb20:	e0fffb17 	ldw	r3,-20(fp)
  80bb24:	00bfff84 	movi	r2,-2
  80bb28:	1884703a 	and	r2,r3,r2
  80bb2c:	1001703a 	wrctl	status,r2
  
  return context;
  80bb30:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  80bb34:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  80bb38:	e0bffe03 	ldbu	r2,-8(fp)
  80bb3c:	00c02074 	movhi	r3,129
  80bb40:	18de2404 	addi	r3,r3,30864
  80bb44:	1085883a 	add	r2,r2,r2
  80bb48:	1085883a 	add	r2,r2,r2
  80bb4c:	10c5883a 	add	r2,r2,r3
  80bb50:	10800017 	ldw	r2,0(r2)
  80bb54:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  80bb58:	e0bffd17 	ldw	r2,-12(fp)
  80bb5c:	1004c03a 	cmpne	r2,r2,zero
  80bb60:	1000071e 	bne	r2,zero,80bb80 <OSTimeDlyResume+0x98>
  80bb64:	e0bffc17 	ldw	r2,-16(fp)
  80bb68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bb6c:	e0bffa17 	ldw	r2,-24(fp)
  80bb70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  80bb74:	008010c4 	movi	r2,67
  80bb78:	e0bfff15 	stw	r2,-4(fp)
  80bb7c:	00005806 	br	80bce0 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  80bb80:	e0bffd17 	ldw	r2,-12(fp)
  80bb84:	10800058 	cmpnei	r2,r2,1
  80bb88:	1000071e 	bne	r2,zero,80bba8 <OSTimeDlyResume+0xc0>
  80bb8c:	e0bffc17 	ldw	r2,-16(fp)
  80bb90:	e0bff915 	stw	r2,-28(fp)
  80bb94:	e0bff917 	ldw	r2,-28(fp)
  80bb98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  80bb9c:	008010c4 	movi	r2,67
  80bba0:	e0bfff15 	stw	r2,-4(fp)
  80bba4:	00004e06 	br	80bce0 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  80bba8:	e0bffd17 	ldw	r2,-12(fp)
  80bbac:	10800b8b 	ldhu	r2,46(r2)
  80bbb0:	10bfffcc 	andi	r2,r2,65535
  80bbb4:	1004c03a 	cmpne	r2,r2,zero
  80bbb8:	1000071e 	bne	r2,zero,80bbd8 <OSTimeDlyResume+0xf0>
  80bbbc:	e0bffc17 	ldw	r2,-16(fp)
  80bbc0:	e0bff815 	stw	r2,-32(fp)
  80bbc4:	e0bff817 	ldw	r2,-32(fp)
  80bbc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  80bbcc:	00801404 	movi	r2,80
  80bbd0:	e0bfff15 	stw	r2,-4(fp)
  80bbd4:	00004206 	br	80bce0 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  80bbd8:	e0bffd17 	ldw	r2,-12(fp)
  80bbdc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80bbe0:	e0bffd17 	ldw	r2,-12(fp)
  80bbe4:	10800c03 	ldbu	r2,48(r2)
  80bbe8:	10803fcc 	andi	r2,r2,255
  80bbec:	10800dcc 	andi	r2,r2,55
  80bbf0:	1005003a 	cmpeq	r2,r2,zero
  80bbf4:	10000b1e 	bne	r2,zero,80bc24 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  80bbf8:	e0bffd17 	ldw	r2,-12(fp)
  80bbfc:	10c00c03 	ldbu	r3,48(r2)
  80bc00:	00bff204 	movi	r2,-56
  80bc04:	1884703a 	and	r2,r3,r2
  80bc08:	1007883a 	mov	r3,r2
  80bc0c:	e0bffd17 	ldw	r2,-12(fp)
  80bc10:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  80bc14:	e0fffd17 	ldw	r3,-12(fp)
  80bc18:	00800044 	movi	r2,1
  80bc1c:	18800c45 	stb	r2,49(r3)
  80bc20:	00000206 	br	80bc2c <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  80bc24:	e0bffd17 	ldw	r2,-12(fp)
  80bc28:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  80bc2c:	e0bffd17 	ldw	r2,-12(fp)
  80bc30:	10800c03 	ldbu	r2,48(r2)
  80bc34:	10803fcc 	andi	r2,r2,255
  80bc38:	1080020c 	andi	r2,r2,8
  80bc3c:	1004c03a 	cmpne	r2,r2,zero
  80bc40:	1000221e 	bne	r2,zero,80bccc <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  80bc44:	e0bffd17 	ldw	r2,-12(fp)
  80bc48:	10c00d83 	ldbu	r3,54(r2)
  80bc4c:	00802074 	movhi	r2,129
  80bc50:	10899b04 	addi	r2,r2,9836
  80bc54:	10800003 	ldbu	r2,0(r2)
  80bc58:	1884b03a 	or	r2,r3,r2
  80bc5c:	1007883a 	mov	r3,r2
  80bc60:	00802074 	movhi	r2,129
  80bc64:	10899b04 	addi	r2,r2,9836
  80bc68:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80bc6c:	e0bffd17 	ldw	r2,-12(fp)
  80bc70:	10800d03 	ldbu	r2,52(r2)
  80bc74:	11003fcc 	andi	r4,r2,255
  80bc78:	e0bffd17 	ldw	r2,-12(fp)
  80bc7c:	10800d03 	ldbu	r2,52(r2)
  80bc80:	10c03fcc 	andi	r3,r2,255
  80bc84:	00802074 	movhi	r2,129
  80bc88:	10899b44 	addi	r2,r2,9837
  80bc8c:	10c5883a 	add	r2,r2,r3
  80bc90:	10c00003 	ldbu	r3,0(r2)
  80bc94:	e0bffd17 	ldw	r2,-12(fp)
  80bc98:	10800d43 	ldbu	r2,53(r2)
  80bc9c:	1884b03a 	or	r2,r3,r2
  80bca0:	1007883a 	mov	r3,r2
  80bca4:	00802074 	movhi	r2,129
  80bca8:	10899b44 	addi	r2,r2,9837
  80bcac:	1105883a 	add	r2,r2,r4
  80bcb0:	10c00005 	stb	r3,0(r2)
  80bcb4:	e0bffc17 	ldw	r2,-16(fp)
  80bcb8:	e0bff715 	stw	r2,-36(fp)
  80bcbc:	e0bff717 	ldw	r2,-36(fp)
  80bcc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  80bcc4:	08055140 	call	805514 <OS_Sched>
  80bcc8:	00000406 	br	80bcdc <OSTimeDlyResume+0x1f4>
  80bccc:	e0bffc17 	ldw	r2,-16(fp)
  80bcd0:	e0bff615 	stw	r2,-40(fp)
  80bcd4:	e0bff617 	ldw	r2,-40(fp)
  80bcd8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  80bcdc:	e03fff15 	stw	zero,-4(fp)
  80bce0:	e0bfff17 	ldw	r2,-4(fp)
}
  80bce4:	e037883a 	mov	sp,fp
  80bce8:	dfc00117 	ldw	ra,4(sp)
  80bcec:	df000017 	ldw	fp,0(sp)
  80bcf0:	dec00204 	addi	sp,sp,8
  80bcf4:	f800283a 	ret

0080bcf8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  80bcf8:	defffb04 	addi	sp,sp,-20
  80bcfc:	df000415 	stw	fp,16(sp)
  80bd00:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80bd04:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bd08:	0005303a 	rdctl	r2,status
  80bd0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bd10:	e0fffd17 	ldw	r3,-12(fp)
  80bd14:	00bfff84 	movi	r2,-2
  80bd18:	1884703a 	and	r2,r3,r2
  80bd1c:	1001703a 	wrctl	status,r2
  
  return context;
  80bd20:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80bd24:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  80bd28:	00802074 	movhi	r2,129
  80bd2c:	10899f04 	addi	r2,r2,9852
  80bd30:	10800017 	ldw	r2,0(r2)
  80bd34:	e0bfff15 	stw	r2,-4(fp)
  80bd38:	e0bffe17 	ldw	r2,-8(fp)
  80bd3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bd40:	e0bffc17 	ldw	r2,-16(fp)
  80bd44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  80bd48:	e0bfff17 	ldw	r2,-4(fp)
}
  80bd4c:	e037883a 	mov	sp,fp
  80bd50:	df000017 	ldw	fp,0(sp)
  80bd54:	dec00104 	addi	sp,sp,4
  80bd58:	f800283a 	ret

0080bd5c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  80bd5c:	defffb04 	addi	sp,sp,-20
  80bd60:	df000415 	stw	fp,16(sp)
  80bd64:	df000404 	addi	fp,sp,16
  80bd68:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80bd6c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bd70:	0005303a 	rdctl	r2,status
  80bd74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bd78:	e0fffd17 	ldw	r3,-12(fp)
  80bd7c:	00bfff84 	movi	r2,-2
  80bd80:	1884703a 	and	r2,r3,r2
  80bd84:	1001703a 	wrctl	status,r2
  
  return context;
  80bd88:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80bd8c:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  80bd90:	00c02074 	movhi	r3,129
  80bd94:	18c99f04 	addi	r3,r3,9852
  80bd98:	e0bfff17 	ldw	r2,-4(fp)
  80bd9c:	18800015 	stw	r2,0(r3)
  80bda0:	e0bffe17 	ldw	r2,-8(fp)
  80bda4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bda8:	e0bffc17 	ldw	r2,-16(fp)
  80bdac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80bdb0:	e037883a 	mov	sp,fp
  80bdb4:	df000017 	ldw	fp,0(sp)
  80bdb8:	dec00104 	addi	sp,sp,4
  80bdbc:	f800283a 	ret

0080bdc0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80bdc0:	defffd04 	addi	sp,sp,-12
  80bdc4:	dfc00215 	stw	ra,8(sp)
  80bdc8:	df000115 	stw	fp,4(sp)
  80bdcc:	df000104 	addi	fp,sp,4
  80bdd0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  80bdd4:	080e1600 	call	80e160 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80bdd8:	00800044 	movi	r2,1
  80bddc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80bde0:	e037883a 	mov	sp,fp
  80bde4:	dfc00117 	ldw	ra,4(sp)
  80bde8:	df000017 	ldw	fp,0(sp)
  80bdec:	dec00204 	addi	sp,sp,8
  80bdf0:	f800283a 	ret

0080bdf4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80bdf4:	defffe04 	addi	sp,sp,-8
  80bdf8:	dfc00115 	stw	ra,4(sp)
  80bdfc:	df000015 	stw	fp,0(sp)
  80be00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80be04:	01004474 	movhi	r4,273
  80be08:	21280004 	addi	r4,r4,-24576
  80be0c:	000b883a 	mov	r5,zero
  80be10:	000d883a 	mov	r6,zero
  80be14:	01c0fa04 	movi	r7,1000
  80be18:	080cc780 	call	80cc78 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80be1c:	01002074 	movhi	r4,129
  80be20:	213e6404 	addi	r4,r4,-1648
  80be24:	000b883a 	mov	r5,zero
  80be28:	01800044 	movi	r6,1
  80be2c:	080bff40 	call	80bff4 <altera_avalon_jtag_uart_init>
  80be30:	01002074 	movhi	r4,129
  80be34:	213e5a04 	addi	r4,r4,-1688
  80be38:	080be740 	call	80be74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  80be3c:	01002074 	movhi	r4,129
  80be40:	21027504 	addi	r4,r4,2516
  80be44:	080cdb00 	call	80cdb0 <alt_up_character_lcd_init>
  80be48:	01002074 	movhi	r4,129
  80be4c:	21027504 	addi	r4,r4,2516
  80be50:	080be740 	call	80be74 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
  80be54:	01002074 	movhi	r4,129
  80be58:	21028004 	addi	r4,r4,2560
  80be5c:	080be740 	call	80be74 <alt_dev_reg>
}
  80be60:	e037883a 	mov	sp,fp
  80be64:	dfc00117 	ldw	ra,4(sp)
  80be68:	df000017 	ldw	fp,0(sp)
  80be6c:	dec00204 	addi	sp,sp,8
  80be70:	f800283a 	ret

0080be74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80be74:	defffd04 	addi	sp,sp,-12
  80be78:	dfc00215 	stw	ra,8(sp)
  80be7c:	df000115 	stw	fp,4(sp)
  80be80:	df000104 	addi	fp,sp,4
  80be84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80be88:	e13fff17 	ldw	r4,-4(fp)
  80be8c:	01402074 	movhi	r5,129
  80be90:	29429104 	addi	r5,r5,2628
  80be94:	080d7380 	call	80d738 <alt_dev_llist_insert>
}
  80be98:	e037883a 	mov	sp,fp
  80be9c:	dfc00117 	ldw	ra,4(sp)
  80bea0:	df000017 	ldw	fp,0(sp)
  80bea4:	dec00204 	addi	sp,sp,8
  80bea8:	f800283a 	ret

0080beac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80beac:	defffa04 	addi	sp,sp,-24
  80beb0:	dfc00515 	stw	ra,20(sp)
  80beb4:	df000415 	stw	fp,16(sp)
  80beb8:	df000404 	addi	fp,sp,16
  80bebc:	e13ffd15 	stw	r4,-12(fp)
  80bec0:	e17ffe15 	stw	r5,-8(fp)
  80bec4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bec8:	e0bffd17 	ldw	r2,-12(fp)
  80becc:	10800017 	ldw	r2,0(r2)
  80bed0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80bed4:	e0bffc17 	ldw	r2,-16(fp)
  80bed8:	11000a04 	addi	r4,r2,40
  80bedc:	e0bffd17 	ldw	r2,-12(fp)
  80bee0:	11c00217 	ldw	r7,8(r2)
  80bee4:	e17ffe17 	ldw	r5,-8(fp)
  80bee8:	e1bfff17 	ldw	r6,-4(fp)
  80beec:	080c6680 	call	80c668 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80bef0:	e037883a 	mov	sp,fp
  80bef4:	dfc00117 	ldw	ra,4(sp)
  80bef8:	df000017 	ldw	fp,0(sp)
  80befc:	dec00204 	addi	sp,sp,8
  80bf00:	f800283a 	ret

0080bf04 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80bf04:	defffa04 	addi	sp,sp,-24
  80bf08:	dfc00515 	stw	ra,20(sp)
  80bf0c:	df000415 	stw	fp,16(sp)
  80bf10:	df000404 	addi	fp,sp,16
  80bf14:	e13ffd15 	stw	r4,-12(fp)
  80bf18:	e17ffe15 	stw	r5,-8(fp)
  80bf1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bf20:	e0bffd17 	ldw	r2,-12(fp)
  80bf24:	10800017 	ldw	r2,0(r2)
  80bf28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80bf2c:	e0bffc17 	ldw	r2,-16(fp)
  80bf30:	11000a04 	addi	r4,r2,40
  80bf34:	e0bffd17 	ldw	r2,-12(fp)
  80bf38:	11c00217 	ldw	r7,8(r2)
  80bf3c:	e17ffe17 	ldw	r5,-8(fp)
  80bf40:	e1bfff17 	ldw	r6,-4(fp)
  80bf44:	080c9280 	call	80c928 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80bf48:	e037883a 	mov	sp,fp
  80bf4c:	dfc00117 	ldw	ra,4(sp)
  80bf50:	df000017 	ldw	fp,0(sp)
  80bf54:	dec00204 	addi	sp,sp,8
  80bf58:	f800283a 	ret

0080bf5c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80bf5c:	defffc04 	addi	sp,sp,-16
  80bf60:	dfc00315 	stw	ra,12(sp)
  80bf64:	df000215 	stw	fp,8(sp)
  80bf68:	df000204 	addi	fp,sp,8
  80bf6c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bf70:	e0bfff17 	ldw	r2,-4(fp)
  80bf74:	10800017 	ldw	r2,0(r2)
  80bf78:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80bf7c:	e0bffe17 	ldw	r2,-8(fp)
  80bf80:	11000a04 	addi	r4,r2,40
  80bf84:	e0bfff17 	ldw	r2,-4(fp)
  80bf88:	11400217 	ldw	r5,8(r2)
  80bf8c:	080c5000 	call	80c500 <altera_avalon_jtag_uart_close>
}
  80bf90:	e037883a 	mov	sp,fp
  80bf94:	dfc00117 	ldw	ra,4(sp)
  80bf98:	df000017 	ldw	fp,0(sp)
  80bf9c:	dec00204 	addi	sp,sp,8
  80bfa0:	f800283a 	ret

0080bfa4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80bfa4:	defffa04 	addi	sp,sp,-24
  80bfa8:	dfc00515 	stw	ra,20(sp)
  80bfac:	df000415 	stw	fp,16(sp)
  80bfb0:	df000404 	addi	fp,sp,16
  80bfb4:	e13ffd15 	stw	r4,-12(fp)
  80bfb8:	e17ffe15 	stw	r5,-8(fp)
  80bfbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80bfc0:	e0bffd17 	ldw	r2,-12(fp)
  80bfc4:	10800017 	ldw	r2,0(r2)
  80bfc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80bfcc:	e0bffc17 	ldw	r2,-16(fp)
  80bfd0:	11000a04 	addi	r4,r2,40
  80bfd4:	e17ffe17 	ldw	r5,-8(fp)
  80bfd8:	e1bfff17 	ldw	r6,-4(fp)
  80bfdc:	080c5740 	call	80c574 <altera_avalon_jtag_uart_ioctl>
}
  80bfe0:	e037883a 	mov	sp,fp
  80bfe4:	dfc00117 	ldw	ra,4(sp)
  80bfe8:	df000017 	ldw	fp,0(sp)
  80bfec:	dec00204 	addi	sp,sp,8
  80bff0:	f800283a 	ret

0080bff4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80bff4:	defff504 	addi	sp,sp,-44
  80bff8:	dfc00a15 	stw	ra,40(sp)
  80bffc:	df000915 	stw	fp,36(sp)
  80c000:	df000904 	addi	fp,sp,36
  80c004:	e13ffd15 	stw	r4,-12(fp)
  80c008:	e17ffe15 	stw	r5,-8(fp)
  80c00c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  80c010:	e0bffd17 	ldw	r2,-12(fp)
  80c014:	10800c04 	addi	r2,r2,48
  80c018:	e0bffb15 	stw	r2,-20(fp)
  80c01c:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  80c020:	e13ffc0b 	ldhu	r4,-16(fp)
  80c024:	e17ffc84 	addi	r5,fp,-14
  80c028:	08060bc0 	call	8060bc <OSFlagCreate>
  80c02c:	1007883a 	mov	r3,r2
  80c030:	e0bffb17 	ldw	r2,-20(fp)
  80c034:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  80c038:	e0bffd17 	ldw	r2,-12(fp)
  80c03c:	10800a04 	addi	r2,r2,40
  80c040:	e0bff915 	stw	r2,-28(fp)
  80c044:	00800044 	movi	r2,1
  80c048:	e0bffa0d 	sth	r2,-24(fp)
  80c04c:	e13ffa0b 	ldhu	r4,-24(fp)
  80c050:	08092c40 	call	8092c4 <OSSemCreate>
  80c054:	1007883a 	mov	r3,r2
  80c058:	e0bff917 	ldw	r2,-28(fp)
  80c05c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  80c060:	e0bffd17 	ldw	r2,-12(fp)
  80c064:	10800b04 	addi	r2,r2,44
  80c068:	e0bff715 	stw	r2,-36(fp)
  80c06c:	00800044 	movi	r2,1
  80c070:	e0bff80d 	sth	r2,-32(fp)
  80c074:	e13ff80b 	ldhu	r4,-32(fp)
  80c078:	08092c40 	call	8092c4 <OSSemCreate>
  80c07c:	1007883a 	mov	r3,r2
  80c080:	e0bff717 	ldw	r2,-36(fp)
  80c084:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c088:	e0fffd17 	ldw	r3,-12(fp)
  80c08c:	00800044 	movi	r2,1
  80c090:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80c094:	e0bffd17 	ldw	r2,-12(fp)
  80c098:	10800017 	ldw	r2,0(r2)
  80c09c:	11000104 	addi	r4,r2,4
  80c0a0:	e0bffd17 	ldw	r2,-12(fp)
  80c0a4:	10800817 	ldw	r2,32(r2)
  80c0a8:	1007883a 	mov	r3,r2
  80c0ac:	2005883a 	mov	r2,r4
  80c0b0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  80c0b4:	e13fff17 	ldw	r4,-4(fp)
  80c0b8:	e17ffd17 	ldw	r5,-12(fp)
  80c0bc:	01802074 	movhi	r6,129
  80c0c0:	31b04904 	addi	r6,r6,-16092
  80c0c4:	080db140 	call	80db14 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80c0c8:	e0bffd17 	ldw	r2,-12(fp)
  80c0cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80c0d0:	e0bffd17 	ldw	r2,-12(fp)
  80c0d4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80c0d8:	00802074 	movhi	r2,129
  80c0dc:	1089a404 	addi	r2,r2,9872
  80c0e0:	10800017 	ldw	r2,0(r2)
  80c0e4:	100b883a 	mov	r5,r2
  80c0e8:	01802074 	movhi	r6,129
  80c0ec:	31b0fb04 	addi	r6,r6,-15380
  80c0f0:	e1fffd17 	ldw	r7,-12(fp)
  80c0f4:	080d5c80 	call	80d5c8 <alt_alarm_start>
  80c0f8:	1004403a 	cmpge	r2,r2,zero
  80c0fc:	1000041e 	bne	r2,zero,80c110 <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80c100:	e0fffd17 	ldw	r3,-12(fp)
  80c104:	00a00034 	movhi	r2,32768
  80c108:	10bfffc4 	addi	r2,r2,-1
  80c10c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80c110:	e037883a 	mov	sp,fp
  80c114:	dfc00117 	ldw	ra,4(sp)
  80c118:	df000017 	ldw	fp,0(sp)
  80c11c:	dec00204 	addi	sp,sp,8
  80c120:	f800283a 	ret

0080c124 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80c124:	defff104 	addi	sp,sp,-60
  80c128:	dfc00e15 	stw	ra,56(sp)
  80c12c:	df000d15 	stw	fp,52(sp)
  80c130:	df000d04 	addi	fp,sp,52
  80c134:	e13ffe15 	stw	r4,-8(fp)
  80c138:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80c13c:	e0bffe17 	ldw	r2,-8(fp)
  80c140:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
  80c144:	e0bffc17 	ldw	r2,-16(fp)
  80c148:	10800017 	ldw	r2,0(r2)
  80c14c:	e0bffb15 	stw	r2,-20(fp)
  80c150:	00000006 	br	80c154 <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c154:	e0bffb17 	ldw	r2,-20(fp)
  80c158:	10800104 	addi	r2,r2,4
  80c15c:	10800037 	ldwio	r2,0(r2)
  80c160:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80c164:	e0bffa17 	ldw	r2,-24(fp)
  80c168:	1080c00c 	andi	r2,r2,768
  80c16c:	1005003a 	cmpeq	r2,r2,zero
  80c170:	1000991e 	bne	r2,zero,80c3d8 <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80c174:	e0bffa17 	ldw	r2,-24(fp)
  80c178:	1080400c 	andi	r2,r2,256
  80c17c:	1005003a 	cmpeq	r2,r2,zero
  80c180:	1000481e 	bne	r2,zero,80c2a4 <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80c184:	00800074 	movhi	r2,1
  80c188:	e0bff915 	stw	r2,-28(fp)
  80c18c:	00000006 	br	80c190 <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c190:	e0bffc17 	ldw	r2,-16(fp)
  80c194:	10800d17 	ldw	r2,52(r2)
  80c198:	10800044 	addi	r2,r2,1
  80c19c:	1081ffcc 	andi	r2,r2,2047
  80c1a0:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
  80c1a4:	e0bffc17 	ldw	r2,-16(fp)
  80c1a8:	10c00e17 	ldw	r3,56(r2)
  80c1ac:	e0bff817 	ldw	r2,-32(fp)
  80c1b0:	18802826 	beq	r3,r2,80c254 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80c1b4:	e0bffb17 	ldw	r2,-20(fp)
  80c1b8:	10800037 	ldwio	r2,0(r2)
  80c1bc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80c1c0:	e0bff917 	ldw	r2,-28(fp)
  80c1c4:	10a0000c 	andi	r2,r2,32768
  80c1c8:	1005003a 	cmpeq	r2,r2,zero
  80c1cc:	1000211e 	bne	r2,zero,80c254 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80c1d0:	e0bffc17 	ldw	r2,-16(fp)
  80c1d4:	10c00d17 	ldw	r3,52(r2)
  80c1d8:	e0bff917 	ldw	r2,-28(fp)
  80c1dc:	1009883a 	mov	r4,r2
  80c1e0:	e0bffc17 	ldw	r2,-16(fp)
  80c1e4:	1885883a 	add	r2,r3,r2
  80c1e8:	10801104 	addi	r2,r2,68
  80c1ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c1f0:	e0bffc17 	ldw	r2,-16(fp)
  80c1f4:	10800d17 	ldw	r2,52(r2)
  80c1f8:	10800044 	addi	r2,r2,1
  80c1fc:	10c1ffcc 	andi	r3,r2,2047
  80c200:	e0bffc17 	ldw	r2,-16(fp)
  80c204:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  80c208:	e0bffc17 	ldw	r2,-16(fp)
  80c20c:	10800c17 	ldw	r2,48(r2)
  80c210:	e0bff515 	stw	r2,-44(fp)
  80c214:	00800044 	movi	r2,1
  80c218:	e0bff60d 	sth	r2,-40(fp)
  80c21c:	00800044 	movi	r2,1
  80c220:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80c224:	00802074 	movhi	r2,129
  80c228:	10898f44 	addi	r2,r2,9789
  80c22c:	10800003 	ldbu	r2,0(r2)
  80c230:	10803fcc 	andi	r2,r2,255
  80c234:	1005003a 	cmpeq	r2,r2,zero
  80c238:	103fd51e 	bne	r2,zero,80c190 <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
  80c23c:	e17ff60b 	ldhu	r5,-40(fp)
  80c240:	e1bff683 	ldbu	r6,-38(fp)
  80c244:	e1fffd04 	addi	r7,fp,-12
  80c248:	e13ff517 	ldw	r4,-44(fp)
  80c24c:	0806de40 	call	806de4 <OSFlagPost>
    return err;
  80c250:	003fcf06 	br	80c190 <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80c254:	e0bff917 	ldw	r2,-28(fp)
  80c258:	10bfffec 	andhi	r2,r2,65535
  80c25c:	1005003a 	cmpeq	r2,r2,zero
  80c260:	1000101e 	bne	r2,zero,80c2a4 <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c264:	e0bffc17 	ldw	r2,-16(fp)
  80c268:	10c00817 	ldw	r3,32(r2)
  80c26c:	00bfff84 	movi	r2,-2
  80c270:	1886703a 	and	r3,r3,r2
  80c274:	e0bffc17 	ldw	r2,-16(fp)
  80c278:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80c27c:	e0bffb17 	ldw	r2,-20(fp)
  80c280:	11000104 	addi	r4,r2,4
  80c284:	e0bffc17 	ldw	r2,-16(fp)
  80c288:	10800817 	ldw	r2,32(r2)
  80c28c:	1007883a 	mov	r3,r2
  80c290:	2005883a 	mov	r2,r4
  80c294:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c298:	e0bffb17 	ldw	r2,-20(fp)
  80c29c:	10800104 	addi	r2,r2,4
  80c2a0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80c2a4:	e0bffa17 	ldw	r2,-24(fp)
  80c2a8:	1080800c 	andi	r2,r2,512
  80c2ac:	1005003a 	cmpeq	r2,r2,zero
  80c2b0:	103fa81e 	bne	r2,zero,80c154 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80c2b4:	e0bffa17 	ldw	r2,-24(fp)
  80c2b8:	10bfffec 	andhi	r2,r2,65535
  80c2bc:	1004d43a 	srli	r2,r2,16
  80c2c0:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c2c4:	00002706 	br	80c364 <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80c2c8:	e13ffb17 	ldw	r4,-20(fp)
  80c2cc:	e0bffc17 	ldw	r2,-16(fp)
  80c2d0:	10c01017 	ldw	r3,64(r2)
  80c2d4:	e0bffc17 	ldw	r2,-16(fp)
  80c2d8:	1885883a 	add	r2,r3,r2
  80c2dc:	10821104 	addi	r2,r2,2116
  80c2e0:	10800003 	ldbu	r2,0(r2)
  80c2e4:	10c03fcc 	andi	r3,r2,255
  80c2e8:	18c0201c 	xori	r3,r3,128
  80c2ec:	18ffe004 	addi	r3,r3,-128
  80c2f0:	2005883a 	mov	r2,r4
  80c2f4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c2f8:	e0bffc17 	ldw	r2,-16(fp)
  80c2fc:	10801017 	ldw	r2,64(r2)
  80c300:	10800044 	addi	r2,r2,1
  80c304:	10c1ffcc 	andi	r3,r2,2047
  80c308:	e0bffc17 	ldw	r2,-16(fp)
  80c30c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  80c310:	e0bffc17 	ldw	r2,-16(fp)
  80c314:	10800c17 	ldw	r2,48(r2)
  80c318:	e0bff315 	stw	r2,-52(fp)
  80c31c:	00800084 	movi	r2,2
  80c320:	e0bff40d 	sth	r2,-48(fp)
  80c324:	00800044 	movi	r2,1
  80c328:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80c32c:	00802074 	movhi	r2,129
  80c330:	10898f44 	addi	r2,r2,9789
  80c334:	10800003 	ldbu	r2,0(r2)
  80c338:	10803fcc 	andi	r2,r2,255
  80c33c:	1005003a 	cmpeq	r2,r2,zero
  80c340:	1000051e 	bne	r2,zero,80c358 <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
  80c344:	e17ff40b 	ldhu	r5,-48(fp)
  80c348:	e1bff483 	ldbu	r6,-46(fp)
  80c34c:	e1fffd44 	addi	r7,fp,-11
  80c350:	e13ff317 	ldw	r4,-52(fp)
  80c354:	0806de40 	call	806de4 <OSFlagPost>

        space--;
  80c358:	e0bff717 	ldw	r2,-36(fp)
  80c35c:	10bfffc4 	addi	r2,r2,-1
  80c360:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c364:	e0bff717 	ldw	r2,-36(fp)
  80c368:	1005003a 	cmpeq	r2,r2,zero
  80c36c:	1000051e 	bne	r2,zero,80c384 <altera_avalon_jtag_uart_irq+0x260>
  80c370:	e0bffc17 	ldw	r2,-16(fp)
  80c374:	10c01017 	ldw	r3,64(r2)
  80c378:	e0bffc17 	ldw	r2,-16(fp)
  80c37c:	10800f17 	ldw	r2,60(r2)
  80c380:	18bfd11e 	bne	r3,r2,80c2c8 <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80c384:	e0bff717 	ldw	r2,-36(fp)
  80c388:	1005003a 	cmpeq	r2,r2,zero
  80c38c:	103f711e 	bne	r2,zero,80c154 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c390:	e0bffc17 	ldw	r2,-16(fp)
  80c394:	10c00817 	ldw	r3,32(r2)
  80c398:	00bfff44 	movi	r2,-3
  80c39c:	1886703a 	and	r3,r3,r2
  80c3a0:	e0bffc17 	ldw	r2,-16(fp)
  80c3a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c3a8:	e0bffc17 	ldw	r2,-16(fp)
  80c3ac:	10800017 	ldw	r2,0(r2)
  80c3b0:	11000104 	addi	r4,r2,4
  80c3b4:	e0bffc17 	ldw	r2,-16(fp)
  80c3b8:	10800817 	ldw	r2,32(r2)
  80c3bc:	1007883a 	mov	r3,r2
  80c3c0:	2005883a 	mov	r2,r4
  80c3c4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c3c8:	e0bffb17 	ldw	r2,-20(fp)
  80c3cc:	10800104 	addi	r2,r2,4
  80c3d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80c3d4:	003f5f06 	br	80c154 <altera_avalon_jtag_uart_irq+0x30>
}
  80c3d8:	e037883a 	mov	sp,fp
  80c3dc:	dfc00117 	ldw	ra,4(sp)
  80c3e0:	df000017 	ldw	fp,0(sp)
  80c3e4:	dec00204 	addi	sp,sp,8
  80c3e8:	f800283a 	ret

0080c3ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80c3ec:	defff804 	addi	sp,sp,-32
  80c3f0:	dfc00715 	stw	ra,28(sp)
  80c3f4:	df000615 	stw	fp,24(sp)
  80c3f8:	df000604 	addi	fp,sp,24
  80c3fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80c400:	e0bfff17 	ldw	r2,-4(fp)
  80c404:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80c408:	e0bffd17 	ldw	r2,-12(fp)
  80c40c:	10800017 	ldw	r2,0(r2)
  80c410:	10800104 	addi	r2,r2,4
  80c414:	10800037 	ldwio	r2,0(r2)
  80c418:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80c41c:	e0bffc17 	ldw	r2,-16(fp)
  80c420:	1081000c 	andi	r2,r2,1024
  80c424:	1005003a 	cmpeq	r2,r2,zero
  80c428:	10000c1e 	bne	r2,zero,80c45c <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80c42c:	e0bffd17 	ldw	r2,-12(fp)
  80c430:	10800017 	ldw	r2,0(r2)
  80c434:	11000104 	addi	r4,r2,4
  80c438:	e0bffd17 	ldw	r2,-12(fp)
  80c43c:	10800817 	ldw	r2,32(r2)
  80c440:	10810014 	ori	r2,r2,1024
  80c444:	1007883a 	mov	r3,r2
  80c448:	2005883a 	mov	r2,r4
  80c44c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80c450:	e0bffd17 	ldw	r2,-12(fp)
  80c454:	10000915 	stw	zero,36(r2)
  80c458:	00002106 	br	80c4e0 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80c45c:	e0bffd17 	ldw	r2,-12(fp)
  80c460:	10c00917 	ldw	r3,36(r2)
  80c464:	00a00034 	movhi	r2,32768
  80c468:	10bfff04 	addi	r2,r2,-4
  80c46c:	10c01c36 	bltu	r2,r3,80c4e0 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  80c470:	e0bffd17 	ldw	r2,-12(fp)
  80c474:	10800917 	ldw	r2,36(r2)
  80c478:	10c00044 	addi	r3,r2,1
  80c47c:	e0bffd17 	ldw	r2,-12(fp)
  80c480:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  80c484:	e0bffd17 	ldw	r2,-12(fp)
  80c488:	10c00917 	ldw	r3,36(r2)
  80c48c:	e0bffd17 	ldw	r2,-12(fp)
  80c490:	10800117 	ldw	r2,4(r2)
  80c494:	18801236 	bltu	r3,r2,80c4e0 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  80c498:	e0bffd17 	ldw	r2,-12(fp)
  80c49c:	10800c17 	ldw	r2,48(r2)
  80c4a0:	e0bffa15 	stw	r2,-24(fp)
  80c4a4:	00800104 	movi	r2,4
  80c4a8:	e0bffb0d 	sth	r2,-20(fp)
  80c4ac:	00800044 	movi	r2,1
  80c4b0:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80c4b4:	00802074 	movhi	r2,129
  80c4b8:	10898f44 	addi	r2,r2,9789
  80c4bc:	10800003 	ldbu	r2,0(r2)
  80c4c0:	10803fcc 	andi	r2,r2,255
  80c4c4:	1005003a 	cmpeq	r2,r2,zero
  80c4c8:	1000051e 	bne	r2,zero,80c4e0 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  80c4cc:	e17ffb0b 	ldhu	r5,-20(fp)
  80c4d0:	e1bffb83 	ldbu	r6,-18(fp)
  80c4d4:	e1fffe04 	addi	r7,fp,-8
  80c4d8:	e13ffa17 	ldw	r4,-24(fp)
  80c4dc:	0806de40 	call	806de4 <OSFlagPost>
  80c4e0:	00802074 	movhi	r2,129
  80c4e4:	1089a404 	addi	r2,r2,9872
  80c4e8:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  80c4ec:	e037883a 	mov	sp,fp
  80c4f0:	dfc00117 	ldw	ra,4(sp)
  80c4f4:	df000017 	ldw	fp,0(sp)
  80c4f8:	dec00204 	addi	sp,sp,8
  80c4fc:	f800283a 	ret

0080c500 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80c500:	defffc04 	addi	sp,sp,-16
  80c504:	df000315 	stw	fp,12(sp)
  80c508:	df000304 	addi	fp,sp,12
  80c50c:	e13ffd15 	stw	r4,-12(fp)
  80c510:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c514:	00000706 	br	80c534 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80c518:	e0bffe17 	ldw	r2,-8(fp)
  80c51c:	1090000c 	andi	r2,r2,16384
  80c520:	1005003a 	cmpeq	r2,r2,zero
  80c524:	1000031e 	bne	r2,zero,80c534 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80c528:	00bffd44 	movi	r2,-11
  80c52c:	e0bfff15 	stw	r2,-4(fp)
  80c530:	00000b06 	br	80c560 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c534:	e0bffd17 	ldw	r2,-12(fp)
  80c538:	10c01017 	ldw	r3,64(r2)
  80c53c:	e0bffd17 	ldw	r2,-12(fp)
  80c540:	10800f17 	ldw	r2,60(r2)
  80c544:	18800526 	beq	r3,r2,80c55c <altera_avalon_jtag_uart_close+0x5c>
  80c548:	e0bffd17 	ldw	r2,-12(fp)
  80c54c:	10c00917 	ldw	r3,36(r2)
  80c550:	e0bffd17 	ldw	r2,-12(fp)
  80c554:	10800117 	ldw	r2,4(r2)
  80c558:	18bfef36 	bltu	r3,r2,80c518 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80c55c:	e03fff15 	stw	zero,-4(fp)
  80c560:	e0bfff17 	ldw	r2,-4(fp)
}
  80c564:	e037883a 	mov	sp,fp
  80c568:	df000017 	ldw	fp,0(sp)
  80c56c:	dec00104 	addi	sp,sp,4
  80c570:	f800283a 	ret

0080c574 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80c574:	defff804 	addi	sp,sp,-32
  80c578:	df000715 	stw	fp,28(sp)
  80c57c:	df000704 	addi	fp,sp,28
  80c580:	e13ffb15 	stw	r4,-20(fp)
  80c584:	e17ffc15 	stw	r5,-16(fp)
  80c588:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80c58c:	00bff9c4 	movi	r2,-25
  80c590:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80c594:	e0bffc17 	ldw	r2,-16(fp)
  80c598:	e0bfff15 	stw	r2,-4(fp)
  80c59c:	e0ffff17 	ldw	r3,-4(fp)
  80c5a0:	189a8060 	cmpeqi	r2,r3,27137
  80c5a4:	1000041e 	bne	r2,zero,80c5b8 <altera_avalon_jtag_uart_ioctl+0x44>
  80c5a8:	e0ffff17 	ldw	r3,-4(fp)
  80c5ac:	189a80a0 	cmpeqi	r2,r3,27138
  80c5b0:	10001b1e 	bne	r2,zero,80c620 <altera_avalon_jtag_uart_ioctl+0xac>
  80c5b4:	00002706 	br	80c654 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80c5b8:	e0bffb17 	ldw	r2,-20(fp)
  80c5bc:	10c00117 	ldw	r3,4(r2)
  80c5c0:	00a00034 	movhi	r2,32768
  80c5c4:	10bfffc4 	addi	r2,r2,-1
  80c5c8:	18802226 	beq	r3,r2,80c654 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80c5cc:	e0bffd17 	ldw	r2,-12(fp)
  80c5d0:	10800017 	ldw	r2,0(r2)
  80c5d4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80c5d8:	e0bff917 	ldw	r2,-28(fp)
  80c5dc:	10800090 	cmplti	r2,r2,2
  80c5e0:	1000071e 	bne	r2,zero,80c600 <altera_avalon_jtag_uart_ioctl+0x8c>
  80c5e4:	e0fff917 	ldw	r3,-28(fp)
  80c5e8:	00a00034 	movhi	r2,32768
  80c5ec:	10bfffc4 	addi	r2,r2,-1
  80c5f0:	18800326 	beq	r3,r2,80c600 <altera_avalon_jtag_uart_ioctl+0x8c>
  80c5f4:	e0bff917 	ldw	r2,-28(fp)
  80c5f8:	e0bffe15 	stw	r2,-8(fp)
  80c5fc:	00000306 	br	80c60c <altera_avalon_jtag_uart_ioctl+0x98>
  80c600:	00e00034 	movhi	r3,32768
  80c604:	18ffff84 	addi	r3,r3,-2
  80c608:	e0fffe15 	stw	r3,-8(fp)
  80c60c:	e0bffb17 	ldw	r2,-20(fp)
  80c610:	e0fffe17 	ldw	r3,-8(fp)
  80c614:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80c618:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80c61c:	00000d06 	br	80c654 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80c620:	e0bffb17 	ldw	r2,-20(fp)
  80c624:	10c00117 	ldw	r3,4(r2)
  80c628:	00a00034 	movhi	r2,32768
  80c62c:	10bfffc4 	addi	r2,r2,-1
  80c630:	18800826 	beq	r3,r2,80c654 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80c634:	e13ffd17 	ldw	r4,-12(fp)
  80c638:	e0bffb17 	ldw	r2,-20(fp)
  80c63c:	10c00917 	ldw	r3,36(r2)
  80c640:	e0bffb17 	ldw	r2,-20(fp)
  80c644:	10800117 	ldw	r2,4(r2)
  80c648:	1885803a 	cmpltu	r2,r3,r2
  80c64c:	20800015 	stw	r2,0(r4)
      rc = 0;
  80c650:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80c654:	e0bffa17 	ldw	r2,-24(fp)
}
  80c658:	e037883a 	mov	sp,fp
  80c65c:	df000017 	ldw	fp,0(sp)
  80c660:	dec00104 	addi	sp,sp,4
  80c664:	f800283a 	ret

0080c668 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80c668:	deffeb04 	addi	sp,sp,-84
  80c66c:	dfc01415 	stw	ra,80(sp)
  80c670:	df001315 	stw	fp,76(sp)
  80c674:	df001304 	addi	fp,sp,76
  80c678:	e13ffb15 	stw	r4,-20(fp)
  80c67c:	e17ffc15 	stw	r5,-16(fp)
  80c680:	e1bffd15 	stw	r6,-12(fp)
  80c684:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80c688:	e0bffc17 	ldw	r2,-16(fp)
  80c68c:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  80c690:	e0bffb17 	ldw	r2,-20(fp)
  80c694:	10800a17 	ldw	r2,40(r2)
  80c698:	e0bff315 	stw	r2,-52(fp)
  80c69c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  80c6a0:	e17ff40b 	ldhu	r5,-48(fp)
  80c6a4:	e1bffa44 	addi	r6,fp,-23
  80c6a8:	e13ff317 	ldw	r4,-52(fp)
  80c6ac:	08096780 	call	809678 <OSSemPend>

  while (space > 0)
  80c6b0:	00006406 	br	80c844 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80c6b4:	e0bffb17 	ldw	r2,-20(fp)
  80c6b8:	10800d17 	ldw	r2,52(r2)
  80c6bc:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  80c6c0:	e0bffb17 	ldw	r2,-20(fp)
  80c6c4:	10800e17 	ldw	r2,56(r2)
  80c6c8:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  80c6cc:	e0fff617 	ldw	r3,-40(fp)
  80c6d0:	e0bff517 	ldw	r2,-44(fp)
  80c6d4:	18800536 	bltu	r3,r2,80c6ec <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  80c6d8:	e0bff617 	ldw	r2,-40(fp)
  80c6dc:	e0fff517 	ldw	r3,-44(fp)
  80c6e0:	10c5c83a 	sub	r2,r2,r3
  80c6e4:	e0bff715 	stw	r2,-36(fp)
  80c6e8:	00000406 	br	80c6fc <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80c6ec:	00820004 	movi	r2,2048
  80c6f0:	e0fff517 	ldw	r3,-44(fp)
  80c6f4:	10c5c83a 	sub	r2,r2,r3
  80c6f8:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  80c6fc:	e0bff717 	ldw	r2,-36(fp)
  80c700:	1005003a 	cmpeq	r2,r2,zero
  80c704:	10001f1e 	bne	r2,zero,80c784 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  80c708:	e0fffd17 	ldw	r3,-12(fp)
  80c70c:	e0bff717 	ldw	r2,-36(fp)
  80c710:	1880022e 	bgeu	r3,r2,80c71c <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  80c714:	e0bffd17 	ldw	r2,-12(fp)
  80c718:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80c71c:	e0bffb17 	ldw	r2,-20(fp)
  80c720:	10c01104 	addi	r3,r2,68
  80c724:	e0bff517 	ldw	r2,-44(fp)
  80c728:	1887883a 	add	r3,r3,r2
  80c72c:	e0bff917 	ldw	r2,-28(fp)
  80c730:	1009883a 	mov	r4,r2
  80c734:	180b883a 	mov	r5,r3
  80c738:	e1bff717 	ldw	r6,-36(fp)
  80c73c:	08011340 	call	801134 <memcpy>
      ptr   += n;
  80c740:	e0fff717 	ldw	r3,-36(fp)
  80c744:	e0bff917 	ldw	r2,-28(fp)
  80c748:	10c5883a 	add	r2,r2,r3
  80c74c:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  80c750:	e0fffd17 	ldw	r3,-12(fp)
  80c754:	e0bff717 	ldw	r2,-36(fp)
  80c758:	1885c83a 	sub	r2,r3,r2
  80c75c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c760:	e0fff517 	ldw	r3,-44(fp)
  80c764:	e0bff717 	ldw	r2,-36(fp)
  80c768:	1885883a 	add	r2,r3,r2
  80c76c:	10c1ffcc 	andi	r3,r2,2047
  80c770:	e0bffb17 	ldw	r2,-20(fp)
  80c774:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  80c778:	e0bffd17 	ldw	r2,-12(fp)
  80c77c:	10800048 	cmpgei	r2,r2,1
  80c780:	103fcc1e 	bne	r2,zero,80c6b4 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80c784:	e0fff917 	ldw	r3,-28(fp)
  80c788:	e0bffc17 	ldw	r2,-16(fp)
  80c78c:	1880301e 	bne	r3,r2,80c850 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80c790:	e0bffe17 	ldw	r2,-8(fp)
  80c794:	1090000c 	andi	r2,r2,16384
  80c798:	1004c03a 	cmpne	r2,r2,zero
  80c79c:	10002c1e 	bne	r2,zero,80c850 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  80c7a0:	00802074 	movhi	r2,129
  80c7a4:	10898f44 	addi	r2,r2,9789
  80c7a8:	10800003 	ldbu	r2,0(r2)
  80c7ac:	10803fcc 	andi	r2,r2,255
  80c7b0:	10800058 	cmpnei	r2,r2,1
  80c7b4:	1000161e 	bne	r2,zero,80c810 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  80c7b8:	e0bffb17 	ldw	r2,-20(fp)
  80c7bc:	10800c17 	ldw	r2,48(r2)
  80c7c0:	e0bff015 	stw	r2,-64(fp)
  80c7c4:	00800144 	movi	r2,5
  80c7c8:	e0bff10d 	sth	r2,-60(fp)
  80c7cc:	00bfe0c4 	movi	r2,-125
  80c7d0:	e0bff185 	stb	r2,-58(fp)
  80c7d4:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80c7d8:	00802074 	movhi	r2,129
  80c7dc:	10898f44 	addi	r2,r2,9789
  80c7e0:	10800003 	ldbu	r2,0(r2)
  80c7e4:	10803fcc 	andi	r2,r2,255
  80c7e8:	1005003a 	cmpeq	r2,r2,zero
  80c7ec:	1000111e 	bne	r2,zero,80c834 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80c7f0:	e17ff10b 	ldhu	r5,-60(fp)
  80c7f4:	e1bff183 	ldbu	r6,-58(fp)
  80c7f8:	e1fff20b 	ldhu	r7,-56(fp)
  80c7fc:	e0bffa04 	addi	r2,fp,-24
  80c800:	d8800015 	stw	r2,0(sp)
  80c804:	e13ff017 	ldw	r4,-64(fp)
  80c808:	08067380 	call	806738 <OSFlagPend>
    return err;
  80c80c:	00000906 	br	80c834 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80c810:	e0bffb17 	ldw	r2,-20(fp)
  80c814:	10c00d17 	ldw	r3,52(r2)
  80c818:	e0bff617 	ldw	r2,-40(fp)
  80c81c:	1880051e 	bne	r3,r2,80c834 <altera_avalon_jtag_uart_read+0x1cc>
  80c820:	e0bffb17 	ldw	r2,-20(fp)
  80c824:	10c00917 	ldw	r3,36(r2)
  80c828:	e0bffb17 	ldw	r2,-20(fp)
  80c82c:	10800117 	ldw	r2,4(r2)
  80c830:	18bff736 	bltu	r3,r2,80c810 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80c834:	e0bffb17 	ldw	r2,-20(fp)
  80c838:	10c00d17 	ldw	r3,52(r2)
  80c83c:	e0bff617 	ldw	r2,-40(fp)
  80c840:	18800326 	beq	r3,r2,80c850 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c844:	e0bffd17 	ldw	r2,-12(fp)
  80c848:	10800048 	cmpgei	r2,r2,1
  80c84c:	103f991e 	bne	r2,zero,80c6b4 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  80c850:	e0bffb17 	ldw	r2,-20(fp)
  80c854:	11000a17 	ldw	r4,40(r2)
  80c858:	0809a700 	call	809a70 <OSSemPost>

  if (ptr != buffer)
  80c85c:	e0fff917 	ldw	r3,-28(fp)
  80c860:	e0bffc17 	ldw	r2,-16(fp)
  80c864:	18801926 	beq	r3,r2,80c8cc <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c868:	0005303a 	rdctl	r2,status
  80c86c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c870:	e0ffef17 	ldw	r3,-68(fp)
  80c874:	00bfff84 	movi	r2,-2
  80c878:	1884703a 	and	r2,r3,r2
  80c87c:	1001703a 	wrctl	status,r2
  
  return context;
  80c880:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80c884:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c888:	e0bffb17 	ldw	r2,-20(fp)
  80c88c:	10800817 	ldw	r2,32(r2)
  80c890:	10c00054 	ori	r3,r2,1
  80c894:	e0bffb17 	ldw	r2,-20(fp)
  80c898:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c89c:	e0bffb17 	ldw	r2,-20(fp)
  80c8a0:	10800017 	ldw	r2,0(r2)
  80c8a4:	11000104 	addi	r4,r2,4
  80c8a8:	e0bffb17 	ldw	r2,-20(fp)
  80c8ac:	10800817 	ldw	r2,32(r2)
  80c8b0:	1007883a 	mov	r3,r2
  80c8b4:	2005883a 	mov	r2,r4
  80c8b8:	10c00035 	stwio	r3,0(r2)
  80c8bc:	e0bff817 	ldw	r2,-32(fp)
  80c8c0:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c8c4:	e0bfee17 	ldw	r2,-72(fp)
  80c8c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80c8cc:	e0fff917 	ldw	r3,-28(fp)
  80c8d0:	e0bffc17 	ldw	r2,-16(fp)
  80c8d4:	18800526 	beq	r3,r2,80c8ec <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  80c8d8:	e0fff917 	ldw	r3,-28(fp)
  80c8dc:	e0bffc17 	ldw	r2,-16(fp)
  80c8e0:	1887c83a 	sub	r3,r3,r2
  80c8e4:	e0ffff15 	stw	r3,-4(fp)
  80c8e8:	00000906 	br	80c910 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  80c8ec:	e0bffe17 	ldw	r2,-8(fp)
  80c8f0:	1090000c 	andi	r2,r2,16384
  80c8f4:	1005003a 	cmpeq	r2,r2,zero
  80c8f8:	1000031e 	bne	r2,zero,80c908 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  80c8fc:	00bffd44 	movi	r2,-11
  80c900:	e0bfff15 	stw	r2,-4(fp)
  80c904:	00000206 	br	80c910 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  80c908:	00bffec4 	movi	r2,-5
  80c90c:	e0bfff15 	stw	r2,-4(fp)
  80c910:	e0bfff17 	ldw	r2,-4(fp)
}
  80c914:	e037883a 	mov	sp,fp
  80c918:	dfc00117 	ldw	ra,4(sp)
  80c91c:	df000017 	ldw	fp,0(sp)
  80c920:	dec00204 	addi	sp,sp,8
  80c924:	f800283a 	ret

0080c928 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80c928:	deffeb04 	addi	sp,sp,-84
  80c92c:	dfc01415 	stw	ra,80(sp)
  80c930:	df001315 	stw	fp,76(sp)
  80c934:	df001304 	addi	fp,sp,76
  80c938:	e13ffb15 	stw	r4,-20(fp)
  80c93c:	e17ffc15 	stw	r5,-16(fp)
  80c940:	e1bffd15 	stw	r6,-12(fp)
  80c944:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80c948:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80c94c:	e0bffc17 	ldw	r2,-16(fp)
  80c950:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  80c954:	e0bffb17 	ldw	r2,-20(fp)
  80c958:	10800b17 	ldw	r2,44(r2)
  80c95c:	e0bff315 	stw	r2,-52(fp)
  80c960:	e03ff40d 	sth	zero,-48(fp)
  80c964:	e17ff40b 	ldhu	r5,-48(fp)
  80c968:	e1bffa04 	addi	r6,fp,-24
  80c96c:	e13ff317 	ldw	r4,-52(fp)
  80c970:	08096780 	call	809678 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c974:	00003a06 	br	80ca60 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80c978:	e0bffb17 	ldw	r2,-20(fp)
  80c97c:	10800f17 	ldw	r2,60(r2)
  80c980:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80c984:	e0bffb17 	ldw	r2,-20(fp)
  80c988:	10801017 	ldw	r2,64(r2)
  80c98c:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  80c990:	e0fff917 	ldw	r3,-28(fp)
  80c994:	e0bff817 	ldw	r2,-32(fp)
  80c998:	1880062e 	bgeu	r3,r2,80c9b4 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  80c99c:	e0fff817 	ldw	r3,-32(fp)
  80c9a0:	e0bff917 	ldw	r2,-28(fp)
  80c9a4:	1885c83a 	sub	r2,r3,r2
  80c9a8:	10bfffc4 	addi	r2,r2,-1
  80c9ac:	e0bff715 	stw	r2,-36(fp)
  80c9b0:	00000c06 	br	80c9e4 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  80c9b4:	e0bff817 	ldw	r2,-32(fp)
  80c9b8:	1005003a 	cmpeq	r2,r2,zero
  80c9bc:	1000051e 	bne	r2,zero,80c9d4 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80c9c0:	00820004 	movi	r2,2048
  80c9c4:	e0fff917 	ldw	r3,-28(fp)
  80c9c8:	10c5c83a 	sub	r2,r2,r3
  80c9cc:	e0bff715 	stw	r2,-36(fp)
  80c9d0:	00000406 	br	80c9e4 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80c9d4:	0081ffc4 	movi	r2,2047
  80c9d8:	e0fff917 	ldw	r3,-28(fp)
  80c9dc:	10c5c83a 	sub	r2,r2,r3
  80c9e0:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  80c9e4:	e0bff717 	ldw	r2,-36(fp)
  80c9e8:	1005003a 	cmpeq	r2,r2,zero
  80c9ec:	10001f1e 	bne	r2,zero,80ca6c <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  80c9f0:	e0fffd17 	ldw	r3,-12(fp)
  80c9f4:	e0bff717 	ldw	r2,-36(fp)
  80c9f8:	1880022e 	bgeu	r3,r2,80ca04 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  80c9fc:	e0bffd17 	ldw	r2,-12(fp)
  80ca00:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80ca04:	e0bffb17 	ldw	r2,-20(fp)
  80ca08:	10c21104 	addi	r3,r2,2116
  80ca0c:	e0bff917 	ldw	r2,-28(fp)
  80ca10:	1885883a 	add	r2,r3,r2
  80ca14:	e0fffc17 	ldw	r3,-16(fp)
  80ca18:	1009883a 	mov	r4,r2
  80ca1c:	180b883a 	mov	r5,r3
  80ca20:	e1bff717 	ldw	r6,-36(fp)
  80ca24:	08011340 	call	801134 <memcpy>
      ptr   += n;
  80ca28:	e0fff717 	ldw	r3,-36(fp)
  80ca2c:	e0bffc17 	ldw	r2,-16(fp)
  80ca30:	10c5883a 	add	r2,r2,r3
  80ca34:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80ca38:	e0fffd17 	ldw	r3,-12(fp)
  80ca3c:	e0bff717 	ldw	r2,-36(fp)
  80ca40:	1885c83a 	sub	r2,r3,r2
  80ca44:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ca48:	e0fff917 	ldw	r3,-28(fp)
  80ca4c:	e0bff717 	ldw	r2,-36(fp)
  80ca50:	1885883a 	add	r2,r3,r2
  80ca54:	10c1ffcc 	andi	r3,r2,2047
  80ca58:	e0bffb17 	ldw	r2,-20(fp)
  80ca5c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ca60:	e0bffd17 	ldw	r2,-12(fp)
  80ca64:	10800048 	cmpgei	r2,r2,1
  80ca68:	103fc31e 	bne	r2,zero,80c978 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ca6c:	0005303a 	rdctl	r2,status
  80ca70:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ca74:	e0fff217 	ldw	r3,-56(fp)
  80ca78:	00bfff84 	movi	r2,-2
  80ca7c:	1884703a 	and	r2,r3,r2
  80ca80:	1001703a 	wrctl	status,r2
  
  return context;
  80ca84:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80ca88:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80ca8c:	e0bffb17 	ldw	r2,-20(fp)
  80ca90:	10800817 	ldw	r2,32(r2)
  80ca94:	10c00094 	ori	r3,r2,2
  80ca98:	e0bffb17 	ldw	r2,-20(fp)
  80ca9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80caa0:	e0bffb17 	ldw	r2,-20(fp)
  80caa4:	10800017 	ldw	r2,0(r2)
  80caa8:	11000104 	addi	r4,r2,4
  80caac:	e0bffb17 	ldw	r2,-20(fp)
  80cab0:	10800817 	ldw	r2,32(r2)
  80cab4:	1007883a 	mov	r3,r2
  80cab8:	2005883a 	mov	r2,r4
  80cabc:	10c00035 	stwio	r3,0(r2)
  80cac0:	e0bff617 	ldw	r2,-40(fp)
  80cac4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cac8:	e0bff117 	ldw	r2,-60(fp)
  80cacc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80cad0:	e0bffd17 	ldw	r2,-12(fp)
  80cad4:	10800050 	cmplti	r2,r2,1
  80cad8:	10002d1e 	bne	r2,zero,80cb90 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  80cadc:	e0bffe17 	ldw	r2,-8(fp)
  80cae0:	1090000c 	andi	r2,r2,16384
  80cae4:	1004c03a 	cmpne	r2,r2,zero
  80cae8:	10002c1e 	bne	r2,zero,80cb9c <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  80caec:	00802074 	movhi	r2,129
  80caf0:	10898f44 	addi	r2,r2,9789
  80caf4:	10800003 	ldbu	r2,0(r2)
  80caf8:	10803fcc 	andi	r2,r2,255
  80cafc:	10800058 	cmpnei	r2,r2,1
  80cb00:	1000161e 	bne	r2,zero,80cb5c <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  80cb04:	e0bffb17 	ldw	r2,-20(fp)
  80cb08:	10800c17 	ldw	r2,48(r2)
  80cb0c:	e0bfee15 	stw	r2,-72(fp)
  80cb10:	00800184 	movi	r2,6
  80cb14:	e0bfef0d 	sth	r2,-68(fp)
  80cb18:	00bfe0c4 	movi	r2,-125
  80cb1c:	e0bfef85 	stb	r2,-66(fp)
  80cb20:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80cb24:	00802074 	movhi	r2,129
  80cb28:	10898f44 	addi	r2,r2,9789
  80cb2c:	10800003 	ldbu	r2,0(r2)
  80cb30:	10803fcc 	andi	r2,r2,255
  80cb34:	1005003a 	cmpeq	r2,r2,zero
  80cb38:	1000111e 	bne	r2,zero,80cb80 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80cb3c:	e17fef0b 	ldhu	r5,-68(fp)
  80cb40:	e1bfef83 	ldbu	r6,-66(fp)
  80cb44:	e1fff00b 	ldhu	r7,-64(fp)
  80cb48:	e0bffa44 	addi	r2,fp,-23
  80cb4c:	d8800015 	stw	r2,0(sp)
  80cb50:	e13fee17 	ldw	r4,-72(fp)
  80cb54:	08067380 	call	806738 <OSFlagPend>
    return err;
  80cb58:	00000906 	br	80cb80 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80cb5c:	e0bffb17 	ldw	r2,-20(fp)
  80cb60:	10c01017 	ldw	r3,64(r2)
  80cb64:	e0bff817 	ldw	r2,-32(fp)
  80cb68:	1880051e 	bne	r3,r2,80cb80 <altera_avalon_jtag_uart_write+0x258>
  80cb6c:	e0bffb17 	ldw	r2,-20(fp)
  80cb70:	10c00917 	ldw	r3,36(r2)
  80cb74:	e0bffb17 	ldw	r2,-20(fp)
  80cb78:	10800117 	ldw	r2,4(r2)
  80cb7c:	18bff736 	bltu	r3,r2,80cb5c <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80cb80:	e0bffb17 	ldw	r2,-20(fp)
  80cb84:	10c01017 	ldw	r3,64(r2)
  80cb88:	e0bff817 	ldw	r2,-32(fp)
  80cb8c:	18800326 	beq	r3,r2,80cb9c <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  80cb90:	e0bffd17 	ldw	r2,-12(fp)
  80cb94:	10800048 	cmpgei	r2,r2,1
  80cb98:	103fb11e 	bne	r2,zero,80ca60 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  80cb9c:	e0bffb17 	ldw	r2,-20(fp)
  80cba0:	11000b17 	ldw	r4,44(r2)
  80cba4:	0809a700 	call	809a70 <OSSemPost>

  if (ptr != start)
  80cba8:	e0fffc17 	ldw	r3,-16(fp)
  80cbac:	e0bff517 	ldw	r2,-44(fp)
  80cbb0:	18800526 	beq	r3,r2,80cbc8 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  80cbb4:	e0fffc17 	ldw	r3,-16(fp)
  80cbb8:	e0bff517 	ldw	r2,-44(fp)
  80cbbc:	1887c83a 	sub	r3,r3,r2
  80cbc0:	e0ffff15 	stw	r3,-4(fp)
  80cbc4:	00000906 	br	80cbec <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  80cbc8:	e0bffe17 	ldw	r2,-8(fp)
  80cbcc:	1090000c 	andi	r2,r2,16384
  80cbd0:	1005003a 	cmpeq	r2,r2,zero
  80cbd4:	1000031e 	bne	r2,zero,80cbe4 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  80cbd8:	00bffd44 	movi	r2,-11
  80cbdc:	e0bfff15 	stw	r2,-4(fp)
  80cbe0:	00000206 	br	80cbec <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  80cbe4:	00bffec4 	movi	r2,-5
  80cbe8:	e0bfff15 	stw	r2,-4(fp)
  80cbec:	e0bfff17 	ldw	r2,-4(fp)
}
  80cbf0:	e037883a 	mov	sp,fp
  80cbf4:	dfc00117 	ldw	ra,4(sp)
  80cbf8:	df000017 	ldw	fp,0(sp)
  80cbfc:	dec00204 	addi	sp,sp,8
  80cc00:	f800283a 	ret

0080cc04 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80cc04:	defff904 	addi	sp,sp,-28
  80cc08:	dfc00615 	stw	ra,24(sp)
  80cc0c:	df000515 	stw	fp,20(sp)
  80cc10:	df000504 	addi	fp,sp,20
  80cc14:	e13ffe15 	stw	r4,-8(fp)
  80cc18:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80cc1c:	e0bffe17 	ldw	r2,-8(fp)
  80cc20:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80cc24:	e0bffe17 	ldw	r2,-8(fp)
  80cc28:	10800104 	addi	r2,r2,4
  80cc2c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cc30:	0005303a 	rdctl	r2,status
  80cc34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cc38:	e0fffc17 	ldw	r3,-16(fp)
  80cc3c:	00bfff84 	movi	r2,-2
  80cc40:	1884703a 	and	r2,r3,r2
  80cc44:	1001703a 	wrctl	status,r2
  
  return context;
  80cc48:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80cc4c:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  80cc50:	080e0500 	call	80e050 <alt_tick>
  80cc54:	e0bffd17 	ldw	r2,-12(fp)
  80cc58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cc5c:	e0bffb17 	ldw	r2,-20(fp)
  80cc60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80cc64:	e037883a 	mov	sp,fp
  80cc68:	dfc00117 	ldw	ra,4(sp)
  80cc6c:	df000017 	ldw	fp,0(sp)
  80cc70:	dec00204 	addi	sp,sp,8
  80cc74:	f800283a 	ret

0080cc78 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80cc78:	defff904 	addi	sp,sp,-28
  80cc7c:	dfc00615 	stw	ra,24(sp)
  80cc80:	df000515 	stw	fp,20(sp)
  80cc84:	df000504 	addi	fp,sp,20
  80cc88:	e13ffc15 	stw	r4,-16(fp)
  80cc8c:	e17ffd15 	stw	r5,-12(fp)
  80cc90:	e1bffe15 	stw	r6,-8(fp)
  80cc94:	e1ffff15 	stw	r7,-4(fp)
  80cc98:	e0bfff17 	ldw	r2,-4(fp)
  80cc9c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80cca0:	00802074 	movhi	r2,129
  80cca4:	1089a404 	addi	r2,r2,9872
  80cca8:	10800017 	ldw	r2,0(r2)
  80ccac:	1004c03a 	cmpne	r2,r2,zero
  80ccb0:	1000041e 	bne	r2,zero,80ccc4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  80ccb4:	00c02074 	movhi	r3,129
  80ccb8:	18c9a404 	addi	r3,r3,9872
  80ccbc:	e0bffb17 	ldw	r2,-20(fp)
  80ccc0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80ccc4:	e0bffc17 	ldw	r2,-16(fp)
  80ccc8:	10800104 	addi	r2,r2,4
  80cccc:	1007883a 	mov	r3,r2
  80ccd0:	008001c4 	movi	r2,7
  80ccd4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  80ccd8:	e13ffe17 	ldw	r4,-8(fp)
  80ccdc:	e17ffc17 	ldw	r5,-16(fp)
  80cce0:	01802074 	movhi	r6,129
  80cce4:	31b30104 	addi	r6,r6,-13308
  80cce8:	080db140 	call	80db14 <alt_irq_register>
#endif  
}
  80ccec:	e037883a 	mov	sp,fp
  80ccf0:	dfc00117 	ldw	ra,4(sp)
  80ccf4:	df000017 	ldw	fp,0(sp)
  80ccf8:	dec00204 	addi	sp,sp,8
  80ccfc:	f800283a 	ret

0080cd00 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  80cd00:	defffc04 	addi	sp,sp,-16
  80cd04:	df000315 	stw	fp,12(sp)
  80cd08:	df000304 	addi	fp,sp,12
  80cd0c:	e13ffe15 	stw	r4,-8(fp)
  80cd10:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  80cd14:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  80cd18:	e0bfff17 	ldw	r2,-4(fp)
  80cd1c:	1004c03a 	cmpne	r2,r2,zero
  80cd20:	1000061e 	bne	r2,zero,80cd3c <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  80cd24:	e0bffe17 	ldw	r2,-8(fp)
  80cd28:	1007883a 	mov	r3,r2
  80cd2c:	e0bffd03 	ldbu	r2,-12(fp)
  80cd30:	10c4b03a 	or	r2,r2,r3
  80cd34:	e0bffd05 	stb	r2,-12(fp)
  80cd38:	00000806 	br	80cd5c <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  80cd3c:	e0bffe17 	ldw	r2,-8(fp)
  80cd40:	1007883a 	mov	r3,r2
  80cd44:	e0bffd03 	ldbu	r2,-12(fp)
  80cd48:	10c4b03a 	or	r2,r2,r3
  80cd4c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  80cd50:	e0bffd03 	ldbu	r2,-12(fp)
  80cd54:	10801014 	ori	r2,r2,64
  80cd58:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  80cd5c:	e0fffd03 	ldbu	r3,-12(fp)
  80cd60:	00bfe004 	movi	r2,-128
  80cd64:	1884b03a 	or	r2,r3,r2
  80cd68:	10803fcc 	andi	r2,r2,255
}
  80cd6c:	e037883a 	mov	sp,fp
  80cd70:	df000017 	ldw	fp,0(sp)
  80cd74:	dec00104 	addi	sp,sp,4
  80cd78:	f800283a 	ret

0080cd7c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  80cd7c:	defffd04 	addi	sp,sp,-12
  80cd80:	df000215 	stw	fp,8(sp)
  80cd84:	df000204 	addi	fp,sp,8
  80cd88:	e13ffe15 	stw	r4,-8(fp)
  80cd8c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  80cd90:	e0bffe17 	ldw	r2,-8(fp)
  80cd94:	10800a17 	ldw	r2,40(r2)
  80cd98:	e0ffff03 	ldbu	r3,-4(fp)
  80cd9c:	10c00025 	stbio	r3,0(r2)
}
  80cda0:	e037883a 	mov	sp,fp
  80cda4:	df000017 	ldw	fp,0(sp)
  80cda8:	dec00104 	addi	sp,sp,4
  80cdac:	f800283a 	ret

0080cdb0 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  80cdb0:	defffe04 	addi	sp,sp,-8
  80cdb4:	df000115 	stw	fp,4(sp)
  80cdb8:	df000104 	addi	fp,sp,4
  80cdbc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  80cdc0:	e0bfff17 	ldw	r2,-4(fp)
  80cdc4:	10800a17 	ldw	r2,40(r2)
  80cdc8:	1007883a 	mov	r3,r2
  80cdcc:	00800044 	movi	r2,1
  80cdd0:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  80cdd4:	e037883a 	mov	sp,fp
  80cdd8:	df000017 	ldw	fp,0(sp)
  80cddc:	dec00104 	addi	sp,sp,4
  80cde0:	f800283a 	ret

0080cde4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  80cde4:	defffc04 	addi	sp,sp,-16
  80cde8:	dfc00315 	stw	ra,12(sp)
  80cdec:	df000215 	stw	fp,8(sp)
  80cdf0:	df000204 	addi	fp,sp,8
  80cdf4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  80cdf8:	e13fff17 	ldw	r4,-4(fp)
  80cdfc:	01402074 	movhi	r5,129
  80ce00:	29429104 	addi	r5,r5,2628
  80ce04:	080d9140 	call	80d914 <alt_find_dev>
  80ce08:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80ce0c:	e0bffe17 	ldw	r2,-8(fp)
}
  80ce10:	e037883a 	mov	sp,fp
  80ce14:	dfc00117 	ldw	ra,4(sp)
  80ce18:	df000017 	ldw	fp,0(sp)
  80ce1c:	dec00204 	addi	sp,sp,8
  80ce20:	f800283a 	ret

0080ce24 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  80ce24:	defffb04 	addi	sp,sp,-20
  80ce28:	df000415 	stw	fp,16(sp)
  80ce2c:	df000404 	addi	fp,sp,16
  80ce30:	e13ffd15 	stw	r4,-12(fp)
  80ce34:	e17ffe15 	stw	r5,-8(fp)
  80ce38:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  80ce3c:	e03ffc15 	stw	zero,-16(fp)
  80ce40:	00000f06 	br	80ce80 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  80ce44:	e0bffd17 	ldw	r2,-12(fp)
  80ce48:	10800a17 	ldw	r2,40(r2)
  80ce4c:	11000044 	addi	r4,r2,1
  80ce50:	e0fffc17 	ldw	r3,-16(fp)
  80ce54:	e0bffe17 	ldw	r2,-8(fp)
  80ce58:	1885883a 	add	r2,r3,r2
  80ce5c:	10800003 	ldbu	r2,0(r2)
  80ce60:	10c03fcc 	andi	r3,r2,255
  80ce64:	18c0201c 	xori	r3,r3,128
  80ce68:	18ffe004 	addi	r3,r3,-128
  80ce6c:	2005883a 	mov	r2,r4
  80ce70:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  80ce74:	e0bffc17 	ldw	r2,-16(fp)
  80ce78:	10800044 	addi	r2,r2,1
  80ce7c:	e0bffc15 	stw	r2,-16(fp)
  80ce80:	e0fffc17 	ldw	r3,-16(fp)
  80ce84:	e0bfff17 	ldw	r2,-4(fp)
  80ce88:	18bfee36 	bltu	r3,r2,80ce44 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  80ce8c:	e037883a 	mov	sp,fp
  80ce90:	df000017 	ldw	fp,0(sp)
  80ce94:	dec00104 	addi	sp,sp,4
  80ce98:	f800283a 	ret

0080ce9c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  80ce9c:	defffd04 	addi	sp,sp,-12
  80cea0:	df000215 	stw	fp,8(sp)
  80cea4:	df000204 	addi	fp,sp,8
  80cea8:	e13ffe15 	stw	r4,-8(fp)
  80ceac:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  80ceb0:	00000d06 	br	80cee8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  80ceb4:	e0bffe17 	ldw	r2,-8(fp)
  80ceb8:	10800a17 	ldw	r2,40(r2)
  80cebc:	11000044 	addi	r4,r2,1
  80cec0:	e0bfff17 	ldw	r2,-4(fp)
  80cec4:	10800003 	ldbu	r2,0(r2)
  80cec8:	10c03fcc 	andi	r3,r2,255
  80cecc:	18c0201c 	xori	r3,r3,128
  80ced0:	18ffe004 	addi	r3,r3,-128
  80ced4:	2005883a 	mov	r2,r4
  80ced8:	10c00025 	stbio	r3,0(r2)
		++ptr;
  80cedc:	e0bfff17 	ldw	r2,-4(fp)
  80cee0:	10800044 	addi	r2,r2,1
  80cee4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  80cee8:	e0bfff17 	ldw	r2,-4(fp)
  80ceec:	10800003 	ldbu	r2,0(r2)
  80cef0:	10803fcc 	andi	r2,r2,255
  80cef4:	1080201c 	xori	r2,r2,128
  80cef8:	10bfe004 	addi	r2,r2,-128
  80cefc:	1004c03a 	cmpne	r2,r2,zero
  80cf00:	103fec1e 	bne	r2,zero,80ceb4 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  80cf04:	e037883a 	mov	sp,fp
  80cf08:	df000017 	ldw	fp,0(sp)
  80cf0c:	dec00104 	addi	sp,sp,4
  80cf10:	f800283a 	ret

0080cf14 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  80cf14:	defffb04 	addi	sp,sp,-20
  80cf18:	dfc00415 	stw	ra,16(sp)
  80cf1c:	df000315 	stw	fp,12(sp)
  80cf20:	df000304 	addi	fp,sp,12
  80cf24:	e13ffd15 	stw	r4,-12(fp)
  80cf28:	e17ffe15 	stw	r5,-8(fp)
  80cf2c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  80cf30:	e0bffd17 	ldw	r2,-12(fp)
  80cf34:	10800017 	ldw	r2,0(r2)
  80cf38:	1009883a 	mov	r4,r2
  80cf3c:	e1bfff17 	ldw	r6,-4(fp)
  80cf40:	e17ffe17 	ldw	r5,-8(fp)
  80cf44:	080ce240 	call	80ce24 <alt_up_character_lcd_write>
	return 0;
  80cf48:	0005883a 	mov	r2,zero
}
  80cf4c:	e037883a 	mov	sp,fp
  80cf50:	dfc00117 	ldw	ra,4(sp)
  80cf54:	df000017 	ldw	fp,0(sp)
  80cf58:	dec00204 	addi	sp,sp,8
  80cf5c:	f800283a 	ret

0080cf60 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  80cf60:	defff904 	addi	sp,sp,-28
  80cf64:	dfc00615 	stw	ra,24(sp)
  80cf68:	df000515 	stw	fp,20(sp)
  80cf6c:	df000504 	addi	fp,sp,20
  80cf70:	e13ffc15 	stw	r4,-16(fp)
  80cf74:	e17ffd15 	stw	r5,-12(fp)
  80cf78:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  80cf7c:	e0bffd17 	ldw	r2,-12(fp)
  80cf80:	10800a28 	cmpgeui	r2,r2,40
  80cf84:	1000031e 	bne	r2,zero,80cf94 <alt_up_character_lcd_set_cursor_pos+0x34>
  80cf88:	e0bffe17 	ldw	r2,-8(fp)
  80cf8c:	108000b0 	cmpltui	r2,r2,2
  80cf90:	1000031e 	bne	r2,zero,80cfa0 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  80cf94:	00bfffc4 	movi	r2,-1
  80cf98:	e0bfff15 	stw	r2,-4(fp)
  80cf9c:	00000806 	br	80cfc0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  80cfa0:	e13ffd17 	ldw	r4,-12(fp)
  80cfa4:	e17ffe17 	ldw	r5,-8(fp)
  80cfa8:	080cd000 	call	80cd00 <get_DDRAM_addr>
  80cfac:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  80cfb0:	e17ffb03 	ldbu	r5,-20(fp)
  80cfb4:	e13ffc17 	ldw	r4,-16(fp)
  80cfb8:	080cd7c0 	call	80cd7c <alt_up_character_lcd_send_cmd>
	return 0;
  80cfbc:	e03fff15 	stw	zero,-4(fp)
  80cfc0:	e0bfff17 	ldw	r2,-4(fp)
}
  80cfc4:	e037883a 	mov	sp,fp
  80cfc8:	dfc00117 	ldw	ra,4(sp)
  80cfcc:	df000017 	ldw	fp,0(sp)
  80cfd0:	dec00204 	addi	sp,sp,8
  80cfd4:	f800283a 	ret

0080cfd8 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  80cfd8:	defff904 	addi	sp,sp,-28
  80cfdc:	dfc00615 	stw	ra,24(sp)
  80cfe0:	df000515 	stw	fp,20(sp)
  80cfe4:	df000504 	addi	fp,sp,20
  80cfe8:	e13ffc15 	stw	r4,-16(fp)
  80cfec:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  80cff0:	e0bffd17 	ldw	r2,-12(fp)
  80cff4:	1005003a 	cmpeq	r2,r2,zero
  80cff8:	10001e1e 	bne	r2,zero,80d074 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  80cffc:	e0bffd17 	ldw	r2,-12(fp)
  80d000:	10800050 	cmplti	r2,r2,1
  80d004:	1000031e 	bne	r2,zero,80d014 <alt_up_character_lcd_shift_cursor+0x3c>
  80d008:	00800504 	movi	r2,20
  80d00c:	e0bfff05 	stb	r2,-4(fp)
  80d010:	00000206 	br	80d01c <alt_up_character_lcd_shift_cursor+0x44>
  80d014:	00c00404 	movi	r3,16
  80d018:	e0ffff05 	stb	r3,-4(fp)
  80d01c:	e0bfff03 	ldbu	r2,-4(fp)
  80d020:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  80d024:	e0fffd17 	ldw	r3,-12(fp)
  80d028:	e0fffe15 	stw	r3,-8(fp)
  80d02c:	e0fffe17 	ldw	r3,-8(fp)
  80d030:	1804403a 	cmpge	r2,r3,zero
  80d034:	1000031e 	bne	r2,zero,80d044 <alt_up_character_lcd_shift_cursor+0x6c>
  80d038:	e0bffe17 	ldw	r2,-8(fp)
  80d03c:	0085c83a 	sub	r2,zero,r2
  80d040:	e0bffe15 	stw	r2,-8(fp)
  80d044:	e0fffe17 	ldw	r3,-8(fp)
  80d048:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  80d04c:	00000306 	br	80d05c <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  80d050:	e17ffb43 	ldbu	r5,-19(fp)
  80d054:	e13ffc17 	ldw	r4,-16(fp)
  80d058:	080cd7c0 	call	80cd7c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  80d05c:	e0bffb03 	ldbu	r2,-20(fp)
  80d060:	10bfffc4 	addi	r2,r2,-1
  80d064:	e0bffb05 	stb	r2,-20(fp)
  80d068:	e0bffb03 	ldbu	r2,-20(fp)
  80d06c:	10803fd8 	cmpnei	r2,r2,255
  80d070:	103ff71e 	bne	r2,zero,80d050 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  80d074:	e037883a 	mov	sp,fp
  80d078:	dfc00117 	ldw	ra,4(sp)
  80d07c:	df000017 	ldw	fp,0(sp)
  80d080:	dec00204 	addi	sp,sp,8
  80d084:	f800283a 	ret

0080d088 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  80d088:	defff904 	addi	sp,sp,-28
  80d08c:	dfc00615 	stw	ra,24(sp)
  80d090:	df000515 	stw	fp,20(sp)
  80d094:	df000504 	addi	fp,sp,20
  80d098:	e13ffc15 	stw	r4,-16(fp)
  80d09c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  80d0a0:	e0bffd17 	ldw	r2,-12(fp)
  80d0a4:	1005003a 	cmpeq	r2,r2,zero
  80d0a8:	10001e1e 	bne	r2,zero,80d124 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  80d0ac:	e0bffd17 	ldw	r2,-12(fp)
  80d0b0:	10800050 	cmplti	r2,r2,1
  80d0b4:	1000031e 	bne	r2,zero,80d0c4 <alt_up_character_lcd_shift_display+0x3c>
  80d0b8:	00800704 	movi	r2,28
  80d0bc:	e0bfff05 	stb	r2,-4(fp)
  80d0c0:	00000206 	br	80d0cc <alt_up_character_lcd_shift_display+0x44>
  80d0c4:	00c00604 	movi	r3,24
  80d0c8:	e0ffff05 	stb	r3,-4(fp)
  80d0cc:	e0bfff03 	ldbu	r2,-4(fp)
  80d0d0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  80d0d4:	e0fffd17 	ldw	r3,-12(fp)
  80d0d8:	e0fffe15 	stw	r3,-8(fp)
  80d0dc:	e0fffe17 	ldw	r3,-8(fp)
  80d0e0:	1804403a 	cmpge	r2,r3,zero
  80d0e4:	1000031e 	bne	r2,zero,80d0f4 <alt_up_character_lcd_shift_display+0x6c>
  80d0e8:	e0bffe17 	ldw	r2,-8(fp)
  80d0ec:	0085c83a 	sub	r2,zero,r2
  80d0f0:	e0bffe15 	stw	r2,-8(fp)
  80d0f4:	e0fffe17 	ldw	r3,-8(fp)
  80d0f8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  80d0fc:	00000306 	br	80d10c <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  80d100:	e17ffb43 	ldbu	r5,-19(fp)
  80d104:	e13ffc17 	ldw	r4,-16(fp)
  80d108:	080cd7c0 	call	80cd7c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  80d10c:	e0bffb03 	ldbu	r2,-20(fp)
  80d110:	10bfffc4 	addi	r2,r2,-1
  80d114:	e0bffb05 	stb	r2,-20(fp)
  80d118:	e0bffb03 	ldbu	r2,-20(fp)
  80d11c:	10803fd8 	cmpnei	r2,r2,255
  80d120:	103ff71e 	bne	r2,zero,80d100 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  80d124:	e037883a 	mov	sp,fp
  80d128:	dfc00117 	ldw	ra,4(sp)
  80d12c:	df000017 	ldw	fp,0(sp)
  80d130:	dec00204 	addi	sp,sp,8
  80d134:	f800283a 	ret

0080d138 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  80d138:	defff904 	addi	sp,sp,-28
  80d13c:	dfc00615 	stw	ra,24(sp)
  80d140:	df000515 	stw	fp,20(sp)
  80d144:	df000504 	addi	fp,sp,20
  80d148:	e13ffc15 	stw	r4,-16(fp)
  80d14c:	e17ffd15 	stw	r5,-12(fp)
  80d150:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  80d154:	e0bffd17 	ldw	r2,-12(fp)
  80d158:	10800a28 	cmpgeui	r2,r2,40
  80d15c:	1000031e 	bne	r2,zero,80d16c <alt_up_character_lcd_erase_pos+0x34>
  80d160:	e0bffe17 	ldw	r2,-8(fp)
  80d164:	108000b0 	cmpltui	r2,r2,2
  80d168:	1000031e 	bne	r2,zero,80d178 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  80d16c:	00bfffc4 	movi	r2,-1
  80d170:	e0bfff15 	stw	r2,-4(fp)
  80d174:	00000e06 	br	80d1b0 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  80d178:	e13ffd17 	ldw	r4,-12(fp)
  80d17c:	e17ffe17 	ldw	r5,-8(fp)
  80d180:	080cd000 	call	80cd00 <get_DDRAM_addr>
  80d184:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  80d188:	e17ffb03 	ldbu	r5,-20(fp)
  80d18c:	e13ffc17 	ldw	r4,-16(fp)
  80d190:	080cd7c0 	call	80cd7c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  80d194:	e0bffc17 	ldw	r2,-16(fp)
  80d198:	10800a17 	ldw	r2,40(r2)
  80d19c:	10800044 	addi	r2,r2,1
  80d1a0:	1007883a 	mov	r3,r2
  80d1a4:	00800084 	movi	r2,2
  80d1a8:	18800025 	stbio	r2,0(r3)
	return 0;
  80d1ac:	e03fff15 	stw	zero,-4(fp)
  80d1b0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d1b4:	e037883a 	mov	sp,fp
  80d1b8:	dfc00117 	ldw	ra,4(sp)
  80d1bc:	df000017 	ldw	fp,0(sp)
  80d1c0:	dec00204 	addi	sp,sp,8
  80d1c4:	f800283a 	ret

0080d1c8 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  80d1c8:	defffd04 	addi	sp,sp,-12
  80d1cc:	dfc00215 	stw	ra,8(sp)
  80d1d0:	df000115 	stw	fp,4(sp)
  80d1d4:	df000104 	addi	fp,sp,4
  80d1d8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  80d1dc:	e13fff17 	ldw	r4,-4(fp)
  80d1e0:	01400304 	movi	r5,12
  80d1e4:	080cd7c0 	call	80cd7c <alt_up_character_lcd_send_cmd>
}
  80d1e8:	e037883a 	mov	sp,fp
  80d1ec:	dfc00117 	ldw	ra,4(sp)
  80d1f0:	df000017 	ldw	fp,0(sp)
  80d1f4:	dec00204 	addi	sp,sp,8
  80d1f8:	f800283a 	ret

0080d1fc <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  80d1fc:	defffd04 	addi	sp,sp,-12
  80d200:	dfc00215 	stw	ra,8(sp)
  80d204:	df000115 	stw	fp,4(sp)
  80d208:	df000104 	addi	fp,sp,4
  80d20c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  80d210:	e13fff17 	ldw	r4,-4(fp)
  80d214:	014003c4 	movi	r5,15
  80d218:	080cd7c0 	call	80cd7c <alt_up_character_lcd_send_cmd>
}
  80d21c:	e037883a 	mov	sp,fp
  80d220:	dfc00117 	ldw	ra,4(sp)
  80d224:	df000017 	ldw	fp,0(sp)
  80d228:	dec00204 	addi	sp,sp,8
  80d22c:	f800283a 	ret

0080d230 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
  80d230:	defffd04 	addi	sp,sp,-12
  80d234:	df000215 	stw	fp,8(sp)
  80d238:	df000204 	addi	fp,sp,8
  80d23c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  80d240:	e0bfff17 	ldw	r2,-4(fp)
  80d244:	10800a17 	ldw	r2,40(r2)
  80d248:	10800104 	addi	r2,r2,4
  80d24c:	10800037 	ldwio	r2,0(r2)
  80d250:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
  80d254:	e0bffe17 	ldw	r2,-8(fp)
  80d258:	10800054 	ori	r2,r2,1
  80d25c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  80d260:	e0bfff17 	ldw	r2,-4(fp)
  80d264:	10800a17 	ldw	r2,40(r2)
  80d268:	10800104 	addi	r2,r2,4
  80d26c:	e0fffe17 	ldw	r3,-8(fp)
  80d270:	10c00035 	stwio	r3,0(r2)
}
  80d274:	e037883a 	mov	sp,fp
  80d278:	df000017 	ldw	fp,0(sp)
  80d27c:	dec00104 	addi	sp,sp,4
  80d280:	f800283a 	ret

0080d284 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
  80d284:	defffd04 	addi	sp,sp,-12
  80d288:	df000215 	stw	fp,8(sp)
  80d28c:	df000204 	addi	fp,sp,8
  80d290:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  80d294:	e0bfff17 	ldw	r2,-4(fp)
  80d298:	10800a17 	ldw	r2,40(r2)
  80d29c:	10800104 	addi	r2,r2,4
  80d2a0:	10800037 	ldwio	r2,0(r2)
  80d2a4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
  80d2a8:	e0fffe17 	ldw	r3,-8(fp)
  80d2ac:	00bfff84 	movi	r2,-2
  80d2b0:	1884703a 	and	r2,r3,r2
  80d2b4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  80d2b8:	e0bfff17 	ldw	r2,-4(fp)
  80d2bc:	10800a17 	ldw	r2,40(r2)
  80d2c0:	10800104 	addi	r2,r2,4
  80d2c4:	e0fffe17 	ldw	r3,-8(fp)
  80d2c8:	10c00035 	stwio	r3,0(r2)
}
  80d2cc:	e037883a 	mov	sp,fp
  80d2d0:	df000017 	ldw	fp,0(sp)
  80d2d4:	dec00104 	addi	sp,sp,4
  80d2d8:	f800283a 	ret

0080d2dc <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
  80d2dc:	defffd04 	addi	sp,sp,-12
  80d2e0:	df000215 	stw	fp,8(sp)
  80d2e4:	df000204 	addi	fp,sp,8
  80d2e8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
  80d2ec:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
  80d2f0:	e0bfff17 	ldw	r2,-4(fp)
  80d2f4:	10800a17 	ldw	r2,40(r2)
  80d2f8:	10800084 	addi	r2,r2,2
  80d2fc:	1080002b 	ldhuio	r2,0(r2)
  80d300:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
  80d304:	e0bffe0b 	ldhu	r2,-8(fp)
}
  80d308:	e037883a 	mov	sp,fp
  80d30c:	df000017 	ldw	fp,0(sp)
  80d310:	dec00104 	addi	sp,sp,4
  80d314:	f800283a 	ret

0080d318 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
  80d318:	defffd04 	addi	sp,sp,-12
  80d31c:	df000215 	stw	fp,8(sp)
  80d320:	df000204 	addi	fp,sp,8
  80d324:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  80d328:	e0bfff17 	ldw	r2,-4(fp)
  80d32c:	10800a17 	ldw	r2,40(r2)
  80d330:	10800104 	addi	r2,r2,4
  80d334:	10800037 	ldwio	r2,0(r2)
  80d338:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
  80d33c:	e0bffe17 	ldw	r2,-8(fp)
  80d340:	10bfffec 	andhi	r2,r2,65535
  80d344:	1004d43a 	srli	r2,r2,16
}
  80d348:	e037883a 	mov	sp,fp
  80d34c:	df000017 	ldw	fp,0(sp)
  80d350:	dec00104 	addi	sp,sp,4
  80d354:	f800283a 	ret

0080d358 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
  80d358:	defffc04 	addi	sp,sp,-16
  80d35c:	df000315 	stw	fp,12(sp)
  80d360:	df000304 	addi	fp,sp,12
  80d364:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
  80d368:	e0bffe17 	ldw	r2,-8(fp)
  80d36c:	1080800c 	andi	r2,r2,512
  80d370:	1004d27a 	srli	r2,r2,9
  80d374:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
  80d378:	e0bffd17 	ldw	r2,-12(fp)
  80d37c:	1005003a 	cmpeq	r2,r2,zero
  80d380:	1000031e 	bne	r2,zero,80d390 <alt_up_rs232_check_parity+0x38>
  80d384:	00bfffc4 	movi	r2,-1
  80d388:	e0bfff15 	stw	r2,-4(fp)
  80d38c:	00000106 	br	80d394 <alt_up_rs232_check_parity+0x3c>
  80d390:	e03fff15 	stw	zero,-4(fp)
  80d394:	e0bfff17 	ldw	r2,-4(fp)
}
  80d398:	e037883a 	mov	sp,fp
  80d39c:	df000017 	ldw	fp,0(sp)
  80d3a0:	dec00104 	addi	sp,sp,4
  80d3a4:	f800283a 	ret

0080d3a8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
  80d3a8:	defffc04 	addi	sp,sp,-16
  80d3ac:	df000315 	stw	fp,12(sp)
  80d3b0:	df000304 	addi	fp,sp,12
  80d3b4:	e13ffe15 	stw	r4,-8(fp)
  80d3b8:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  80d3bc:	e0bffe17 	ldw	r2,-8(fp)
  80d3c0:	10800a17 	ldw	r2,40(r2)
  80d3c4:	10800037 	ldwio	r2,0(r2)
  80d3c8:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
  80d3cc:	e0bffe17 	ldw	r2,-8(fp)
  80d3d0:	10800a17 	ldw	r2,40(r2)
  80d3d4:	e0ffff03 	ldbu	r3,-4(fp)
  80d3d8:	10c00035 	stwio	r3,0(r2)
	return 0;
  80d3dc:	0005883a 	mov	r2,zero
}
  80d3e0:	e037883a 	mov	sp,fp
  80d3e4:	df000017 	ldw	fp,0(sp)
  80d3e8:	dec00104 	addi	sp,sp,4
  80d3ec:	f800283a 	ret

0080d3f0 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
  80d3f0:	defffa04 	addi	sp,sp,-24
  80d3f4:	dfc00515 	stw	ra,20(sp)
  80d3f8:	df000415 	stw	fp,16(sp)
  80d3fc:	df000404 	addi	fp,sp,16
  80d400:	e13ffd15 	stw	r4,-12(fp)
  80d404:	e17ffe15 	stw	r5,-8(fp)
  80d408:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  80d40c:	e0bffd17 	ldw	r2,-12(fp)
  80d410:	10800a17 	ldw	r2,40(r2)
  80d414:	10800037 	ldwio	r2,0(r2)
  80d418:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
  80d41c:	e0bffc17 	ldw	r2,-16(fp)
  80d420:	1007883a 	mov	r3,r2
  80d424:	e0bffe17 	ldw	r2,-8(fp)
  80d428:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
  80d42c:	e13ffc17 	ldw	r4,-16(fp)
  80d430:	080d3580 	call	80d358 <alt_up_rs232_check_parity>
  80d434:	1007883a 	mov	r3,r2
  80d438:	e0bfff17 	ldw	r2,-4(fp)
  80d43c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
  80d440:	e0bffc17 	ldw	r2,-16(fp)
  80d444:	10a0000c 	andi	r2,r2,32768
  80d448:	1004d3fa 	srli	r2,r2,15
  80d44c:	10bfffc4 	addi	r2,r2,-1
}
  80d450:	e037883a 	mov	sp,fp
  80d454:	dfc00117 	ldw	ra,4(sp)
  80d458:	df000017 	ldw	fp,0(sp)
  80d45c:	dec00204 	addi	sp,sp,8
  80d460:	f800283a 	ret

0080d464 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
  80d464:	defff804 	addi	sp,sp,-32
  80d468:	dfc00715 	stw	ra,28(sp)
  80d46c:	df000615 	stw	fp,24(sp)
  80d470:	df000604 	addi	fp,sp,24
  80d474:	e13ffd15 	stw	r4,-12(fp)
  80d478:	e17ffe15 	stw	r5,-8(fp)
  80d47c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  80d480:	e0bffd17 	ldw	r2,-12(fp)
  80d484:	10800017 	ldw	r2,0(r2)
  80d488:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
  80d48c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
  80d490:	00000c06 	br	80d4c4 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
  80d494:	e17ffe17 	ldw	r5,-8(fp)
  80d498:	e0bffe17 	ldw	r2,-8(fp)
  80d49c:	10800044 	addi	r2,r2,1
  80d4a0:	e0bffe15 	stw	r2,-8(fp)
  80d4a4:	e1bffc04 	addi	r6,fp,-16
  80d4a8:	e13ffb17 	ldw	r4,-20(fp)
  80d4ac:	080d3f00 	call	80d3f0 <alt_up_rs232_read_data>
  80d4b0:	1004c03a 	cmpne	r2,r2,zero
  80d4b4:	1000091e 	bne	r2,zero,80d4dc <alt_up_rs232_read_fd+0x78>
			count++;
  80d4b8:	e0bffa17 	ldw	r2,-24(fp)
  80d4bc:	10800044 	addi	r2,r2,1
  80d4c0:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
  80d4c4:	e0bfff17 	ldw	r2,-4(fp)
  80d4c8:	10bfffc4 	addi	r2,r2,-1
  80d4cc:	e0bfff15 	stw	r2,-4(fp)
  80d4d0:	e0bfff17 	ldw	r2,-4(fp)
  80d4d4:	10bfffd8 	cmpnei	r2,r2,-1
  80d4d8:	103fee1e 	bne	r2,zero,80d494 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
  80d4dc:	e0bffa17 	ldw	r2,-24(fp)
}
  80d4e0:	e037883a 	mov	sp,fp
  80d4e4:	dfc00117 	ldw	ra,4(sp)
  80d4e8:	df000017 	ldw	fp,0(sp)
  80d4ec:	dec00204 	addi	sp,sp,8
  80d4f0:	f800283a 	ret

0080d4f4 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
  80d4f4:	defff904 	addi	sp,sp,-28
  80d4f8:	dfc00615 	stw	ra,24(sp)
  80d4fc:	df000515 	stw	fp,20(sp)
  80d500:	df000504 	addi	fp,sp,20
  80d504:	e13ffd15 	stw	r4,-12(fp)
  80d508:	e17ffe15 	stw	r5,-8(fp)
  80d50c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  80d510:	e0bffd17 	ldw	r2,-12(fp)
  80d514:	10800017 	ldw	r2,0(r2)
  80d518:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
  80d51c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
  80d520:	00000d06 	br	80d558 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
  80d524:	e0bffe17 	ldw	r2,-8(fp)
  80d528:	10800003 	ldbu	r2,0(r2)
  80d52c:	11403fcc 	andi	r5,r2,255
  80d530:	e13ffc17 	ldw	r4,-16(fp)
  80d534:	080d3a80 	call	80d3a8 <alt_up_rs232_write_data>
  80d538:	1004c03a 	cmpne	r2,r2,zero
  80d53c:	10000c1e 	bne	r2,zero,80d570 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
  80d540:	e0bffb17 	ldw	r2,-20(fp)
  80d544:	10800044 	addi	r2,r2,1
  80d548:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
  80d54c:	e0bffe17 	ldw	r2,-8(fp)
  80d550:	10800044 	addi	r2,r2,1
  80d554:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
  80d558:	e0bfff17 	ldw	r2,-4(fp)
  80d55c:	10bfffc4 	addi	r2,r2,-1
  80d560:	e0bfff15 	stw	r2,-4(fp)
  80d564:	e0bfff17 	ldw	r2,-4(fp)
  80d568:	10bfffd8 	cmpnei	r2,r2,-1
  80d56c:	103fed1e 	bne	r2,zero,80d524 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
  80d570:	e0bffb17 	ldw	r2,-20(fp)
}
  80d574:	e037883a 	mov	sp,fp
  80d578:	dfc00117 	ldw	ra,4(sp)
  80d57c:	df000017 	ldw	fp,0(sp)
  80d580:	dec00204 	addi	sp,sp,8
  80d584:	f800283a 	ret

0080d588 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
  80d588:	defffc04 	addi	sp,sp,-16
  80d58c:	dfc00315 	stw	ra,12(sp)
  80d590:	df000215 	stw	fp,8(sp)
  80d594:	df000204 	addi	fp,sp,8
  80d598:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
  80d59c:	e13fff17 	ldw	r4,-4(fp)
  80d5a0:	01402074 	movhi	r5,129
  80d5a4:	29429104 	addi	r5,r5,2628
  80d5a8:	080d9140 	call	80d914 <alt_find_dev>
  80d5ac:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80d5b0:	e0bffe17 	ldw	r2,-8(fp)
}
  80d5b4:	e037883a 	mov	sp,fp
  80d5b8:	dfc00117 	ldw	ra,4(sp)
  80d5bc:	df000017 	ldw	fp,0(sp)
  80d5c0:	dec00204 	addi	sp,sp,8
  80d5c4:	f800283a 	ret

0080d5c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80d5c8:	defff404 	addi	sp,sp,-48
  80d5cc:	df000b15 	stw	fp,44(sp)
  80d5d0:	df000b04 	addi	fp,sp,44
  80d5d4:	e13ffb15 	stw	r4,-20(fp)
  80d5d8:	e17ffc15 	stw	r5,-16(fp)
  80d5dc:	e1bffd15 	stw	r6,-12(fp)
  80d5e0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80d5e4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80d5e8:	00802074 	movhi	r2,129
  80d5ec:	1089a404 	addi	r2,r2,9872
  80d5f0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80d5f4:	1005003a 	cmpeq	r2,r2,zero
  80d5f8:	1000411e 	bne	r2,zero,80d700 <alt_alarm_start+0x138>
  {
    if (alarm)
  80d5fc:	e0bffb17 	ldw	r2,-20(fp)
  80d600:	1005003a 	cmpeq	r2,r2,zero
  80d604:	10003b1e 	bne	r2,zero,80d6f4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80d608:	e0fffb17 	ldw	r3,-20(fp)
  80d60c:	e0bffd17 	ldw	r2,-12(fp)
  80d610:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80d614:	e0fffb17 	ldw	r3,-20(fp)
  80d618:	e0bffe17 	ldw	r2,-8(fp)
  80d61c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d620:	0005303a 	rdctl	r2,status
  80d624:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d628:	e0fff817 	ldw	r3,-32(fp)
  80d62c:	00bfff84 	movi	r2,-2
  80d630:	1884703a 	and	r2,r3,r2
  80d634:	1001703a 	wrctl	status,r2
  
  return context;
  80d638:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80d63c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80d640:	00802074 	movhi	r2,129
  80d644:	1089a504 	addi	r2,r2,9876
  80d648:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80d64c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80d650:	e0fffc17 	ldw	r3,-16(fp)
  80d654:	e0bff917 	ldw	r2,-28(fp)
  80d658:	1885883a 	add	r2,r3,r2
  80d65c:	10c00044 	addi	r3,r2,1
  80d660:	e0bffb17 	ldw	r2,-20(fp)
  80d664:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80d668:	e0bffb17 	ldw	r2,-20(fp)
  80d66c:	10c00217 	ldw	r3,8(r2)
  80d670:	e0bff917 	ldw	r2,-28(fp)
  80d674:	1880042e 	bgeu	r3,r2,80d688 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80d678:	e0fffb17 	ldw	r3,-20(fp)
  80d67c:	00800044 	movi	r2,1
  80d680:	18800405 	stb	r2,16(r3)
  80d684:	00000206 	br	80d690 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80d688:	e0bffb17 	ldw	r2,-20(fp)
  80d68c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80d690:	e0fffb17 	ldw	r3,-20(fp)
  80d694:	00802074 	movhi	r2,129
  80d698:	1082b604 	addi	r2,r2,2776
  80d69c:	e0bff615 	stw	r2,-40(fp)
  80d6a0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80d6a4:	e0fff717 	ldw	r3,-36(fp)
  80d6a8:	e0bff617 	ldw	r2,-40(fp)
  80d6ac:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80d6b0:	e0bff617 	ldw	r2,-40(fp)
  80d6b4:	10c00017 	ldw	r3,0(r2)
  80d6b8:	e0bff717 	ldw	r2,-36(fp)
  80d6bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80d6c0:	e0bff617 	ldw	r2,-40(fp)
  80d6c4:	10c00017 	ldw	r3,0(r2)
  80d6c8:	e0bff717 	ldw	r2,-36(fp)
  80d6cc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80d6d0:	e0fff617 	ldw	r3,-40(fp)
  80d6d4:	e0bff717 	ldw	r2,-36(fp)
  80d6d8:	18800015 	stw	r2,0(r3)
  80d6dc:	e0bffa17 	ldw	r2,-24(fp)
  80d6e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d6e4:	e0bff517 	ldw	r2,-44(fp)
  80d6e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80d6ec:	e03fff15 	stw	zero,-4(fp)
  80d6f0:	00000506 	br	80d708 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80d6f4:	00bffa84 	movi	r2,-22
  80d6f8:	e0bfff15 	stw	r2,-4(fp)
  80d6fc:	00000206 	br	80d708 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80d700:	00bfde84 	movi	r2,-134
  80d704:	e0bfff15 	stw	r2,-4(fp)
  80d708:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80d70c:	e037883a 	mov	sp,fp
  80d710:	df000017 	ldw	fp,0(sp)
  80d714:	dec00104 	addi	sp,sp,4
  80d718:	f800283a 	ret

0080d71c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80d71c:	deffff04 	addi	sp,sp,-4
  80d720:	df000015 	stw	fp,0(sp)
  80d724:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80d728:	e037883a 	mov	sp,fp
  80d72c:	df000017 	ldw	fp,0(sp)
  80d730:	dec00104 	addi	sp,sp,4
  80d734:	f800283a 	ret

0080d738 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80d738:	defff904 	addi	sp,sp,-28
  80d73c:	dfc00615 	stw	ra,24(sp)
  80d740:	df000515 	stw	fp,20(sp)
  80d744:	df000504 	addi	fp,sp,20
  80d748:	e13ffd15 	stw	r4,-12(fp)
  80d74c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80d750:	e0bffd17 	ldw	r2,-12(fp)
  80d754:	1005003a 	cmpeq	r2,r2,zero
  80d758:	1000041e 	bne	r2,zero,80d76c <alt_dev_llist_insert+0x34>
  80d75c:	e0bffd17 	ldw	r2,-12(fp)
  80d760:	10800217 	ldw	r2,8(r2)
  80d764:	1004c03a 	cmpne	r2,r2,zero
  80d768:	1000071e 	bne	r2,zero,80d788 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80d76c:	080d7ec0 	call	80d7ec <alt_get_errno>
  80d770:	1007883a 	mov	r3,r2
  80d774:	00800584 	movi	r2,22
  80d778:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80d77c:	00bffa84 	movi	r2,-22
  80d780:	e0bfff15 	stw	r2,-4(fp)
  80d784:	00001306 	br	80d7d4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80d788:	e0fffd17 	ldw	r3,-12(fp)
  80d78c:	e0bffe17 	ldw	r2,-8(fp)
  80d790:	e0bffb15 	stw	r2,-20(fp)
  80d794:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80d798:	e0fffc17 	ldw	r3,-16(fp)
  80d79c:	e0bffb17 	ldw	r2,-20(fp)
  80d7a0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80d7a4:	e0bffb17 	ldw	r2,-20(fp)
  80d7a8:	10c00017 	ldw	r3,0(r2)
  80d7ac:	e0bffc17 	ldw	r2,-16(fp)
  80d7b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80d7b4:	e0bffb17 	ldw	r2,-20(fp)
  80d7b8:	10c00017 	ldw	r3,0(r2)
  80d7bc:	e0bffc17 	ldw	r2,-16(fp)
  80d7c0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80d7c4:	e0fffb17 	ldw	r3,-20(fp)
  80d7c8:	e0bffc17 	ldw	r2,-16(fp)
  80d7cc:	18800015 	stw	r2,0(r3)

  return 0;  
  80d7d0:	e03fff15 	stw	zero,-4(fp)
  80d7d4:	e0bfff17 	ldw	r2,-4(fp)
}
  80d7d8:	e037883a 	mov	sp,fp
  80d7dc:	dfc00117 	ldw	ra,4(sp)
  80d7e0:	df000017 	ldw	fp,0(sp)
  80d7e4:	dec00204 	addi	sp,sp,8
  80d7e8:	f800283a 	ret

0080d7ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d7ec:	defffd04 	addi	sp,sp,-12
  80d7f0:	dfc00215 	stw	ra,8(sp)
  80d7f4:	df000115 	stw	fp,4(sp)
  80d7f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d7fc:	00802074 	movhi	r2,129
  80d800:	10829404 	addi	r2,r2,2640
  80d804:	10800017 	ldw	r2,0(r2)
  80d808:	1005003a 	cmpeq	r2,r2,zero
  80d80c:	1000061e 	bne	r2,zero,80d828 <alt_get_errno+0x3c>
  80d810:	00802074 	movhi	r2,129
  80d814:	10829404 	addi	r2,r2,2640
  80d818:	10800017 	ldw	r2,0(r2)
  80d81c:	103ee83a 	callr	r2
  80d820:	e0bfff15 	stw	r2,-4(fp)
  80d824:	00000306 	br	80d834 <alt_get_errno+0x48>
  80d828:	00802074 	movhi	r2,129
  80d82c:	10898604 	addi	r2,r2,9752
  80d830:	e0bfff15 	stw	r2,-4(fp)
  80d834:	e0bfff17 	ldw	r2,-4(fp)
}
  80d838:	e037883a 	mov	sp,fp
  80d83c:	dfc00117 	ldw	ra,4(sp)
  80d840:	df000017 	ldw	fp,0(sp)
  80d844:	dec00204 	addi	sp,sp,8
  80d848:	f800283a 	ret

0080d84c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80d84c:	defffd04 	addi	sp,sp,-12
  80d850:	dfc00215 	stw	ra,8(sp)
  80d854:	df000115 	stw	fp,4(sp)
  80d858:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80d85c:	00bfff04 	movi	r2,-4
  80d860:	00c02074 	movhi	r3,129
  80d864:	18fb7c04 	addi	r3,r3,-4624
  80d868:	1885883a 	add	r2,r3,r2
  80d86c:	e0bfff15 	stw	r2,-4(fp)
  80d870:	00000606 	br	80d88c <_do_ctors+0x40>
        (*ctor) (); 
  80d874:	e0bfff17 	ldw	r2,-4(fp)
  80d878:	10800017 	ldw	r2,0(r2)
  80d87c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80d880:	e0bfff17 	ldw	r2,-4(fp)
  80d884:	10bfff04 	addi	r2,r2,-4
  80d888:	e0bfff15 	stw	r2,-4(fp)
  80d88c:	e0ffff17 	ldw	r3,-4(fp)
  80d890:	00802074 	movhi	r2,129
  80d894:	10bb7b04 	addi	r2,r2,-4628
  80d898:	18bff62e 	bgeu	r3,r2,80d874 <_do_ctors+0x28>
        (*ctor) (); 
}
  80d89c:	e037883a 	mov	sp,fp
  80d8a0:	dfc00117 	ldw	ra,4(sp)
  80d8a4:	df000017 	ldw	fp,0(sp)
  80d8a8:	dec00204 	addi	sp,sp,8
  80d8ac:	f800283a 	ret

0080d8b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80d8b0:	defffd04 	addi	sp,sp,-12
  80d8b4:	dfc00215 	stw	ra,8(sp)
  80d8b8:	df000115 	stw	fp,4(sp)
  80d8bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80d8c0:	00bfff04 	movi	r2,-4
  80d8c4:	00c02074 	movhi	r3,129
  80d8c8:	18fb7c04 	addi	r3,r3,-4624
  80d8cc:	1885883a 	add	r2,r3,r2
  80d8d0:	e0bfff15 	stw	r2,-4(fp)
  80d8d4:	00000606 	br	80d8f0 <_do_dtors+0x40>
        (*dtor) (); 
  80d8d8:	e0bfff17 	ldw	r2,-4(fp)
  80d8dc:	10800017 	ldw	r2,0(r2)
  80d8e0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80d8e4:	e0bfff17 	ldw	r2,-4(fp)
  80d8e8:	10bfff04 	addi	r2,r2,-4
  80d8ec:	e0bfff15 	stw	r2,-4(fp)
  80d8f0:	e0ffff17 	ldw	r3,-4(fp)
  80d8f4:	00802074 	movhi	r2,129
  80d8f8:	10bb7c04 	addi	r2,r2,-4624
  80d8fc:	18bff62e 	bgeu	r3,r2,80d8d8 <_do_dtors+0x28>
        (*dtor) (); 
}
  80d900:	e037883a 	mov	sp,fp
  80d904:	dfc00117 	ldw	ra,4(sp)
  80d908:	df000017 	ldw	fp,0(sp)
  80d90c:	dec00204 	addi	sp,sp,8
  80d910:	f800283a 	ret

0080d914 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80d914:	defff904 	addi	sp,sp,-28
  80d918:	dfc00615 	stw	ra,24(sp)
  80d91c:	df000515 	stw	fp,20(sp)
  80d920:	df000504 	addi	fp,sp,20
  80d924:	e13ffd15 	stw	r4,-12(fp)
  80d928:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80d92c:	e0bffe17 	ldw	r2,-8(fp)
  80d930:	10800017 	ldw	r2,0(r2)
  80d934:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80d938:	e13ffd17 	ldw	r4,-12(fp)
  80d93c:	08004000 	call	800400 <strlen>
  80d940:	10800044 	addi	r2,r2,1
  80d944:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80d948:	00000d06 	br	80d980 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80d94c:	e0bffc17 	ldw	r2,-16(fp)
  80d950:	11000217 	ldw	r4,8(r2)
  80d954:	e1bffb17 	ldw	r6,-20(fp)
  80d958:	e17ffd17 	ldw	r5,-12(fp)
  80d95c:	080e8d80 	call	80e8d8 <memcmp>
  80d960:	1004c03a 	cmpne	r2,r2,zero
  80d964:	1000031e 	bne	r2,zero,80d974 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80d968:	e0bffc17 	ldw	r2,-16(fp)
  80d96c:	e0bfff15 	stw	r2,-4(fp)
  80d970:	00000706 	br	80d990 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80d974:	e0bffc17 	ldw	r2,-16(fp)
  80d978:	10800017 	ldw	r2,0(r2)
  80d97c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80d980:	e0fffe17 	ldw	r3,-8(fp)
  80d984:	e0bffc17 	ldw	r2,-16(fp)
  80d988:	10fff01e 	bne	r2,r3,80d94c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80d98c:	e03fff15 	stw	zero,-4(fp)
  80d990:	e0bfff17 	ldw	r2,-4(fp)
}
  80d994:	e037883a 	mov	sp,fp
  80d998:	dfc00117 	ldw	ra,4(sp)
  80d99c:	df000017 	ldw	fp,0(sp)
  80d9a0:	dec00204 	addi	sp,sp,8
  80d9a4:	f800283a 	ret

0080d9a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80d9a8:	deffff04 	addi	sp,sp,-4
  80d9ac:	df000015 	stw	fp,0(sp)
  80d9b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  80d9b4:	e037883a 	mov	sp,fp
  80d9b8:	df000017 	ldw	fp,0(sp)
  80d9bc:	dec00104 	addi	sp,sp,4
  80d9c0:	f800283a 	ret

0080d9c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80d9c4:	defff804 	addi	sp,sp,-32
  80d9c8:	dfc00715 	stw	ra,28(sp)
  80d9cc:	df000615 	stw	fp,24(sp)
  80d9d0:	dc000515 	stw	r16,20(sp)
  80d9d4:	df000504 	addi	fp,sp,20
  80d9d8:	e13ffc15 	stw	r4,-16(fp)
  80d9dc:	e17ffd15 	stw	r5,-12(fp)
  80d9e0:	e1bffe15 	stw	r6,-8(fp)
  80d9e4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80d9e8:	e13ffd17 	ldw	r4,-12(fp)
  80d9ec:	e17ffe17 	ldw	r5,-8(fp)
  80d9f0:	e1bfff17 	ldw	r6,-4(fp)
  80d9f4:	080ddcc0 	call	80ddcc <open>
  80d9f8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80d9fc:	e0bffb17 	ldw	r2,-20(fp)
  80da00:	1004803a 	cmplt	r2,r2,zero
  80da04:	10001f1e 	bne	r2,zero,80da84 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80da08:	e13ffb17 	ldw	r4,-20(fp)
  80da0c:	04002074 	movhi	r16,129
  80da10:	843dfa04 	addi	r16,r16,-2072
  80da14:	01400304 	movi	r5,12
  80da18:	0802c900 	call	802c90 <__mulsi3>
  80da1c:	1405883a 	add	r2,r2,r16
  80da20:	10c00017 	ldw	r3,0(r2)
  80da24:	e0bffc17 	ldw	r2,-16(fp)
  80da28:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80da2c:	e13ffb17 	ldw	r4,-20(fp)
  80da30:	04002074 	movhi	r16,129
  80da34:	843dfa04 	addi	r16,r16,-2072
  80da38:	01400304 	movi	r5,12
  80da3c:	0802c900 	call	802c90 <__mulsi3>
  80da40:	1405883a 	add	r2,r2,r16
  80da44:	10800104 	addi	r2,r2,4
  80da48:	10c00017 	ldw	r3,0(r2)
  80da4c:	e0bffc17 	ldw	r2,-16(fp)
  80da50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80da54:	e13ffb17 	ldw	r4,-20(fp)
  80da58:	04002074 	movhi	r16,129
  80da5c:	843dfa04 	addi	r16,r16,-2072
  80da60:	01400304 	movi	r5,12
  80da64:	0802c900 	call	802c90 <__mulsi3>
  80da68:	1405883a 	add	r2,r2,r16
  80da6c:	10800204 	addi	r2,r2,8
  80da70:	10c00017 	ldw	r3,0(r2)
  80da74:	e0bffc17 	ldw	r2,-16(fp)
  80da78:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80da7c:	e13ffb17 	ldw	r4,-20(fp)
  80da80:	080353c0 	call	80353c <alt_release_fd>
  }
} 
  80da84:	e037883a 	mov	sp,fp
  80da88:	dfc00217 	ldw	ra,8(sp)
  80da8c:	df000117 	ldw	fp,4(sp)
  80da90:	dc000017 	ldw	r16,0(sp)
  80da94:	dec00304 	addi	sp,sp,12
  80da98:	f800283a 	ret

0080da9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80da9c:	defffb04 	addi	sp,sp,-20
  80daa0:	dfc00415 	stw	ra,16(sp)
  80daa4:	df000315 	stw	fp,12(sp)
  80daa8:	df000304 	addi	fp,sp,12
  80daac:	e13ffd15 	stw	r4,-12(fp)
  80dab0:	e17ffe15 	stw	r5,-8(fp)
  80dab4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80dab8:	01002074 	movhi	r4,129
  80dabc:	213dfd04 	addi	r4,r4,-2060
  80dac0:	e17ffd17 	ldw	r5,-12(fp)
  80dac4:	01800044 	movi	r6,1
  80dac8:	01c07fc4 	movi	r7,511
  80dacc:	080d9c40 	call	80d9c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80dad0:	01002074 	movhi	r4,129
  80dad4:	213dfa04 	addi	r4,r4,-2072
  80dad8:	e17ffe17 	ldw	r5,-8(fp)
  80dadc:	000d883a 	mov	r6,zero
  80dae0:	01c07fc4 	movi	r7,511
  80dae4:	080d9c40 	call	80d9c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80dae8:	01002074 	movhi	r4,129
  80daec:	213e0004 	addi	r4,r4,-2048
  80daf0:	e17fff17 	ldw	r5,-4(fp)
  80daf4:	01800044 	movi	r6,1
  80daf8:	01c07fc4 	movi	r7,511
  80dafc:	080d9c40 	call	80d9c4 <alt_open_fd>
}  
  80db00:	e037883a 	mov	sp,fp
  80db04:	dfc00117 	ldw	ra,4(sp)
  80db08:	df000017 	ldw	fp,0(sp)
  80db0c:	dec00204 	addi	sp,sp,8
  80db10:	f800283a 	ret

0080db14 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80db14:	deffef04 	addi	sp,sp,-68
  80db18:	df001015 	stw	fp,64(sp)
  80db1c:	df001004 	addi	fp,sp,64
  80db20:	e13ffc15 	stw	r4,-16(fp)
  80db24:	e17ffd15 	stw	r5,-12(fp)
  80db28:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80db2c:	00bffa84 	movi	r2,-22
  80db30:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80db34:	e0bffc17 	ldw	r2,-16(fp)
  80db38:	10800828 	cmpgeui	r2,r2,32
  80db3c:	1000601e 	bne	r2,zero,80dcc0 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80db40:	0005303a 	rdctl	r2,status
  80db44:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80db48:	e0fff917 	ldw	r3,-28(fp)
  80db4c:	00bfff84 	movi	r2,-2
  80db50:	1884703a 	and	r2,r3,r2
  80db54:	1001703a 	wrctl	status,r2
  
  return context;
  80db58:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80db5c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  80db60:	e0bffc17 	ldw	r2,-16(fp)
  80db64:	00c02074 	movhi	r3,129
  80db68:	18de3904 	addi	r3,r3,30948
  80db6c:	100490fa 	slli	r2,r2,3
  80db70:	10c7883a 	add	r3,r2,r3
  80db74:	e0bffe17 	ldw	r2,-8(fp)
  80db78:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  80db7c:	e0bffc17 	ldw	r2,-16(fp)
  80db80:	00c02074 	movhi	r3,129
  80db84:	18de3904 	addi	r3,r3,30948
  80db88:	100490fa 	slli	r2,r2,3
  80db8c:	10c5883a 	add	r2,r2,r3
  80db90:	10c00104 	addi	r3,r2,4
  80db94:	e0bffd17 	ldw	r2,-12(fp)
  80db98:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80db9c:	e0bffe17 	ldw	r2,-8(fp)
  80dba0:	1005003a 	cmpeq	r2,r2,zero
  80dba4:	1000201e 	bne	r2,zero,80dc28 <alt_irq_register+0x114>
  80dba8:	e0bffc17 	ldw	r2,-16(fp)
  80dbac:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dbb0:	0005303a 	rdctl	r2,status
  80dbb4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dbb8:	e0fff617 	ldw	r3,-40(fp)
  80dbbc:	00bfff84 	movi	r2,-2
  80dbc0:	1884703a 	and	r2,r3,r2
  80dbc4:	1001703a 	wrctl	status,r2
  
  return context;
  80dbc8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80dbcc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80dbd0:	e0fff717 	ldw	r3,-36(fp)
  80dbd4:	00800044 	movi	r2,1
  80dbd8:	10c4983a 	sll	r2,r2,r3
  80dbdc:	1007883a 	mov	r3,r2
  80dbe0:	00802074 	movhi	r2,129
  80dbe4:	1089a304 	addi	r2,r2,9868
  80dbe8:	10800017 	ldw	r2,0(r2)
  80dbec:	1886b03a 	or	r3,r3,r2
  80dbf0:	00802074 	movhi	r2,129
  80dbf4:	1089a304 	addi	r2,r2,9868
  80dbf8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80dbfc:	00802074 	movhi	r2,129
  80dc00:	1089a304 	addi	r2,r2,9868
  80dc04:	10800017 	ldw	r2,0(r2)
  80dc08:	100170fa 	wrctl	ienable,r2
  80dc0c:	e0bff817 	ldw	r2,-32(fp)
  80dc10:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dc14:	e0bff517 	ldw	r2,-44(fp)
  80dc18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80dc1c:	0005883a 	mov	r2,zero
  80dc20:	e0bfff15 	stw	r2,-4(fp)
  80dc24:	00002006 	br	80dca8 <alt_irq_register+0x194>
  80dc28:	e0bffc17 	ldw	r2,-16(fp)
  80dc2c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dc30:	0005303a 	rdctl	r2,status
  80dc34:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dc38:	e0fff217 	ldw	r3,-56(fp)
  80dc3c:	00bfff84 	movi	r2,-2
  80dc40:	1884703a 	and	r2,r3,r2
  80dc44:	1001703a 	wrctl	status,r2
  
  return context;
  80dc48:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80dc4c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  80dc50:	e0fff317 	ldw	r3,-52(fp)
  80dc54:	00800044 	movi	r2,1
  80dc58:	10c4983a 	sll	r2,r2,r3
  80dc5c:	0084303a 	nor	r2,zero,r2
  80dc60:	1007883a 	mov	r3,r2
  80dc64:	00802074 	movhi	r2,129
  80dc68:	1089a304 	addi	r2,r2,9868
  80dc6c:	10800017 	ldw	r2,0(r2)
  80dc70:	1886703a 	and	r3,r3,r2
  80dc74:	00802074 	movhi	r2,129
  80dc78:	1089a304 	addi	r2,r2,9868
  80dc7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80dc80:	00802074 	movhi	r2,129
  80dc84:	1089a304 	addi	r2,r2,9868
  80dc88:	10800017 	ldw	r2,0(r2)
  80dc8c:	100170fa 	wrctl	ienable,r2
  80dc90:	e0bff417 	ldw	r2,-48(fp)
  80dc94:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dc98:	e0bff117 	ldw	r2,-60(fp)
  80dc9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80dca0:	0005883a 	mov	r2,zero
  80dca4:	e0bfff15 	stw	r2,-4(fp)
  80dca8:	e0bfff17 	ldw	r2,-4(fp)
  80dcac:	e0bffb15 	stw	r2,-20(fp)
  80dcb0:	e0bffa17 	ldw	r2,-24(fp)
  80dcb4:	e0bff015 	stw	r2,-64(fp)
  80dcb8:	e0bff017 	ldw	r2,-64(fp)
  80dcbc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80dcc0:	e0bffb17 	ldw	r2,-20(fp)
}
  80dcc4:	e037883a 	mov	sp,fp
  80dcc8:	df000017 	ldw	fp,0(sp)
  80dccc:	dec00104 	addi	sp,sp,4
  80dcd0:	f800283a 	ret

0080dcd4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80dcd4:	defffa04 	addi	sp,sp,-24
  80dcd8:	dfc00515 	stw	ra,20(sp)
  80dcdc:	df000415 	stw	fp,16(sp)
  80dce0:	dc000315 	stw	r16,12(sp)
  80dce4:	df000304 	addi	fp,sp,12
  80dce8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80dcec:	e0bffe17 	ldw	r2,-8(fp)
  80dcf0:	10800217 	ldw	r2,8(r2)
  80dcf4:	10d00034 	orhi	r3,r2,16384
  80dcf8:	e0bffe17 	ldw	r2,-8(fp)
  80dcfc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80dd00:	e03ffd15 	stw	zero,-12(fp)
  80dd04:	00002306 	br	80dd94 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80dd08:	e13ffd17 	ldw	r4,-12(fp)
  80dd0c:	04002074 	movhi	r16,129
  80dd10:	843dfa04 	addi	r16,r16,-2072
  80dd14:	01400304 	movi	r5,12
  80dd18:	0802c900 	call	802c90 <__mulsi3>
  80dd1c:	1405883a 	add	r2,r2,r16
  80dd20:	10c00017 	ldw	r3,0(r2)
  80dd24:	e0bffe17 	ldw	r2,-8(fp)
  80dd28:	10800017 	ldw	r2,0(r2)
  80dd2c:	1880161e 	bne	r3,r2,80dd88 <alt_file_locked+0xb4>
  80dd30:	e13ffd17 	ldw	r4,-12(fp)
  80dd34:	04002074 	movhi	r16,129
  80dd38:	843dfa04 	addi	r16,r16,-2072
  80dd3c:	01400304 	movi	r5,12
  80dd40:	0802c900 	call	802c90 <__mulsi3>
  80dd44:	1405883a 	add	r2,r2,r16
  80dd48:	10800204 	addi	r2,r2,8
  80dd4c:	10800017 	ldw	r2,0(r2)
  80dd50:	1004403a 	cmpge	r2,r2,zero
  80dd54:	10000c1e 	bne	r2,zero,80dd88 <alt_file_locked+0xb4>
  80dd58:	e13ffd17 	ldw	r4,-12(fp)
  80dd5c:	01400304 	movi	r5,12
  80dd60:	0802c900 	call	802c90 <__mulsi3>
  80dd64:	1007883a 	mov	r3,r2
  80dd68:	00802074 	movhi	r2,129
  80dd6c:	10bdfa04 	addi	r2,r2,-2072
  80dd70:	1887883a 	add	r3,r3,r2
  80dd74:	e0bffe17 	ldw	r2,-8(fp)
  80dd78:	18800326 	beq	r3,r2,80dd88 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80dd7c:	00bffcc4 	movi	r2,-13
  80dd80:	e0bfff15 	stw	r2,-4(fp)
  80dd84:	00000a06 	br	80ddb0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80dd88:	e0bffd17 	ldw	r2,-12(fp)
  80dd8c:	10800044 	addi	r2,r2,1
  80dd90:	e0bffd15 	stw	r2,-12(fp)
  80dd94:	00802074 	movhi	r2,129
  80dd98:	10829304 	addi	r2,r2,2636
  80dd9c:	10800017 	ldw	r2,0(r2)
  80dda0:	1007883a 	mov	r3,r2
  80dda4:	e0bffd17 	ldw	r2,-12(fp)
  80dda8:	18bfd72e 	bgeu	r3,r2,80dd08 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80ddac:	e03fff15 	stw	zero,-4(fp)
  80ddb0:	e0bfff17 	ldw	r2,-4(fp)
}
  80ddb4:	e037883a 	mov	sp,fp
  80ddb8:	dfc00217 	ldw	ra,8(sp)
  80ddbc:	df000117 	ldw	fp,4(sp)
  80ddc0:	dc000017 	ldw	r16,0(sp)
  80ddc4:	dec00304 	addi	sp,sp,12
  80ddc8:	f800283a 	ret

0080ddcc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80ddcc:	defff404 	addi	sp,sp,-48
  80ddd0:	dfc00b15 	stw	ra,44(sp)
  80ddd4:	df000a15 	stw	fp,40(sp)
  80ddd8:	df000a04 	addi	fp,sp,40
  80dddc:	e13ffb15 	stw	r4,-20(fp)
  80dde0:	e17ffc15 	stw	r5,-16(fp)
  80dde4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80dde8:	00bfffc4 	movi	r2,-1
  80ddec:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80ddf0:	00bffb44 	movi	r2,-19
  80ddf4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80ddf8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80ddfc:	e13ffb17 	ldw	r4,-20(fp)
  80de00:	01402074 	movhi	r5,129
  80de04:	29429104 	addi	r5,r5,2628
  80de08:	080d9140 	call	80d914 <alt_find_dev>
  80de0c:	e0bffa15 	stw	r2,-24(fp)
  80de10:	e0bffa17 	ldw	r2,-24(fp)
  80de14:	1004c03a 	cmpne	r2,r2,zero
  80de18:	1000051e 	bne	r2,zero,80de30 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80de1c:	e13ffb17 	ldw	r4,-20(fp)
  80de20:	080e6680 	call	80e668 <alt_find_file>
  80de24:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80de28:	00800044 	movi	r2,1
  80de2c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80de30:	e0bffa17 	ldw	r2,-24(fp)
  80de34:	1005003a 	cmpeq	r2,r2,zero
  80de38:	1000311e 	bne	r2,zero,80df00 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80de3c:	e13ffa17 	ldw	r4,-24(fp)
  80de40:	080e7880 	call	80e788 <alt_get_fd>
  80de44:	e0bff815 	stw	r2,-32(fp)
  80de48:	e0bff817 	ldw	r2,-32(fp)
  80de4c:	1004403a 	cmpge	r2,r2,zero
  80de50:	1000031e 	bne	r2,zero,80de60 <open+0x94>
    {
      status = index;
  80de54:	e0bff817 	ldw	r2,-32(fp)
  80de58:	e0bff715 	stw	r2,-36(fp)
  80de5c:	00002a06 	br	80df08 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  80de60:	e13ff817 	ldw	r4,-32(fp)
  80de64:	01400304 	movi	r5,12
  80de68:	0802c900 	call	802c90 <__mulsi3>
  80de6c:	1007883a 	mov	r3,r2
  80de70:	00802074 	movhi	r2,129
  80de74:	10bdfa04 	addi	r2,r2,-2072
  80de78:	1885883a 	add	r2,r3,r2
  80de7c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80de80:	e0fffc17 	ldw	r3,-16(fp)
  80de84:	00900034 	movhi	r2,16384
  80de88:	10bfffc4 	addi	r2,r2,-1
  80de8c:	1886703a 	and	r3,r3,r2
  80de90:	e0bff917 	ldw	r2,-28(fp)
  80de94:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80de98:	e0bff617 	ldw	r2,-40(fp)
  80de9c:	1004c03a 	cmpne	r2,r2,zero
  80dea0:	1000061e 	bne	r2,zero,80debc <open+0xf0>
  80dea4:	e13ff917 	ldw	r4,-28(fp)
  80dea8:	080dcd40 	call	80dcd4 <alt_file_locked>
  80deac:	e0bff715 	stw	r2,-36(fp)
  80deb0:	e0bff717 	ldw	r2,-36(fp)
  80deb4:	1004803a 	cmplt	r2,r2,zero
  80deb8:	1000131e 	bne	r2,zero,80df08 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80debc:	e0bffa17 	ldw	r2,-24(fp)
  80dec0:	10800317 	ldw	r2,12(r2)
  80dec4:	1005003a 	cmpeq	r2,r2,zero
  80dec8:	1000091e 	bne	r2,zero,80def0 <open+0x124>
  80decc:	e0bffa17 	ldw	r2,-24(fp)
  80ded0:	10800317 	ldw	r2,12(r2)
  80ded4:	e13ff917 	ldw	r4,-28(fp)
  80ded8:	e17ffb17 	ldw	r5,-20(fp)
  80dedc:	e1bffc17 	ldw	r6,-16(fp)
  80dee0:	e1fffd17 	ldw	r7,-12(fp)
  80dee4:	103ee83a 	callr	r2
  80dee8:	e0bfff15 	stw	r2,-4(fp)
  80deec:	00000106 	br	80def4 <open+0x128>
  80def0:	e03fff15 	stw	zero,-4(fp)
  80def4:	e0bfff17 	ldw	r2,-4(fp)
  80def8:	e0bff715 	stw	r2,-36(fp)
  80defc:	00000206 	br	80df08 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80df00:	00bffb44 	movi	r2,-19
  80df04:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80df08:	e0bff717 	ldw	r2,-36(fp)
  80df0c:	1004403a 	cmpge	r2,r2,zero
  80df10:	1000091e 	bne	r2,zero,80df38 <open+0x16c>
  {
    alt_release_fd (index);  
  80df14:	e13ff817 	ldw	r4,-32(fp)
  80df18:	080353c0 	call	80353c <alt_release_fd>
    ALT_ERRNO = -status;
  80df1c:	080df580 	call	80df58 <alt_get_errno>
  80df20:	e0fff717 	ldw	r3,-36(fp)
  80df24:	00c7c83a 	sub	r3,zero,r3
  80df28:	10c00015 	stw	r3,0(r2)
    return -1;
  80df2c:	00bfffc4 	movi	r2,-1
  80df30:	e0bffe15 	stw	r2,-8(fp)
  80df34:	00000206 	br	80df40 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  80df38:	e0bff817 	ldw	r2,-32(fp)
  80df3c:	e0bffe15 	stw	r2,-8(fp)
  80df40:	e0bffe17 	ldw	r2,-8(fp)
}
  80df44:	e037883a 	mov	sp,fp
  80df48:	dfc00117 	ldw	ra,4(sp)
  80df4c:	df000017 	ldw	fp,0(sp)
  80df50:	dec00204 	addi	sp,sp,8
  80df54:	f800283a 	ret

0080df58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80df58:	defffd04 	addi	sp,sp,-12
  80df5c:	dfc00215 	stw	ra,8(sp)
  80df60:	df000115 	stw	fp,4(sp)
  80df64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80df68:	00802074 	movhi	r2,129
  80df6c:	10829404 	addi	r2,r2,2640
  80df70:	10800017 	ldw	r2,0(r2)
  80df74:	1005003a 	cmpeq	r2,r2,zero
  80df78:	1000061e 	bne	r2,zero,80df94 <alt_get_errno+0x3c>
  80df7c:	00802074 	movhi	r2,129
  80df80:	10829404 	addi	r2,r2,2640
  80df84:	10800017 	ldw	r2,0(r2)
  80df88:	103ee83a 	callr	r2
  80df8c:	e0bfff15 	stw	r2,-4(fp)
  80df90:	00000306 	br	80dfa0 <alt_get_errno+0x48>
  80df94:	00802074 	movhi	r2,129
  80df98:	10898604 	addi	r2,r2,9752
  80df9c:	e0bfff15 	stw	r2,-4(fp)
  80dfa0:	e0bfff17 	ldw	r2,-4(fp)
}
  80dfa4:	e037883a 	mov	sp,fp
  80dfa8:	dfc00117 	ldw	ra,4(sp)
  80dfac:	df000017 	ldw	fp,0(sp)
  80dfb0:	dec00204 	addi	sp,sp,8
  80dfb4:	f800283a 	ret

0080dfb8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80dfb8:	defffa04 	addi	sp,sp,-24
  80dfbc:	df000515 	stw	fp,20(sp)
  80dfc0:	df000504 	addi	fp,sp,20
  80dfc4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dfc8:	0005303a 	rdctl	r2,status
  80dfcc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dfd0:	e0fffd17 	ldw	r3,-12(fp)
  80dfd4:	00bfff84 	movi	r2,-2
  80dfd8:	1884703a 	and	r2,r3,r2
  80dfdc:	1001703a 	wrctl	status,r2
  
  return context;
  80dfe0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80dfe4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80dfe8:	e0bfff17 	ldw	r2,-4(fp)
  80dfec:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80dff0:	e0bffc17 	ldw	r2,-16(fp)
  80dff4:	10c00017 	ldw	r3,0(r2)
  80dff8:	e0bffc17 	ldw	r2,-16(fp)
  80dffc:	10800117 	ldw	r2,4(r2)
  80e000:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80e004:	e0bffc17 	ldw	r2,-16(fp)
  80e008:	10c00117 	ldw	r3,4(r2)
  80e00c:	e0bffc17 	ldw	r2,-16(fp)
  80e010:	10800017 	ldw	r2,0(r2)
  80e014:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80e018:	e0fffc17 	ldw	r3,-16(fp)
  80e01c:	e0bffc17 	ldw	r2,-16(fp)
  80e020:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80e024:	e0fffc17 	ldw	r3,-16(fp)
  80e028:	e0bffc17 	ldw	r2,-16(fp)
  80e02c:	18800015 	stw	r2,0(r3)
  80e030:	e0bffe17 	ldw	r2,-8(fp)
  80e034:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e038:	e0bffb17 	ldw	r2,-20(fp)
  80e03c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80e040:	e037883a 	mov	sp,fp
  80e044:	df000017 	ldw	fp,0(sp)
  80e048:	dec00104 	addi	sp,sp,4
  80e04c:	f800283a 	ret

0080e050 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80e050:	defffb04 	addi	sp,sp,-20
  80e054:	dfc00415 	stw	ra,16(sp)
  80e058:	df000315 	stw	fp,12(sp)
  80e05c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80e060:	d0a02b17 	ldw	r2,-32596(gp)
  80e064:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80e068:	d0a71a17 	ldw	r2,-25496(gp)
  80e06c:	10800044 	addi	r2,r2,1
  80e070:	d0a71a15 	stw	r2,-25496(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80e074:	00003106 	br	80e13c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80e078:	e0bffe17 	ldw	r2,-8(fp)
  80e07c:	10800017 	ldw	r2,0(r2)
  80e080:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80e084:	e0bffe17 	ldw	r2,-8(fp)
  80e088:	10800403 	ldbu	r2,16(r2)
  80e08c:	10803fcc 	andi	r2,r2,255
  80e090:	1005003a 	cmpeq	r2,r2,zero
  80e094:	1000051e 	bne	r2,zero,80e0ac <alt_tick+0x5c>
  80e098:	d0a71a17 	ldw	r2,-25496(gp)
  80e09c:	1004c03a 	cmpne	r2,r2,zero
  80e0a0:	1000021e 	bne	r2,zero,80e0ac <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80e0a4:	e0bffe17 	ldw	r2,-8(fp)
  80e0a8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80e0ac:	e0bffe17 	ldw	r2,-8(fp)
  80e0b0:	10c00217 	ldw	r3,8(r2)
  80e0b4:	d0a71a17 	ldw	r2,-25496(gp)
  80e0b8:	10c01e36 	bltu	r2,r3,80e134 <alt_tick+0xe4>
  80e0bc:	e0bffe17 	ldw	r2,-8(fp)
  80e0c0:	10800403 	ldbu	r2,16(r2)
  80e0c4:	10803fcc 	andi	r2,r2,255
  80e0c8:	1004c03a 	cmpne	r2,r2,zero
  80e0cc:	1000191e 	bne	r2,zero,80e134 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80e0d0:	e0bffe17 	ldw	r2,-8(fp)
  80e0d4:	10c00317 	ldw	r3,12(r2)
  80e0d8:	e0bffe17 	ldw	r2,-8(fp)
  80e0dc:	11000517 	ldw	r4,20(r2)
  80e0e0:	183ee83a 	callr	r3
  80e0e4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80e0e8:	e0bffd17 	ldw	r2,-12(fp)
  80e0ec:	1004c03a 	cmpne	r2,r2,zero
  80e0f0:	1000031e 	bne	r2,zero,80e100 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80e0f4:	e13ffe17 	ldw	r4,-8(fp)
  80e0f8:	080dfb80 	call	80dfb8 <alt_alarm_stop>
  80e0fc:	00000d06 	br	80e134 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80e100:	e0bffe17 	ldw	r2,-8(fp)
  80e104:	10c00217 	ldw	r3,8(r2)
  80e108:	e0bffd17 	ldw	r2,-12(fp)
  80e10c:	1887883a 	add	r3,r3,r2
  80e110:	e0bffe17 	ldw	r2,-8(fp)
  80e114:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80e118:	e0bffe17 	ldw	r2,-8(fp)
  80e11c:	10c00217 	ldw	r3,8(r2)
  80e120:	d0a71a17 	ldw	r2,-25496(gp)
  80e124:	1880032e 	bgeu	r3,r2,80e134 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80e128:	e0fffe17 	ldw	r3,-8(fp)
  80e12c:	00800044 	movi	r2,1
  80e130:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80e134:	e0bfff17 	ldw	r2,-4(fp)
  80e138:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80e13c:	d0e02b04 	addi	r3,gp,-32596
  80e140:	e0bffe17 	ldw	r2,-8(fp)
  80e144:	10ffcc1e 	bne	r2,r3,80e078 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80e148:	08048580 	call	804858 <OSTimeTick>
}
  80e14c:	e037883a 	mov	sp,fp
  80e150:	dfc00117 	ldw	ra,4(sp)
  80e154:	df000017 	ldw	fp,0(sp)
  80e158:	dec00204 	addi	sp,sp,8
  80e15c:	f800283a 	ret

0080e160 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80e160:	deffff04 	addi	sp,sp,-4
  80e164:	df000015 	stw	fp,0(sp)
  80e168:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80e16c:	000170fa 	wrctl	ienable,zero
}
  80e170:	e037883a 	mov	sp,fp
  80e174:	df000017 	ldw	fp,0(sp)
  80e178:	dec00104 	addi	sp,sp,4
  80e17c:	f800283a 	ret

0080e180 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  80e180:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  80e184:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  80e188:	d1271317 	ldw	r4,-25524(gp)

      stw ra,  0(sp)
  80e18c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  80e190:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  80e194:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  80e198:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  80e19c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  80e1a0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  80e1a4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  80e1a8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  80e1ac:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  80e1b0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  80e1b4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  80e1b8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  80e1bc:	080e5a00 	call	80e5a0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  80e1c0:	d1270e17 	ldw	r4,-25544(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  80e1c4:	d1670607 	ldb	r5,-25576(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  80e1c8:	d1271315 	stw	r4,-25524(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  80e1cc:	d1670645 	stb	r5,-25575(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  80e1d0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  80e1d4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  80e1d8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  80e1dc:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  80e1e0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  80e1e4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  80e1e8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  80e1ec:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  80e1f0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  80e1f4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  80e1f8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  80e1fc:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  80e200:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  80e204:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  80e208:	f800283a 	ret

0080e20c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  80e20c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  80e210:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  80e214:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  80e218:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  80e21c:	080e5a00 	call	80e5a0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  80e220:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  80e224:	d4a70445 	stb	r18,-25583(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  80e228:	003fe506 	br	80e1c0 <OSCtxSw+0x40>

0080e22c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  80e22c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  80e230:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  80e234:	10800054 	ori	r2,r2,1
      wrctl status, r2
  80e238:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  80e23c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  80e240:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  80e244:	dec00204 	addi	sp,sp,8

      callr r2
  80e248:	103ee83a 	callr	r2

      nop
  80e24c:	0001883a 	nop

0080e250 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  80e250:	defff704 	addi	sp,sp,-36
  80e254:	dfc00815 	stw	ra,32(sp)
  80e258:	df000715 	stw	fp,28(sp)
  80e25c:	df000704 	addi	fp,sp,28
  80e260:	e13ffc15 	stw	r4,-16(fp)
  80e264:	e17ffd15 	stw	r5,-12(fp)
  80e268:	e1bffe15 	stw	r6,-8(fp)
  80e26c:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  80e270:	e0bffe17 	ldw	r2,-8(fp)
  80e274:	1007883a 	mov	r3,r2
  80e278:	00bfff04 	movi	r2,-4
  80e27c:	1884703a 	and	r2,r3,r2
  80e280:	10bf0004 	addi	r2,r2,-1024
  80e284:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  80e288:	e0bff917 	ldw	r2,-28(fp)
  80e28c:	10000015 	stw	zero,0(r2)
  80e290:	e0bff917 	ldw	r2,-28(fp)
  80e294:	10c0bb04 	addi	r3,r2,748
  80e298:	e0bff917 	ldw	r2,-28(fp)
  80e29c:	10c00115 	stw	r3,4(r2)
  80e2a0:	e0bff917 	ldw	r2,-28(fp)
  80e2a4:	1080bb04 	addi	r2,r2,748
  80e2a8:	10c01704 	addi	r3,r2,92
  80e2ac:	e0bff917 	ldw	r2,-28(fp)
  80e2b0:	10c00215 	stw	r3,8(r2)
  80e2b4:	e0bff917 	ldw	r2,-28(fp)
  80e2b8:	1080bb04 	addi	r2,r2,748
  80e2bc:	10c02e04 	addi	r3,r2,184
  80e2c0:	e0bff917 	ldw	r2,-28(fp)
  80e2c4:	10c00315 	stw	r3,12(r2)
  80e2c8:	e0bff917 	ldw	r2,-28(fp)
  80e2cc:	10000415 	stw	zero,16(r2)
  80e2d0:	e0bff917 	ldw	r2,-28(fp)
  80e2d4:	10800504 	addi	r2,r2,20
  80e2d8:	1009883a 	mov	r4,r2
  80e2dc:	01800644 	movi	r6,25
  80e2e0:	000b883a 	mov	r5,zero
  80e2e4:	08026cc0 	call	8026cc <memset>
  80e2e8:	e0bff917 	ldw	r2,-28(fp)
  80e2ec:	10000c15 	stw	zero,48(r2)
  80e2f0:	e0fff917 	ldw	r3,-28(fp)
  80e2f4:	00802074 	movhi	r2,129
  80e2f8:	10bbed04 	addi	r2,r2,-4172
  80e2fc:	18800d15 	stw	r2,52(r3)
  80e300:	e0bff917 	ldw	r2,-28(fp)
  80e304:	10000e15 	stw	zero,56(r2)
  80e308:	e0bff917 	ldw	r2,-28(fp)
  80e30c:	10000f15 	stw	zero,60(r2)
  80e310:	e0bff917 	ldw	r2,-28(fp)
  80e314:	10001015 	stw	zero,64(r2)
  80e318:	e0bff917 	ldw	r2,-28(fp)
  80e31c:	10001115 	stw	zero,68(r2)
  80e320:	e0bff917 	ldw	r2,-28(fp)
  80e324:	10001215 	stw	zero,72(r2)
  80e328:	e0bff917 	ldw	r2,-28(fp)
  80e32c:	10001315 	stw	zero,76(r2)
  80e330:	e0bff917 	ldw	r2,-28(fp)
  80e334:	10001415 	stw	zero,80(r2)
  80e338:	e0bff917 	ldw	r2,-28(fp)
  80e33c:	10001515 	stw	zero,84(r2)
  80e340:	e0bff917 	ldw	r2,-28(fp)
  80e344:	10001615 	stw	zero,88(r2)
  80e348:	e0bff917 	ldw	r2,-28(fp)
  80e34c:	10001715 	stw	zero,92(r2)
  80e350:	e0bff917 	ldw	r2,-28(fp)
  80e354:	10001805 	stb	zero,96(r2)
  80e358:	e0bff917 	ldw	r2,-28(fp)
  80e35c:	10801f04 	addi	r2,r2,124
  80e360:	10000015 	stw	zero,0(r2)
  80e364:	10000115 	stw	zero,4(r2)
  80e368:	10000215 	stw	zero,8(r2)
  80e36c:	10000315 	stw	zero,12(r2)
  80e370:	10000415 	stw	zero,16(r2)
  80e374:	10000515 	stw	zero,20(r2)
  80e378:	10000615 	stw	zero,24(r2)
  80e37c:	10000715 	stw	zero,28(r2)
  80e380:	10000815 	stw	zero,32(r2)
  80e384:	e0bff917 	ldw	r2,-28(fp)
  80e388:	10002815 	stw	zero,160(r2)
  80e38c:	e0fff917 	ldw	r3,-28(fp)
  80e390:	00800044 	movi	r2,1
  80e394:	18802915 	stw	r2,164(r3)
  80e398:	18002a15 	stw	zero,168(r3)
  80e39c:	e0fff917 	ldw	r3,-28(fp)
  80e3a0:	008cc384 	movi	r2,13070
  80e3a4:	18802b0d 	sth	r2,172(r3)
  80e3a8:	e0fff917 	ldw	r3,-28(fp)
  80e3ac:	00aaf344 	movi	r2,-21555
  80e3b0:	18802b8d 	sth	r2,174(r3)
  80e3b4:	e0fff917 	ldw	r3,-28(fp)
  80e3b8:	00848d04 	movi	r2,4660
  80e3bc:	18802c0d 	sth	r2,176(r3)
  80e3c0:	e0fff917 	ldw	r3,-28(fp)
  80e3c4:	00b99b44 	movi	r2,-6547
  80e3c8:	18802c8d 	sth	r2,178(r3)
  80e3cc:	e0fff917 	ldw	r3,-28(fp)
  80e3d0:	00b7bb04 	movi	r2,-8468
  80e3d4:	18802d0d 	sth	r2,180(r3)
  80e3d8:	e0fff917 	ldw	r3,-28(fp)
  80e3dc:	00800144 	movi	r2,5
  80e3e0:	18802d8d 	sth	r2,182(r3)
  80e3e4:	e0fff917 	ldw	r3,-28(fp)
  80e3e8:	008002c4 	movi	r2,11
  80e3ec:	18802e0d 	sth	r2,184(r3)
  80e3f0:	e0bff917 	ldw	r2,-28(fp)
  80e3f4:	10002f15 	stw	zero,188(r2)
  80e3f8:	e0bff917 	ldw	r2,-28(fp)
  80e3fc:	10003015 	stw	zero,192(r2)
  80e400:	e0bff917 	ldw	r2,-28(fp)
  80e404:	10003115 	stw	zero,196(r2)
  80e408:	e0bff917 	ldw	r2,-28(fp)
  80e40c:	10003215 	stw	zero,200(r2)
  80e410:	e0bff917 	ldw	r2,-28(fp)
  80e414:	10003315 	stw	zero,204(r2)
  80e418:	e0bff917 	ldw	r2,-28(fp)
  80e41c:	10003415 	stw	zero,208(r2)
  80e420:	e0bff917 	ldw	r2,-28(fp)
  80e424:	10003e15 	stw	zero,248(r2)
  80e428:	e0bff917 	ldw	r2,-28(fp)
  80e42c:	10003f15 	stw	zero,252(r2)
  80e430:	e0bff917 	ldw	r2,-28(fp)
  80e434:	10004015 	stw	zero,256(r2)
  80e438:	e0bff917 	ldw	r2,-28(fp)
  80e43c:	10004115 	stw	zero,260(r2)
  80e440:	e0bff917 	ldw	r2,-28(fp)
  80e444:	10004215 	stw	zero,264(r2)
  80e448:	e0bff917 	ldw	r2,-28(fp)
  80e44c:	10004315 	stw	zero,268(r2)
  80e450:	e0bff917 	ldw	r2,-28(fp)
  80e454:	10004415 	stw	zero,272(r2)
  80e458:	e0bff917 	ldw	r2,-28(fp)
  80e45c:	10004515 	stw	zero,276(r2)
  80e460:	e0bff917 	ldw	r2,-28(fp)
  80e464:	10004615 	stw	zero,280(r2)
  80e468:	e0bff917 	ldw	r2,-28(fp)
  80e46c:	10004715 	stw	zero,284(r2)
  80e470:	e0bff917 	ldw	r2,-28(fp)
  80e474:	10003505 	stb	zero,212(r2)
  80e478:	e0bff917 	ldw	r2,-28(fp)
  80e47c:	10003705 	stb	zero,220(r2)
  80e480:	e0bff917 	ldw	r2,-28(fp)
  80e484:	10003d15 	stw	zero,244(r2)
  80e488:	e0bff917 	ldw	r2,-28(fp)
  80e48c:	10005215 	stw	zero,328(r2)
  80e490:	e0bff917 	ldw	r2,-28(fp)
  80e494:	10005315 	stw	zero,332(r2)
  80e498:	e0bff917 	ldw	r2,-28(fp)
  80e49c:	10005415 	stw	zero,336(r2)
  80e4a0:	e0bff917 	ldw	r2,-28(fp)
  80e4a4:	10005515 	stw	zero,340(r2)
  80e4a8:	e0bff917 	ldw	r2,-28(fp)
  80e4ac:	1000b515 	stw	zero,724(r2)
  80e4b0:	e0bff917 	ldw	r2,-28(fp)
  80e4b4:	10007515 	stw	zero,468(r2)
  80e4b8:	e0bff917 	ldw	r2,-28(fp)
  80e4bc:	1000b715 	stw	zero,732(r2)
  80e4c0:	e0bff917 	ldw	r2,-28(fp)
  80e4c4:	1000b815 	stw	zero,736(r2)
  80e4c8:	e0bff917 	ldw	r2,-28(fp)
  80e4cc:	1000b915 	stw	zero,740(r2)
  80e4d0:	e0bff917 	ldw	r2,-28(fp)
  80e4d4:	1000ba15 	stw	zero,744(r2)
  80e4d8:	e0bff917 	ldw	r2,-28(fp)
  80e4dc:	1080bb04 	addi	r2,r2,748
  80e4e0:	1009883a 	mov	r4,r2
  80e4e4:	01804504 	movi	r6,276
  80e4e8:	000b883a 	mov	r5,zero
  80e4ec:	08026cc0 	call	8026cc <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  80e4f0:	e0bff917 	ldw	r2,-28(fp)
  80e4f4:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  80e4f8:	e0bffb17 	ldw	r2,-20(fp)
  80e4fc:	10bff304 	addi	r2,r2,-52
  80e500:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  80e504:	e0bffa17 	ldw	r2,-24(fp)
  80e508:	10c00c04 	addi	r3,r2,48
  80e50c:	e0bffc17 	ldw	r2,-16(fp)
  80e510:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  80e514:	e0bffa17 	ldw	r2,-24(fp)
  80e518:	10c00b04 	addi	r3,r2,44
  80e51c:	e0bffd17 	ldw	r2,-12(fp)
  80e520:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  80e524:	e0bffa17 	ldw	r2,-24(fp)
  80e528:	10c00a04 	addi	r3,r2,40
  80e52c:	e0bff917 	ldw	r2,-28(fp)
  80e530:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  80e534:	00802074 	movhi	r2,129
  80e538:	10b88b04 	addi	r2,r2,-7636
  80e53c:	10c00104 	addi	r3,r2,4
  80e540:	e0bffa17 	ldw	r2,-24(fp)
  80e544:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  80e548:	e0bffa17 	ldw	r2,-24(fp)
}
  80e54c:	e037883a 	mov	sp,fp
  80e550:	dfc00117 	ldw	ra,4(sp)
  80e554:	df000017 	ldw	fp,0(sp)
  80e558:	dec00204 	addi	sp,sp,8
  80e55c:	f800283a 	ret

0080e560 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  80e560:	defffe04 	addi	sp,sp,-8
  80e564:	df000115 	stw	fp,4(sp)
  80e568:	df000104 	addi	fp,sp,4
  80e56c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  80e570:	e037883a 	mov	sp,fp
  80e574:	df000017 	ldw	fp,0(sp)
  80e578:	dec00104 	addi	sp,sp,4
  80e57c:	f800283a 	ret

0080e580 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  80e580:	defffe04 	addi	sp,sp,-8
  80e584:	df000115 	stw	fp,4(sp)
  80e588:	df000104 	addi	fp,sp,4
  80e58c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  80e590:	e037883a 	mov	sp,fp
  80e594:	df000017 	ldw	fp,0(sp)
  80e598:	dec00104 	addi	sp,sp,4
  80e59c:	f800283a 	ret

0080e5a0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  80e5a0:	deffff04 	addi	sp,sp,-4
  80e5a4:	df000015 	stw	fp,0(sp)
  80e5a8:	d839883a 	mov	fp,sp
}
  80e5ac:	e037883a 	mov	sp,fp
  80e5b0:	df000017 	ldw	fp,0(sp)
  80e5b4:	dec00104 	addi	sp,sp,4
  80e5b8:	f800283a 	ret

0080e5bc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  80e5bc:	deffff04 	addi	sp,sp,-4
  80e5c0:	df000015 	stw	fp,0(sp)
  80e5c4:	d839883a 	mov	fp,sp
}
  80e5c8:	e037883a 	mov	sp,fp
  80e5cc:	df000017 	ldw	fp,0(sp)
  80e5d0:	dec00104 	addi	sp,sp,4
  80e5d4:	f800283a 	ret

0080e5d8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  80e5d8:	deffff04 	addi	sp,sp,-4
  80e5dc:	df000015 	stw	fp,0(sp)
  80e5e0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  80e5e4:	e037883a 	mov	sp,fp
  80e5e8:	df000017 	ldw	fp,0(sp)
  80e5ec:	dec00104 	addi	sp,sp,4
  80e5f0:	f800283a 	ret

0080e5f4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  80e5f4:	deffff04 	addi	sp,sp,-4
  80e5f8:	df000015 	stw	fp,0(sp)
  80e5fc:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  80e600:	e037883a 	mov	sp,fp
  80e604:	df000017 	ldw	fp,0(sp)
  80e608:	dec00104 	addi	sp,sp,4
  80e60c:	f800283a 	ret

0080e610 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  80e610:	deffff04 	addi	sp,sp,-4
  80e614:	df000015 	stw	fp,0(sp)
  80e618:	d839883a 	mov	fp,sp
}
  80e61c:	e037883a 	mov	sp,fp
  80e620:	df000017 	ldw	fp,0(sp)
  80e624:	dec00104 	addi	sp,sp,4
  80e628:	f800283a 	ret

0080e62c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  80e62c:	deffff04 	addi	sp,sp,-4
  80e630:	df000015 	stw	fp,0(sp)
  80e634:	d839883a 	mov	fp,sp
}
  80e638:	e037883a 	mov	sp,fp
  80e63c:	df000017 	ldw	fp,0(sp)
  80e640:	dec00104 	addi	sp,sp,4
  80e644:	f800283a 	ret

0080e648 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  80e648:	defffe04 	addi	sp,sp,-8
  80e64c:	df000115 	stw	fp,4(sp)
  80e650:	df000104 	addi	fp,sp,4
  80e654:	e13fff15 	stw	r4,-4(fp)
}
  80e658:	e037883a 	mov	sp,fp
  80e65c:	df000017 	ldw	fp,0(sp)
  80e660:	dec00104 	addi	sp,sp,4
  80e664:	f800283a 	ret

0080e668 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80e668:	defffa04 	addi	sp,sp,-24
  80e66c:	dfc00515 	stw	ra,20(sp)
  80e670:	df000415 	stw	fp,16(sp)
  80e674:	df000404 	addi	fp,sp,16
  80e678:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80e67c:	00802074 	movhi	r2,129
  80e680:	10828f04 	addi	r2,r2,2620
  80e684:	10800017 	ldw	r2,0(r2)
  80e688:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80e68c:	00003306 	br	80e75c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80e690:	e0bffd17 	ldw	r2,-12(fp)
  80e694:	11000217 	ldw	r4,8(r2)
  80e698:	08004000 	call	800400 <strlen>
  80e69c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80e6a0:	e0bffd17 	ldw	r2,-12(fp)
  80e6a4:	10c00217 	ldw	r3,8(r2)
  80e6a8:	e0bffc17 	ldw	r2,-16(fp)
  80e6ac:	1885883a 	add	r2,r3,r2
  80e6b0:	10bfffc4 	addi	r2,r2,-1
  80e6b4:	10800003 	ldbu	r2,0(r2)
  80e6b8:	10803fcc 	andi	r2,r2,255
  80e6bc:	1080201c 	xori	r2,r2,128
  80e6c0:	10bfe004 	addi	r2,r2,-128
  80e6c4:	10800bd8 	cmpnei	r2,r2,47
  80e6c8:	1000031e 	bne	r2,zero,80e6d8 <alt_find_file+0x70>
    {
      len -= 1;
  80e6cc:	e0bffc17 	ldw	r2,-16(fp)
  80e6d0:	10bfffc4 	addi	r2,r2,-1
  80e6d4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80e6d8:	e0bffc17 	ldw	r2,-16(fp)
  80e6dc:	1007883a 	mov	r3,r2
  80e6e0:	e0bffe17 	ldw	r2,-8(fp)
  80e6e4:	1885883a 	add	r2,r3,r2
  80e6e8:	10800003 	ldbu	r2,0(r2)
  80e6ec:	10803fcc 	andi	r2,r2,255
  80e6f0:	1080201c 	xori	r2,r2,128
  80e6f4:	10bfe004 	addi	r2,r2,-128
  80e6f8:	10800be0 	cmpeqi	r2,r2,47
  80e6fc:	10000a1e 	bne	r2,zero,80e728 <alt_find_file+0xc0>
  80e700:	e0bffc17 	ldw	r2,-16(fp)
  80e704:	1007883a 	mov	r3,r2
  80e708:	e0bffe17 	ldw	r2,-8(fp)
  80e70c:	1885883a 	add	r2,r3,r2
  80e710:	10800003 	ldbu	r2,0(r2)
  80e714:	10803fcc 	andi	r2,r2,255
  80e718:	1080201c 	xori	r2,r2,128
  80e71c:	10bfe004 	addi	r2,r2,-128
  80e720:	1004c03a 	cmpne	r2,r2,zero
  80e724:	10000a1e 	bne	r2,zero,80e750 <alt_find_file+0xe8>
  80e728:	e0bffd17 	ldw	r2,-12(fp)
  80e72c:	11000217 	ldw	r4,8(r2)
  80e730:	e1bffc17 	ldw	r6,-16(fp)
  80e734:	e17ffe17 	ldw	r5,-8(fp)
  80e738:	080e8d80 	call	80e8d8 <memcmp>
  80e73c:	1004c03a 	cmpne	r2,r2,zero
  80e740:	1000031e 	bne	r2,zero,80e750 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80e744:	e0bffd17 	ldw	r2,-12(fp)
  80e748:	e0bfff15 	stw	r2,-4(fp)
  80e74c:	00000806 	br	80e770 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80e750:	e0bffd17 	ldw	r2,-12(fp)
  80e754:	10800017 	ldw	r2,0(r2)
  80e758:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80e75c:	00c02074 	movhi	r3,129
  80e760:	18c28f04 	addi	r3,r3,2620
  80e764:	e0bffd17 	ldw	r2,-12(fp)
  80e768:	10ffc91e 	bne	r2,r3,80e690 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80e76c:	e03fff15 	stw	zero,-4(fp)
  80e770:	e0bfff17 	ldw	r2,-4(fp)
}
  80e774:	e037883a 	mov	sp,fp
  80e778:	dfc00117 	ldw	ra,4(sp)
  80e77c:	df000017 	ldw	fp,0(sp)
  80e780:	dec00204 	addi	sp,sp,8
  80e784:	f800283a 	ret

0080e788 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80e788:	defff704 	addi	sp,sp,-36
  80e78c:	dfc00815 	stw	ra,32(sp)
  80e790:	df000715 	stw	fp,28(sp)
  80e794:	dc000615 	stw	r16,24(sp)
  80e798:	df000604 	addi	fp,sp,24
  80e79c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80e7a0:	00bffa04 	movi	r2,-24
  80e7a4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  80e7a8:	00802074 	movhi	r2,129
  80e7ac:	10898704 	addi	r2,r2,9756
  80e7b0:	10800017 	ldw	r2,0(r2)
  80e7b4:	e0bffa15 	stw	r2,-24(fp)
  80e7b8:	e03ffb0d 	sth	zero,-20(fp)
  80e7bc:	e17ffb0b 	ldhu	r5,-20(fp)
  80e7c0:	e1bffe04 	addi	r6,fp,-8
  80e7c4:	e13ffa17 	ldw	r4,-24(fp)
  80e7c8:	08096780 	call	809678 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80e7cc:	e03ffd15 	stw	zero,-12(fp)
  80e7d0:	00002006 	br	80e854 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
  80e7d4:	e13ffd17 	ldw	r4,-12(fp)
  80e7d8:	04002074 	movhi	r16,129
  80e7dc:	843dfa04 	addi	r16,r16,-2072
  80e7e0:	01400304 	movi	r5,12
  80e7e4:	0802c900 	call	802c90 <__mulsi3>
  80e7e8:	1405883a 	add	r2,r2,r16
  80e7ec:	10800017 	ldw	r2,0(r2)
  80e7f0:	1004c03a 	cmpne	r2,r2,zero
  80e7f4:	1000141e 	bne	r2,zero,80e848 <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
  80e7f8:	e13ffd17 	ldw	r4,-12(fp)
  80e7fc:	04002074 	movhi	r16,129
  80e800:	843dfa04 	addi	r16,r16,-2072
  80e804:	01400304 	movi	r5,12
  80e808:	0802c900 	call	802c90 <__mulsi3>
  80e80c:	1407883a 	add	r3,r2,r16
  80e810:	e0bfff17 	ldw	r2,-4(fp)
  80e814:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80e818:	00802074 	movhi	r2,129
  80e81c:	10829304 	addi	r2,r2,2636
  80e820:	10c00017 	ldw	r3,0(r2)
  80e824:	e0bffd17 	ldw	r2,-12(fp)
  80e828:	1880040e 	bge	r3,r2,80e83c <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
  80e82c:	00c02074 	movhi	r3,129
  80e830:	18c29304 	addi	r3,r3,2636
  80e834:	e0bffd17 	ldw	r2,-12(fp)
  80e838:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80e83c:	e0bffd17 	ldw	r2,-12(fp)
  80e840:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  80e844:	00000606 	br	80e860 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80e848:	e0bffd17 	ldw	r2,-12(fp)
  80e84c:	10800044 	addi	r2,r2,1
  80e850:	e0bffd15 	stw	r2,-12(fp)
  80e854:	e0bffd17 	ldw	r2,-12(fp)
  80e858:	10800810 	cmplti	r2,r2,32
  80e85c:	103fdd1e 	bne	r2,zero,80e7d4 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  80e860:	00802074 	movhi	r2,129
  80e864:	10898704 	addi	r2,r2,9756
  80e868:	11000017 	ldw	r4,0(r2)
  80e86c:	0809a700 	call	809a70 <OSSemPost>

  return rc;
  80e870:	e0bffc17 	ldw	r2,-16(fp)
}
  80e874:	e037883a 	mov	sp,fp
  80e878:	dfc00217 	ldw	ra,8(sp)
  80e87c:	df000117 	ldw	fp,4(sp)
  80e880:	dc000017 	ldw	r16,0(sp)
  80e884:	dec00304 	addi	sp,sp,12
  80e888:	f800283a 	ret

0080e88c <atexit>:
  80e88c:	200b883a 	mov	r5,r4
  80e890:	000d883a 	mov	r6,zero
  80e894:	0009883a 	mov	r4,zero
  80e898:	000f883a 	mov	r7,zero
  80e89c:	080e94c1 	jmpi	80e94c <__register_exitproc>

0080e8a0 <exit>:
  80e8a0:	defffe04 	addi	sp,sp,-8
  80e8a4:	000b883a 	mov	r5,zero
  80e8a8:	dc000015 	stw	r16,0(sp)
  80e8ac:	dfc00115 	stw	ra,4(sp)
  80e8b0:	2021883a 	mov	r16,r4
  80e8b4:	080ea840 	call	80ea84 <__call_exitprocs>
  80e8b8:	00802074 	movhi	r2,129
  80e8bc:	10828c04 	addi	r2,r2,2608
  80e8c0:	11000017 	ldw	r4,0(r2)
  80e8c4:	20800f17 	ldw	r2,60(r4)
  80e8c8:	10000126 	beq	r2,zero,80e8d0 <exit+0x30>
  80e8cc:	103ee83a 	callr	r2
  80e8d0:	8009883a 	mov	r4,r16
  80e8d4:	080edc00 	call	80edc0 <_exit>

0080e8d8 <memcmp>:
  80e8d8:	00c000c4 	movi	r3,3
  80e8dc:	1980032e 	bgeu	r3,r6,80e8ec <memcmp+0x14>
  80e8e0:	2144b03a 	or	r2,r4,r5
  80e8e4:	10c4703a 	and	r2,r2,r3
  80e8e8:	10000f26 	beq	r2,zero,80e928 <memcmp+0x50>
  80e8ec:	31ffffc4 	addi	r7,r6,-1
  80e8f0:	3000061e 	bne	r6,zero,80e90c <memcmp+0x34>
  80e8f4:	00000a06 	br	80e920 <memcmp+0x48>
  80e8f8:	39ffffc4 	addi	r7,r7,-1
  80e8fc:	00bfffc4 	movi	r2,-1
  80e900:	21000044 	addi	r4,r4,1
  80e904:	29400044 	addi	r5,r5,1
  80e908:	38800526 	beq	r7,r2,80e920 <memcmp+0x48>
  80e90c:	20c00003 	ldbu	r3,0(r4)
  80e910:	28800003 	ldbu	r2,0(r5)
  80e914:	18bff826 	beq	r3,r2,80e8f8 <memcmp+0x20>
  80e918:	1885c83a 	sub	r2,r3,r2
  80e91c:	f800283a 	ret
  80e920:	0005883a 	mov	r2,zero
  80e924:	f800283a 	ret
  80e928:	180f883a 	mov	r7,r3
  80e92c:	20c00017 	ldw	r3,0(r4)
  80e930:	28800017 	ldw	r2,0(r5)
  80e934:	18bfed1e 	bne	r3,r2,80e8ec <memcmp+0x14>
  80e938:	31bfff04 	addi	r6,r6,-4
  80e93c:	21000104 	addi	r4,r4,4
  80e940:	29400104 	addi	r5,r5,4
  80e944:	39bff936 	bltu	r7,r6,80e92c <memcmp+0x54>
  80e948:	003fe806 	br	80e8ec <memcmp+0x14>

0080e94c <__register_exitproc>:
  80e94c:	defffa04 	addi	sp,sp,-24
  80e950:	00802074 	movhi	r2,129
  80e954:	10828c04 	addi	r2,r2,2608
  80e958:	dc000015 	stw	r16,0(sp)
  80e95c:	14000017 	ldw	r16,0(r2)
  80e960:	dd000415 	stw	r20,16(sp)
  80e964:	2829883a 	mov	r20,r5
  80e968:	81405217 	ldw	r5,328(r16)
  80e96c:	dcc00315 	stw	r19,12(sp)
  80e970:	dc800215 	stw	r18,8(sp)
  80e974:	dc400115 	stw	r17,4(sp)
  80e978:	dfc00515 	stw	ra,20(sp)
  80e97c:	2023883a 	mov	r17,r4
  80e980:	3027883a 	mov	r19,r6
  80e984:	3825883a 	mov	r18,r7
  80e988:	28002526 	beq	r5,zero,80ea20 <__register_exitproc+0xd4>
  80e98c:	29000117 	ldw	r4,4(r5)
  80e990:	008007c4 	movi	r2,31
  80e994:	11002716 	blt	r2,r4,80ea34 <__register_exitproc+0xe8>
  80e998:	8800101e 	bne	r17,zero,80e9dc <__register_exitproc+0x90>
  80e99c:	2105883a 	add	r2,r4,r4
  80e9a0:	1085883a 	add	r2,r2,r2
  80e9a4:	20c00044 	addi	r3,r4,1
  80e9a8:	1145883a 	add	r2,r2,r5
  80e9ac:	0009883a 	mov	r4,zero
  80e9b0:	15000215 	stw	r20,8(r2)
  80e9b4:	28c00115 	stw	r3,4(r5)
  80e9b8:	2005883a 	mov	r2,r4
  80e9bc:	dfc00517 	ldw	ra,20(sp)
  80e9c0:	dd000417 	ldw	r20,16(sp)
  80e9c4:	dcc00317 	ldw	r19,12(sp)
  80e9c8:	dc800217 	ldw	r18,8(sp)
  80e9cc:	dc400117 	ldw	r17,4(sp)
  80e9d0:	dc000017 	ldw	r16,0(sp)
  80e9d4:	dec00604 	addi	sp,sp,24
  80e9d8:	f800283a 	ret
  80e9dc:	29802204 	addi	r6,r5,136
  80e9e0:	00800044 	movi	r2,1
  80e9e4:	110e983a 	sll	r7,r2,r4
  80e9e8:	30c04017 	ldw	r3,256(r6)
  80e9ec:	2105883a 	add	r2,r4,r4
  80e9f0:	1085883a 	add	r2,r2,r2
  80e9f4:	1185883a 	add	r2,r2,r6
  80e9f8:	19c6b03a 	or	r3,r3,r7
  80e9fc:	14802015 	stw	r18,128(r2)
  80ea00:	14c00015 	stw	r19,0(r2)
  80ea04:	00800084 	movi	r2,2
  80ea08:	30c04015 	stw	r3,256(r6)
  80ea0c:	88bfe31e 	bne	r17,r2,80e99c <__register_exitproc+0x50>
  80ea10:	30804117 	ldw	r2,260(r6)
  80ea14:	11c4b03a 	or	r2,r2,r7
  80ea18:	30804115 	stw	r2,260(r6)
  80ea1c:	003fdf06 	br	80e99c <__register_exitproc+0x50>
  80ea20:	00802074 	movhi	r2,129
  80ea24:	109e7904 	addi	r2,r2,31204
  80ea28:	100b883a 	mov	r5,r2
  80ea2c:	80805215 	stw	r2,328(r16)
  80ea30:	003fd606 	br	80e98c <__register_exitproc+0x40>
  80ea34:	00800034 	movhi	r2,0
  80ea38:	10800004 	addi	r2,r2,0
  80ea3c:	1000021e 	bne	r2,zero,80ea48 <__register_exitproc+0xfc>
  80ea40:	013fffc4 	movi	r4,-1
  80ea44:	003fdc06 	br	80e9b8 <__register_exitproc+0x6c>
  80ea48:	01006404 	movi	r4,400
  80ea4c:	103ee83a 	callr	r2
  80ea50:	1007883a 	mov	r3,r2
  80ea54:	103ffa26 	beq	r2,zero,80ea40 <__register_exitproc+0xf4>
  80ea58:	80805217 	ldw	r2,328(r16)
  80ea5c:	180b883a 	mov	r5,r3
  80ea60:	18000115 	stw	zero,4(r3)
  80ea64:	18800015 	stw	r2,0(r3)
  80ea68:	80c05215 	stw	r3,328(r16)
  80ea6c:	18006215 	stw	zero,392(r3)
  80ea70:	18006315 	stw	zero,396(r3)
  80ea74:	0009883a 	mov	r4,zero
  80ea78:	883fc826 	beq	r17,zero,80e99c <__register_exitproc+0x50>
  80ea7c:	003fd706 	br	80e9dc <__register_exitproc+0x90>

0080ea80 <register_fini>:
  80ea80:	f800283a 	ret

0080ea84 <__call_exitprocs>:
  80ea84:	00802074 	movhi	r2,129
  80ea88:	10828c04 	addi	r2,r2,2608
  80ea8c:	10800017 	ldw	r2,0(r2)
  80ea90:	defff304 	addi	sp,sp,-52
  80ea94:	df000b15 	stw	fp,44(sp)
  80ea98:	d8800115 	stw	r2,4(sp)
  80ea9c:	00800034 	movhi	r2,0
  80eaa0:	10800004 	addi	r2,r2,0
  80eaa4:	1005003a 	cmpeq	r2,r2,zero
  80eaa8:	d8800215 	stw	r2,8(sp)
  80eaac:	d8800117 	ldw	r2,4(sp)
  80eab0:	dd400815 	stw	r21,32(sp)
  80eab4:	dd000715 	stw	r20,28(sp)
  80eab8:	10805204 	addi	r2,r2,328
  80eabc:	dfc00c15 	stw	ra,48(sp)
  80eac0:	ddc00a15 	stw	r23,40(sp)
  80eac4:	dd800915 	stw	r22,36(sp)
  80eac8:	dcc00615 	stw	r19,24(sp)
  80eacc:	dc800515 	stw	r18,20(sp)
  80ead0:	dc400415 	stw	r17,16(sp)
  80ead4:	dc000315 	stw	r16,12(sp)
  80ead8:	282b883a 	mov	r21,r5
  80eadc:	2039883a 	mov	fp,r4
  80eae0:	d8800015 	stw	r2,0(sp)
  80eae4:	2829003a 	cmpeq	r20,r5,zero
  80eae8:	d8800117 	ldw	r2,4(sp)
  80eaec:	14405217 	ldw	r17,328(r2)
  80eaf0:	88001026 	beq	r17,zero,80eb34 <__call_exitprocs+0xb0>
  80eaf4:	ddc00017 	ldw	r23,0(sp)
  80eaf8:	88800117 	ldw	r2,4(r17)
  80eafc:	8c802204 	addi	r18,r17,136
  80eb00:	143fffc4 	addi	r16,r2,-1
  80eb04:	80000916 	blt	r16,zero,80eb2c <__call_exitprocs+0xa8>
  80eb08:	05bfffc4 	movi	r22,-1
  80eb0c:	a000151e 	bne	r20,zero,80eb64 <__call_exitprocs+0xe0>
  80eb10:	8409883a 	add	r4,r16,r16
  80eb14:	2105883a 	add	r2,r4,r4
  80eb18:	1485883a 	add	r2,r2,r18
  80eb1c:	10c02017 	ldw	r3,128(r2)
  80eb20:	a8c01126 	beq	r21,r3,80eb68 <__call_exitprocs+0xe4>
  80eb24:	843fffc4 	addi	r16,r16,-1
  80eb28:	85bff81e 	bne	r16,r22,80eb0c <__call_exitprocs+0x88>
  80eb2c:	d8800217 	ldw	r2,8(sp)
  80eb30:	10003126 	beq	r2,zero,80ebf8 <__call_exitprocs+0x174>
  80eb34:	dfc00c17 	ldw	ra,48(sp)
  80eb38:	df000b17 	ldw	fp,44(sp)
  80eb3c:	ddc00a17 	ldw	r23,40(sp)
  80eb40:	dd800917 	ldw	r22,36(sp)
  80eb44:	dd400817 	ldw	r21,32(sp)
  80eb48:	dd000717 	ldw	r20,28(sp)
  80eb4c:	dcc00617 	ldw	r19,24(sp)
  80eb50:	dc800517 	ldw	r18,20(sp)
  80eb54:	dc400417 	ldw	r17,16(sp)
  80eb58:	dc000317 	ldw	r16,12(sp)
  80eb5c:	dec00d04 	addi	sp,sp,52
  80eb60:	f800283a 	ret
  80eb64:	8409883a 	add	r4,r16,r16
  80eb68:	88c00117 	ldw	r3,4(r17)
  80eb6c:	2105883a 	add	r2,r4,r4
  80eb70:	1445883a 	add	r2,r2,r17
  80eb74:	18ffffc4 	addi	r3,r3,-1
  80eb78:	11800217 	ldw	r6,8(r2)
  80eb7c:	1c001526 	beq	r3,r16,80ebd4 <__call_exitprocs+0x150>
  80eb80:	10000215 	stw	zero,8(r2)
  80eb84:	303fe726 	beq	r6,zero,80eb24 <__call_exitprocs+0xa0>
  80eb88:	00c00044 	movi	r3,1
  80eb8c:	1c06983a 	sll	r3,r3,r16
  80eb90:	90804017 	ldw	r2,256(r18)
  80eb94:	8cc00117 	ldw	r19,4(r17)
  80eb98:	1884703a 	and	r2,r3,r2
  80eb9c:	10001426 	beq	r2,zero,80ebf0 <__call_exitprocs+0x16c>
  80eba0:	90804117 	ldw	r2,260(r18)
  80eba4:	1884703a 	and	r2,r3,r2
  80eba8:	10000c1e 	bne	r2,zero,80ebdc <__call_exitprocs+0x158>
  80ebac:	2105883a 	add	r2,r4,r4
  80ebb0:	1485883a 	add	r2,r2,r18
  80ebb4:	11400017 	ldw	r5,0(r2)
  80ebb8:	e009883a 	mov	r4,fp
  80ebbc:	303ee83a 	callr	r6
  80ebc0:	88800117 	ldw	r2,4(r17)
  80ebc4:	98bfc81e 	bne	r19,r2,80eae8 <__call_exitprocs+0x64>
  80ebc8:	b8800017 	ldw	r2,0(r23)
  80ebcc:	147fd526 	beq	r2,r17,80eb24 <__call_exitprocs+0xa0>
  80ebd0:	003fc506 	br	80eae8 <__call_exitprocs+0x64>
  80ebd4:	8c000115 	stw	r16,4(r17)
  80ebd8:	003fea06 	br	80eb84 <__call_exitprocs+0x100>
  80ebdc:	2105883a 	add	r2,r4,r4
  80ebe0:	1485883a 	add	r2,r2,r18
  80ebe4:	11000017 	ldw	r4,0(r2)
  80ebe8:	303ee83a 	callr	r6
  80ebec:	003ff406 	br	80ebc0 <__call_exitprocs+0x13c>
  80ebf0:	303ee83a 	callr	r6
  80ebf4:	003ff206 	br	80ebc0 <__call_exitprocs+0x13c>
  80ebf8:	88800117 	ldw	r2,4(r17)
  80ebfc:	1000081e 	bne	r2,zero,80ec20 <__call_exitprocs+0x19c>
  80ec00:	89000017 	ldw	r4,0(r17)
  80ec04:	20000726 	beq	r4,zero,80ec24 <__call_exitprocs+0x1a0>
  80ec08:	b9000015 	stw	r4,0(r23)
  80ec0c:	8809883a 	mov	r4,r17
  80ec10:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  80ec14:	bc400017 	ldw	r17,0(r23)
  80ec18:	883fb71e 	bne	r17,zero,80eaf8 <__call_exitprocs+0x74>
  80ec1c:	003fc506 	br	80eb34 <__call_exitprocs+0xb0>
  80ec20:	89000017 	ldw	r4,0(r17)
  80ec24:	882f883a 	mov	r23,r17
  80ec28:	2023883a 	mov	r17,r4
  80ec2c:	883fb21e 	bne	r17,zero,80eaf8 <__call_exitprocs+0x74>
  80ec30:	003fc006 	br	80eb34 <__call_exitprocs+0xb0>

0080ec34 <udivmodsi4>:
  80ec34:	29001b2e 	bgeu	r5,r4,80eca4 <udivmodsi4+0x70>
  80ec38:	28001a16 	blt	r5,zero,80eca4 <udivmodsi4+0x70>
  80ec3c:	00800044 	movi	r2,1
  80ec40:	0007883a 	mov	r3,zero
  80ec44:	01c007c4 	movi	r7,31
  80ec48:	00000306 	br	80ec58 <udivmodsi4+0x24>
  80ec4c:	19c01326 	beq	r3,r7,80ec9c <udivmodsi4+0x68>
  80ec50:	18c00044 	addi	r3,r3,1
  80ec54:	28000416 	blt	r5,zero,80ec68 <udivmodsi4+0x34>
  80ec58:	294b883a 	add	r5,r5,r5
  80ec5c:	1085883a 	add	r2,r2,r2
  80ec60:	293ffa36 	bltu	r5,r4,80ec4c <udivmodsi4+0x18>
  80ec64:	10000d26 	beq	r2,zero,80ec9c <udivmodsi4+0x68>
  80ec68:	0007883a 	mov	r3,zero
  80ec6c:	21400236 	bltu	r4,r5,80ec78 <udivmodsi4+0x44>
  80ec70:	2149c83a 	sub	r4,r4,r5
  80ec74:	1886b03a 	or	r3,r3,r2
  80ec78:	1004d07a 	srli	r2,r2,1
  80ec7c:	280ad07a 	srli	r5,r5,1
  80ec80:	103ffa1e 	bne	r2,zero,80ec6c <udivmodsi4+0x38>
  80ec84:	30000226 	beq	r6,zero,80ec90 <udivmodsi4+0x5c>
  80ec88:	2005883a 	mov	r2,r4
  80ec8c:	f800283a 	ret
  80ec90:	1809883a 	mov	r4,r3
  80ec94:	2005883a 	mov	r2,r4
  80ec98:	f800283a 	ret
  80ec9c:	0007883a 	mov	r3,zero
  80eca0:	003ff806 	br	80ec84 <udivmodsi4+0x50>
  80eca4:	00800044 	movi	r2,1
  80eca8:	0007883a 	mov	r3,zero
  80ecac:	003fef06 	br	80ec6c <udivmodsi4+0x38>

0080ecb0 <__divsi3>:
  80ecb0:	defffe04 	addi	sp,sp,-8
  80ecb4:	dc000015 	stw	r16,0(sp)
  80ecb8:	dfc00115 	stw	ra,4(sp)
  80ecbc:	0021883a 	mov	r16,zero
  80ecc0:	20000c16 	blt	r4,zero,80ecf4 <__divsi3+0x44>
  80ecc4:	000d883a 	mov	r6,zero
  80ecc8:	28000e16 	blt	r5,zero,80ed04 <__divsi3+0x54>
  80eccc:	080ec340 	call	80ec34 <udivmodsi4>
  80ecd0:	1007883a 	mov	r3,r2
  80ecd4:	8005003a 	cmpeq	r2,r16,zero
  80ecd8:	1000011e 	bne	r2,zero,80ece0 <__divsi3+0x30>
  80ecdc:	00c7c83a 	sub	r3,zero,r3
  80ece0:	1805883a 	mov	r2,r3
  80ece4:	dfc00117 	ldw	ra,4(sp)
  80ece8:	dc000017 	ldw	r16,0(sp)
  80ecec:	dec00204 	addi	sp,sp,8
  80ecf0:	f800283a 	ret
  80ecf4:	0109c83a 	sub	r4,zero,r4
  80ecf8:	04000044 	movi	r16,1
  80ecfc:	000d883a 	mov	r6,zero
  80ed00:	283ff20e 	bge	r5,zero,80eccc <__divsi3+0x1c>
  80ed04:	014bc83a 	sub	r5,zero,r5
  80ed08:	8021003a 	cmpeq	r16,r16,zero
  80ed0c:	003fef06 	br	80eccc <__divsi3+0x1c>

0080ed10 <__modsi3>:
  80ed10:	deffff04 	addi	sp,sp,-4
  80ed14:	dfc00015 	stw	ra,0(sp)
  80ed18:	01800044 	movi	r6,1
  80ed1c:	2807883a 	mov	r3,r5
  80ed20:	20000416 	blt	r4,zero,80ed34 <__modsi3+0x24>
  80ed24:	28000c16 	blt	r5,zero,80ed58 <__modsi3+0x48>
  80ed28:	dfc00017 	ldw	ra,0(sp)
  80ed2c:	dec00104 	addi	sp,sp,4
  80ed30:	080ec341 	jmpi	80ec34 <udivmodsi4>
  80ed34:	0109c83a 	sub	r4,zero,r4
  80ed38:	28000b16 	blt	r5,zero,80ed68 <__modsi3+0x58>
  80ed3c:	180b883a 	mov	r5,r3
  80ed40:	01800044 	movi	r6,1
  80ed44:	080ec340 	call	80ec34 <udivmodsi4>
  80ed48:	0085c83a 	sub	r2,zero,r2
  80ed4c:	dfc00017 	ldw	ra,0(sp)
  80ed50:	dec00104 	addi	sp,sp,4
  80ed54:	f800283a 	ret
  80ed58:	014bc83a 	sub	r5,zero,r5
  80ed5c:	dfc00017 	ldw	ra,0(sp)
  80ed60:	dec00104 	addi	sp,sp,4
  80ed64:	080ec341 	jmpi	80ec34 <udivmodsi4>
  80ed68:	0147c83a 	sub	r3,zero,r5
  80ed6c:	003ff306 	br	80ed3c <__modsi3+0x2c>

0080ed70 <__udivsi3>:
  80ed70:	000d883a 	mov	r6,zero
  80ed74:	080ec341 	jmpi	80ec34 <udivmodsi4>

0080ed78 <__umodsi3>:
  80ed78:	01800044 	movi	r6,1
  80ed7c:	080ec341 	jmpi	80ec34 <udivmodsi4>

0080ed80 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80ed80:	defffd04 	addi	sp,sp,-12
  80ed84:	df000215 	stw	fp,8(sp)
  80ed88:	df000204 	addi	fp,sp,8
  80ed8c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80ed90:	e0bfff17 	ldw	r2,-4(fp)
  80ed94:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80ed98:	e0bffe17 	ldw	r2,-8(fp)
  80ed9c:	1005003a 	cmpeq	r2,r2,zero
  80eda0:	1000021e 	bne	r2,zero,80edac <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80eda4:	002af070 	cmpltui	zero,zero,43969
  80eda8:	00000106 	br	80edb0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80edac:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80edb0:	e037883a 	mov	sp,fp
  80edb4:	df000017 	ldw	fp,0(sp)
  80edb8:	dec00104 	addi	sp,sp,4
  80edbc:	f800283a 	ret

0080edc0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80edc0:	defffd04 	addi	sp,sp,-12
  80edc4:	dfc00215 	stw	ra,8(sp)
  80edc8:	df000115 	stw	fp,4(sp)
  80edcc:	df000104 	addi	fp,sp,4
  80edd0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80edd4:	00802074 	movhi	r2,129
  80edd8:	10898f44 	addi	r2,r2,9789
  80eddc:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80ede0:	e13fff17 	ldw	r4,-4(fp)
  80ede4:	080ed800 	call	80ed80 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80ede8:	003fff06 	br	80ede8 <_exit+0x28>
  80edec:	0080ea80 	call	80ea8 <OSCtxSw_SWITCH_PC+0x80e68>
