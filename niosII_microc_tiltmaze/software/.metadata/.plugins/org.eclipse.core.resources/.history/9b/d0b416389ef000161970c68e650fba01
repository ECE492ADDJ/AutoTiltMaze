/*
 * uart.c
 *
 *  Created on: Feb 7, 2017
 *      Author: dktrotti
 */

#include "uart.h"

/* System and Synchronization Variables*/
alt_up_rs232_dev *uart;
OS_EVENT *cmdQ;

void uart_init(OS_EVENT *cmdQueue) {
	uart = alt_up_rs232_open_dev(RS232_0_NAME);
	cmdQ = cmdQueue;

	alt_up_rs232_enable_read_interrupt(uart);
}

void uarttask(void *pdata) {
	IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0x00);

	char *buf;
	alt_u8 curr;
	alt_u8 parity;
	int index = 0;
	int err;
	bool inframe = false;

	buf = (char *) malloc(sizeof(char) * (MSG_MAX_LEN + 1));
	buf[index] = '\0';

	while (1) {
		if (alt_up_rs232_get_used_space_in_read_FIFO(uart) > 0) {
	        err = alt_up_rs232_read_data(uart, &curr, &parity);

	        if (err != 0) {
	        	// TODO: There was an error, deal with it
	        	IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0x01);
	        }

	        if (parity != 0) {
	        	// TODO: Error in byte, discard buffer
	        	IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0x02);
	        }

	        // Does not use message timeout
	        if (curr == MSG_OPEN_CHAR) {
	        	index = 0;
	        	buf[index] = '\0';
	        	inframe = true;
	        } else if (curr == MSG_CLOSE_CHAR && inframe) {
	        	buf[index] = '\0';

	        	printf("\nMsg: %s\n", buf);
	        	err = OSQPost(cmdQ, (void *)buf);

	        	if (err != OS_NO_ERR) {
	        		printf("Queue post error\n");
	        	}

	        	index = 0;
	        	buf = malloc(sizeof(char) * (MSG_MAX_LEN + 1));
	        	buf[index] = '\0';

	        	inframe = false;

	        } else if (inframe){
	        	buf[index] = curr;
	        	index++;
	        } else {
	        	// Ignore char
	        	index = 0;
	        	buf[index] = '\0';
	        }

        	if (index > MSG_MAX_LEN) {
	        	index = 0;
	        	buf[index] = '\0';
	        	inframe = false;
        	}
		}

		OSTimeDlyHMSM(0, 0, 0, 5);
	}
}

//static void interrupt_isr_uart(void *isr_context) {
void uart_interrupt_handler() {
	static long time = 0;
	static char *buf = NULL;
	static alt_u8 curr;
	static alt_u8 parity;
	static int index = 0;
	static int err;
	static bool inframe = false;


	if (IORD_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE) == 0x00) {
		IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0xff);
	} else {
		IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0x00);
	}

	if (buf == NULL) {
		// First time buffer creation
		buf = (char *) malloc(sizeof(char) * (MSG_MAX_LEN + 1));
		buf[index] = '\0';
	}

	if (OSTimeGet() - time > MSG_TIMEOUT) {
		// Clear the message
    	index = 0;
    	buf[index] = '\0';
    	inframe = false;
	}

	while(alt_up_rs232_get_used_space_in_read_FIFO(uart) > 0) {
		err = alt_up_rs232_read_data(uart, &curr, &parity);

        if (err != 0) {
        	// TODO: There was an error, deal with it
        	IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0x01);
        }

        if (parity != 0) {
        	// TODO: Error in byte, discard buffer
        	IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0x02);
        }

        if (curr == MSG_OPEN_CHAR) {
        	index = 0;
        	buf[index] = '\0';
        	inframe = true;
        } else if (curr == MSG_CLOSE_CHAR && inframe) {
        	buf[index] = '\0';

        	err = OSQPost(cmdQ, (void *)buf);

        	if (err != OS_NO_ERR) {
        		// TODO: Implement proper error handling
            	IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0x04);
        	}

        	index = 0;
        	buf = malloc(sizeof(char) * (MSG_MAX_LEN + 1));
        	buf[index] = '\0';

        	inframe = false;

        } else if (inframe){
        	buf[index] = curr;
        	index++;
        } else {
        	//Ignore char
        	index = 0;
        	buf[index] = '\0';
        }

    	if (index > MSG_MAX_LEN) {
        	index = 0;
        	buf[index] = '\0';
        	inframe = false;
    	}
	}
}

int uart_write(char *buf, int len) {
	// TODO: Not thread safe, need lock
	int err;

	err = alt_up_rs232_write_data(uart, MSG_OPEN_CHAR);
	if (err != 0) {
		return err;
	}

	int i = 0;
	for (i = 0; i < len; i++) {
		if (buf[i] == '\0') {
			break;
		} else {
			err = alt_up_rs232_write_data(uart, buf[i]);
			if (err != 0) {
				return err;
			}
		}
	}

	err = alt_up_rs232_write_data(uart, MSG_CLOSE_CHAR);
	if (err != 0) {
		return err;
	}

	// TODO: Replace with defined value
	return 0;
}
